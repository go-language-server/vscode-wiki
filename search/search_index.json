{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to the Visual Studio Code Wiki. These pages are primarily intended for those who wish to contribute to the VS Code project by submitting bug reports, suggesting new features, building extensions, commenting on new ideas, or even by submitting pull requests. Please refer to the sidebar (on the right) for details on Project Management, Contributing to VS Code, and Documentation. If you are looking for more information on using VS Code, please visit our the Visual Studio Code portal and follow us on Twitter !","title":"Welcome"},{"location":"#welcome","text":"Welcome to the Visual Studio Code Wiki. These pages are primarily intended for those who wish to contribute to the VS Code project by submitting bug reports, suggesting new features, building extensions, commenting on new ideas, or even by submitting pull requests. Please refer to the sidebar (on the right) for details on Project Management, Contributing to VS Code, and Documentation. If you are looking for more information on using VS Code, please visit our the Visual Studio Code portal and follow us on Twitter !","title":"Welcome"},{"location":"Adopting-Multi-Root-Workspace-APIs/","text":"Request: if you have prepared your extension for Multi-root Workspaces we would love you to add multi-root ready to your package.json i.e. \"keywords\": [\"multi-root ready\"] . If you upgrade to VSCE 1.32.0 this can be added to any existing keywords and will not be counted against the maximum of 5 allowed keywords. Synopsis This wiki page explains the impact of the new multi-root-workspace feature on extensions. You will learn the concepts, new APIs and understand if and how to make your extension ready for multi-root-workspace support. A multi-root workspace is a new way how to work with VS Code. At its core, it allows to open multiple folders in the same instance from any location that is accessible on disk. All parts of the VS Code user interface adapt to the number of folders opened, e.g. the file explorer will show all folders in a single tree and the full text search will search across all folders. It is in the best interest for the users that extensions also adapt to supporting multiple folders. There are numerous ways how to create a multi-root workspace. The simplest one is to just open multiple folders from the command line: code-insiders <folder1> <folder2>... All workspace metadata is stored in a simple JSON file that can be saved and shared ( File | Save Workspace As... ) with others: { \"folders\" : [ { \"path\" : \"some-path\" }, { \"path\" : \"some-other-path\" } ], \"settings\" : { \"...any settings...\" } } In its most simple form a VS Code workspace is just a collection of folders (called WorkspaceFolder in the API) and associated settings that should apply whenever the workspace is opened. Each WorkspaceFolder can have additional metadata associated (for example a name property). This guide will help you as extension author to make your extension ready for multi-root workspaces. It touches on three major pieces (basics, settings, language client/server) and is joined by samples from our samples repository . Do I need to do anything? Here is a simple check list: * If your extension is making use of the (now deprecated) workspace.rootPath property to work on the currently opened folder, then you are affected. See the section 'Eliminating workspace.rootPath below'. * If your extension contributes settings then you should review whether some of the settings can be applied on a resource (= file location) level instead of being global. Resource settings are more powerful because a user can choose to configure settings differently per workspace folder. Similarly, if you do not contribute settings but you modify settings programmatically, then you should review that you modify the settings using the proper scope. See the 'Settings' section below. * If you are implementing a language server then you are affected since up to now a language server only had to handle a single folder. In the new multi-folder setup, a language server should be able to handle multiple folders. See the section 'Language Client/Language Server' below. * If you are implementing a debug adapter then you are most likely not affected because a debug adapter cannot access the extension APIs (like workspace.rootPath ) and debug configuration variables like ${workspaceFolder} (or the deprecated ${workspaceRoot} ) are already resolved into full paths before they are passed into the debug adapter. Eliminating rootPath The basic APIs to work with multi root workspaces are: Method Description workspace.workspaceFolders access to all WorkspaceFolder (can be undefined when no workspace is opened!) workspace.onDidChangeWorkspaceFolders be notified when WorkspaceFolder are added or removed workspace.getWorkspaceFolder(uri) get the WorkspaceFolder for a given resource (can be undefined when resource is not part of any workspace folder!) Your extension should be capable of working with any number of WorkspaceFolder , including 0, 1 or many folders. The WorkspaceFoldersChangeEvent carries information about the added or removed WorkspaceFolder . To find out to which WorkspaceFolder a given resource belongs to, use the workspace.getWorkspaceFolder(uri) method. Note : Using workspace.getWorkspaceFolder(uri) with the URI of a WorkspaceFolder will return that instance of the WorkspaceFolder . Each WorkspaceFolder provides access to some metadata: Property Description uri the associated uri for this workspace folder. The Uri-type was intentionally chosen such that future releases of the editor can support workspace folders that are not stored on the local disk, e.g. ftp://server/workspaces/foo . index the 0-based index of the folder as configured by the user name the name of the folder (defaults to the folder name) Note 1: a user is free to configure folders for a workspace that are overlapping. E.g. a workspace can consist of a parent folder as well as any of its children. It is up to the extension to be clever here and avoid duplicate work. For example, a task that scans all files of a folder should not duplicate the work by scanning again for a child folder if any. Note 2: a workspace folder might use a uri which does not resolve to a file on disk. So, it must not always be a file -uri, but VSCode will soon support workspace folders from remote locations. The basic-multi-root-sample extension is demonstrating the use of this API by showing the workspace folder of the currently opened file in the left hand side of the status bar. New helpful API In order to make it easier to work with multiple-roots from your extension, we added some new API. For example, if you need to ask the user for a specific WorkspaceFolder , you can use the new showWorkspaceFolderPick method that will open a picker and returns the result. This method will return undefined in case the user did not pick any folder or in case no workspace is opened. In addition, we introduced the RelativePattern type and support it in the API where we ask for glob patterns to match on file paths. There maybe scenarios where you want to restrict the glob matching on a specific WorkspaceFolder and RelativePattern allows this by providing a base for the pattern to match against. You can use RelativePattern in: * workspace.createFileSystemWatcher(pattern) * workspace.findFiles(include, exclude)) * DocumentFilter#pattern The type is a class as follows: /** * A relative pattern is a helper to construct glob patterns that are matched * relatively to a base path. The base path can either be an absolute file path * or a [workspace folder](#WorkspaceFolder). */ class RelativePattern { /** * A base file path to which this pattern will be matched against relatively. */ base : string ; /** * A file glob pattern like `*.{ts,js}` that will be matched on file paths * relative to the base path. * * Example: Given a base of `/home/work/folder` and a file path of `/home/work/folder/index.js`, * the file glob pattern will match on `index.js`. */ pattern : string ; /** * Creates a new relative pattern object with a base path and pattern to match. This pattern * will be matched on file paths relative to the base path. * * @param base A base file path to which this pattern will be matched against relatively. * @param pattern A file glob pattern like `*.{ts,js}` that will be matched on file paths * relative to the base path. */ constructor ( base : WorkspaceFolder | string , pattern : string ) } You can create a relative pattern via the following call: // Construct a relative pattern for the first root folder const relativePattern = new vscode . RelativePattern ( vscode . workspace . workspaceFolders [ 0 ], '*.ts' ); Settings With the introduction of multi-root workspaces, we also revisited how settings can apply. We differentiate between where a setting is persisted and how a setting applies. Settings can be stored in various locations: Location Description User Data Global settings.json file in the user data directory that applies to any VS Code instance Workspace File ( new ) Settings stored within the .code-workspace file of a multi-root workspace which apply whenever the workspace is opened Workspace Folder Settings stored inside a .vscode folder of a workspace folder which apply depending on opening the folder or a workspace with that folder (see below). Let's have a closer look at Workspace Folder settings that are stored within the .vscode folder: If you are opening just that folder in VS Code, all the settings of this folder apply to VS Code as before. However, once you make this folder part of a multi-root workspace, the situation is different. We no longer support all settings in this setup simply because you could have multiple folders configured in the workspace, each having settings that could potentially conflict. To solve this, we distinguish between scopes a setting can have. You as extension author have to make the decision which scope applies for your settings: Scope Description window the setting is applied to the entire VS Code instance resource the setting is applied depending on an active resource By default, all settings have the window scope, however we encourage you to support settings on the resource scope. Settings that apply on the window level are not supported once they are defined within a workspace folder and as soon as the user entered a multi-root workspace. Settings that apply on a resource level however are supported and as such, each workspace folder can have different values for these settings. Note: When a setting is defined as a resource scoped setting, then you have to use the new configuration API that fetches the setting that applies to a resource (see the Settings API section below). Settings Configuration To declare a setting scope, simply define the scope as part of your setting from the package.json file. The example below is copied from the Configuration Sample extension: \"contributes\" : { \"configuration\" : [ { \"title\" : \"Configuration Samples\" , \"properties\" : { \"conf.view.showOnWindowOpen\" : { \"type\" : \"string\" , \"enum\" : [ \"explorer\" , \"search\" , \"scm\" , \"debug\" , \"extensions\" ], \"default\" : \"explorer\" , \"description\" : \"Window configuration: View to show always when a window opens\" , \"scope\" : \"window\" }, \"conf.resource.insertEmptyLastLine\" : { \"type\" : \"object\" , \"default\" : {}, \"description\" : \"Resource configurtion: Configure files using glob patterns to have an empty last line always\" , \"scope\" : \"resource\" } } } ] } Settings API The configuration example above defines a setting scoped to a resource. To fetch its value you use the workspace.getConfiguration() API and pass the URI of the resource as second parameter. You can see Example 3 how the setting is used in the basic-multi-root sample. Under the hood, resource settings are resolved with a simple logic: We try to find a WorkspaceFolder for the resource that is passed into the getConfiguration API. If such a folder exists and that folder defines the setting, it will be returned. Otherwise the normal logic applies for finding the setting on a parent level: it could be defined within the workspace file or on the user level. Note: You do not have to be aware if the user has opened a workspace or not when using the getConfiguration API with resource scope. Just make sure to always pass the resource scope URI around and we will do the resolution of the setting based on the user's setup. Perspectives An extension author, you should have following two perspectives while defining a setting End User: Given a setting, an end user should know where he/she can customise this setting. By defining a setting as resource or window scoped, user can be able customise it at right targets. It means, User can open settings and can customise a window ( window.zoomLevel ) or resource ( editor.wordWrap ) setting in User/Workspace Settings. But when user lands into Folder Settings, user can only customise resource settings ( editor.wordWrap ). VS Code will use the setting's classification information to provide right proposals in intelli-sense and will warn user if customising window settings in Folder settings. Extension author: Extension author's main purpose is to define a setting and read its value and apply it. As mentioned before now, there is a new target Folder Settings where a resource scoped setting can only be customisable. So extension author should be knowing if a setting is associated to a resource or not and thereby, classify the setting. If it is a resource setting, ask for the value of the setting by passing the resource for which the value has to be applied. Otherwise you can just ask for the value without passing any resource. API will give you back the value user customised for this setting. Run time Diagnostics While extension development, we provide some run time assistance by logging warnings when we detect the extension is accessing configuration not in an expected way. Following are the diagnostics we show and actions to be taken when you see them. [ext.name]: Accessing a resource scoped configuration without providing a resource is not expected. To get the effective value for '${key}', provide the URI of a resource or 'null' for any resource. It is suggested to pass in a resource when you are accessing a resource scoped configuration. In case of getting the value for any resource, pass null for resource. [ext.name]: Accessing a window scoped configuration for a resource is not expected. To associate '${key}' to a resource, define its scope to 'resource' in configuration contributions in 'package.json'. If they are not resource scoped settings, you do not need to pass in a resource while accessing the setting. If they are resource scoped settings, you have to define them as Resource scoped while registering in the package.json Refer to Configuration Sample extension for more information. Language Client / Language Server Since language servers usually act on a workspace they are also affected by the introduction of multi-root workspaces. A language server extension needs to check for the following items and adopt its code accordingly: if the server accesses the rootPath or rootURI property of the InitializeParams passed in the initialize request then the language server must instead use the property workspaceFolders . Since workspace folders can come and go dynamically the server also need to register for workspace/didChangeWorkspaceFolders notifications. The documentation can be found here . if the server is using configuration settings the author also has to review the scope of the settings (see the Settings section above). For a language server 'resource' scope is typically preferred, since it enables a user to configure that language settings on a per folder basis. In addition, the server has to change the way settings are accessed (see the Language Settings section below). Single language server or server per folder? The first decision the author of a language server must make is whether a single server can handle all the folders in a multi-root folder setup or whether you want to run a server per root folder. Using a single server is the recommended way. Sharing a single server is more resource friendly than running multiple servers. Language servers that operate on a single file like a CSS or JSON file or linters that validate a single file at a time can easily handle multiple folders. We have already migrated the HTML, JSON, CSS language servers and the 'eslint' and 'tslint' Language servers. We have implemented them all as a single language server. The lsp-sample example demonstrates the use of the new protocol workspace folder and configuration protocol. We recommend that you also review the corresponding extensions when migrating your server. Language servers that operate on multiple files with interdependencies can be different and you need to evaluate whether you want to start a server per workspace folder to isolate folders from each other. We have migrated the TypeScript/JavaScript language server and we were able to use a single server for multiple folders. We added support to this to the vscode-languageclient library and the lsp-multi-server-sample example demonstrates the use of a server per folder. Language settings In the current version of the language server protocol the client pushes settings to the server. With the introduction of a resource scope this is not possible anymore since the actual settings values can depend on a resource. We introduce protocol which allow servers to fetch settings from a client comparable to the getConfiguration API in the extension host. The protocol addition is documented here . The bundled CSS or HTML language extensions illustrate this approach. A setting that supports file paths relative to a workspace needs special treatment. In the single folder case the language server process is started in the root folder of the workspace. A relative path can then be resolved easily since the server's home directory corresponds to the workspace root. In the multi-root folder setup this is no longer the case and when the setting is defined as a resource scoped setting, then the path needs to be resolved per root folder. One approach that has worked well for us, is to resolve the relative file path of a setting on the client using the new settings API. In this way the server only sees absolute paths. An example for this can be found in vscode-tslint . It uses the vscode-languageclient middleware to transform the relative file paths. Samples Sample|Description ------|-----------| Basic multi root |Illustrates the WorkspaceFolder API and how to work with a resource scoped configuration setting.| Language Server Settings |Demonstrates how to handle configuration settings in a language server.| Multi Language Server |Starts a language server for each root folder in a workspace.| Writing Tests Today we do not provide any extension API to add or remove workspace folders. However, you are free to run your extension tests against a code-workspace.json file that can contain any number of workspace folders. Modifying this file programmatically will cause the workspace to change, however you have to account for the changes to the file bubbling through to VS Code for the update to happen (this can take up to a second). To start your extension tests on a workspace, open the launch.json and add the path to the file to the args property: { \"name\" : \"Launch Extension\" , \"type\" : \"extensionHost\" , \"request\" : \"launch\" , \"runtimeExecutable\" : \"${execPath}\" , \"args\" : [ \"${workspaceRoot}/test/test.code-workspace\" , \"--extensionDevelopmentPath=${workspaceRoot}\" ], \"stopOnEntry\" : false , \"sourceMaps\" : true , \"outFiles\" : [ \"${workspaceRoot}/out/src/**/*.js\" ], \"preLaunchTask\" : \"npm\" }","title":"Adopting Multi Root Workspace APIs"},{"location":"Adopting-Multi-Root-Workspace-APIs/#synopsis","text":"This wiki page explains the impact of the new multi-root-workspace feature on extensions. You will learn the concepts, new APIs and understand if and how to make your extension ready for multi-root-workspace support. A multi-root workspace is a new way how to work with VS Code. At its core, it allows to open multiple folders in the same instance from any location that is accessible on disk. All parts of the VS Code user interface adapt to the number of folders opened, e.g. the file explorer will show all folders in a single tree and the full text search will search across all folders. It is in the best interest for the users that extensions also adapt to supporting multiple folders. There are numerous ways how to create a multi-root workspace. The simplest one is to just open multiple folders from the command line: code-insiders <folder1> <folder2>... All workspace metadata is stored in a simple JSON file that can be saved and shared ( File | Save Workspace As... ) with others: { \"folders\" : [ { \"path\" : \"some-path\" }, { \"path\" : \"some-other-path\" } ], \"settings\" : { \"...any settings...\" } } In its most simple form a VS Code workspace is just a collection of folders (called WorkspaceFolder in the API) and associated settings that should apply whenever the workspace is opened. Each WorkspaceFolder can have additional metadata associated (for example a name property). This guide will help you as extension author to make your extension ready for multi-root workspaces. It touches on three major pieces (basics, settings, language client/server) and is joined by samples from our samples repository .","title":"Synopsis"},{"location":"Adopting-Multi-Root-Workspace-APIs/#do-i-need-to-do-anything","text":"Here is a simple check list: * If your extension is making use of the (now deprecated) workspace.rootPath property to work on the currently opened folder, then you are affected. See the section 'Eliminating workspace.rootPath below'. * If your extension contributes settings then you should review whether some of the settings can be applied on a resource (= file location) level instead of being global. Resource settings are more powerful because a user can choose to configure settings differently per workspace folder. Similarly, if you do not contribute settings but you modify settings programmatically, then you should review that you modify the settings using the proper scope. See the 'Settings' section below. * If you are implementing a language server then you are affected since up to now a language server only had to handle a single folder. In the new multi-folder setup, a language server should be able to handle multiple folders. See the section 'Language Client/Language Server' below. * If you are implementing a debug adapter then you are most likely not affected because a debug adapter cannot access the extension APIs (like workspace.rootPath ) and debug configuration variables like ${workspaceFolder} (or the deprecated ${workspaceRoot} ) are already resolved into full paths before they are passed into the debug adapter.","title":"Do I need to do anything?"},{"location":"Adopting-Multi-Root-Workspace-APIs/#eliminating-rootpath","text":"The basic APIs to work with multi root workspaces are: Method Description workspace.workspaceFolders access to all WorkspaceFolder (can be undefined when no workspace is opened!) workspace.onDidChangeWorkspaceFolders be notified when WorkspaceFolder are added or removed workspace.getWorkspaceFolder(uri) get the WorkspaceFolder for a given resource (can be undefined when resource is not part of any workspace folder!) Your extension should be capable of working with any number of WorkspaceFolder , including 0, 1 or many folders. The WorkspaceFoldersChangeEvent carries information about the added or removed WorkspaceFolder . To find out to which WorkspaceFolder a given resource belongs to, use the workspace.getWorkspaceFolder(uri) method. Note : Using workspace.getWorkspaceFolder(uri) with the URI of a WorkspaceFolder will return that instance of the WorkspaceFolder . Each WorkspaceFolder provides access to some metadata: Property Description uri the associated uri for this workspace folder. The Uri-type was intentionally chosen such that future releases of the editor can support workspace folders that are not stored on the local disk, e.g. ftp://server/workspaces/foo . index the 0-based index of the folder as configured by the user name the name of the folder (defaults to the folder name) Note 1: a user is free to configure folders for a workspace that are overlapping. E.g. a workspace can consist of a parent folder as well as any of its children. It is up to the extension to be clever here and avoid duplicate work. For example, a task that scans all files of a folder should not duplicate the work by scanning again for a child folder if any. Note 2: a workspace folder might use a uri which does not resolve to a file on disk. So, it must not always be a file -uri, but VSCode will soon support workspace folders from remote locations. The basic-multi-root-sample extension is demonstrating the use of this API by showing the workspace folder of the currently opened file in the left hand side of the status bar.","title":"Eliminating rootPath"},{"location":"Adopting-Multi-Root-Workspace-APIs/#new-helpful-api","text":"In order to make it easier to work with multiple-roots from your extension, we added some new API. For example, if you need to ask the user for a specific WorkspaceFolder , you can use the new showWorkspaceFolderPick method that will open a picker and returns the result. This method will return undefined in case the user did not pick any folder or in case no workspace is opened. In addition, we introduced the RelativePattern type and support it in the API where we ask for glob patterns to match on file paths. There maybe scenarios where you want to restrict the glob matching on a specific WorkspaceFolder and RelativePattern allows this by providing a base for the pattern to match against. You can use RelativePattern in: * workspace.createFileSystemWatcher(pattern) * workspace.findFiles(include, exclude)) * DocumentFilter#pattern The type is a class as follows: /** * A relative pattern is a helper to construct glob patterns that are matched * relatively to a base path. The base path can either be an absolute file path * or a [workspace folder](#WorkspaceFolder). */ class RelativePattern { /** * A base file path to which this pattern will be matched against relatively. */ base : string ; /** * A file glob pattern like `*.{ts,js}` that will be matched on file paths * relative to the base path. * * Example: Given a base of `/home/work/folder` and a file path of `/home/work/folder/index.js`, * the file glob pattern will match on `index.js`. */ pattern : string ; /** * Creates a new relative pattern object with a base path and pattern to match. This pattern * will be matched on file paths relative to the base path. * * @param base A base file path to which this pattern will be matched against relatively. * @param pattern A file glob pattern like `*.{ts,js}` that will be matched on file paths * relative to the base path. */ constructor ( base : WorkspaceFolder | string , pattern : string ) } You can create a relative pattern via the following call: // Construct a relative pattern for the first root folder const relativePattern = new vscode . RelativePattern ( vscode . workspace . workspaceFolders [ 0 ], '*.ts' );","title":"New helpful API"},{"location":"Adopting-Multi-Root-Workspace-APIs/#settings","text":"With the introduction of multi-root workspaces, we also revisited how settings can apply. We differentiate between where a setting is persisted and how a setting applies. Settings can be stored in various locations: Location Description User Data Global settings.json file in the user data directory that applies to any VS Code instance Workspace File ( new ) Settings stored within the .code-workspace file of a multi-root workspace which apply whenever the workspace is opened Workspace Folder Settings stored inside a .vscode folder of a workspace folder which apply depending on opening the folder or a workspace with that folder (see below). Let's have a closer look at Workspace Folder settings that are stored within the .vscode folder: If you are opening just that folder in VS Code, all the settings of this folder apply to VS Code as before. However, once you make this folder part of a multi-root workspace, the situation is different. We no longer support all settings in this setup simply because you could have multiple folders configured in the workspace, each having settings that could potentially conflict. To solve this, we distinguish between scopes a setting can have. You as extension author have to make the decision which scope applies for your settings: Scope Description window the setting is applied to the entire VS Code instance resource the setting is applied depending on an active resource By default, all settings have the window scope, however we encourage you to support settings on the resource scope. Settings that apply on the window level are not supported once they are defined within a workspace folder and as soon as the user entered a multi-root workspace. Settings that apply on a resource level however are supported and as such, each workspace folder can have different values for these settings. Note: When a setting is defined as a resource scoped setting, then you have to use the new configuration API that fetches the setting that applies to a resource (see the Settings API section below).","title":"Settings"},{"location":"Adopting-Multi-Root-Workspace-APIs/#settings-configuration","text":"To declare a setting scope, simply define the scope as part of your setting from the package.json file. The example below is copied from the Configuration Sample extension: \"contributes\" : { \"configuration\" : [ { \"title\" : \"Configuration Samples\" , \"properties\" : { \"conf.view.showOnWindowOpen\" : { \"type\" : \"string\" , \"enum\" : [ \"explorer\" , \"search\" , \"scm\" , \"debug\" , \"extensions\" ], \"default\" : \"explorer\" , \"description\" : \"Window configuration: View to show always when a window opens\" , \"scope\" : \"window\" }, \"conf.resource.insertEmptyLastLine\" : { \"type\" : \"object\" , \"default\" : {}, \"description\" : \"Resource configurtion: Configure files using glob patterns to have an empty last line always\" , \"scope\" : \"resource\" } } } ] }","title":"Settings Configuration"},{"location":"Adopting-Multi-Root-Workspace-APIs/#settings-api","text":"The configuration example above defines a setting scoped to a resource. To fetch its value you use the workspace.getConfiguration() API and pass the URI of the resource as second parameter. You can see Example 3 how the setting is used in the basic-multi-root sample. Under the hood, resource settings are resolved with a simple logic: We try to find a WorkspaceFolder for the resource that is passed into the getConfiguration API. If such a folder exists and that folder defines the setting, it will be returned. Otherwise the normal logic applies for finding the setting on a parent level: it could be defined within the workspace file or on the user level. Note: You do not have to be aware if the user has opened a workspace or not when using the getConfiguration API with resource scope. Just make sure to always pass the resource scope URI around and we will do the resolution of the setting based on the user's setup.","title":"Settings API"},{"location":"Adopting-Multi-Root-Workspace-APIs/#perspectives","text":"An extension author, you should have following two perspectives while defining a setting End User: Given a setting, an end user should know where he/she can customise this setting. By defining a setting as resource or window scoped, user can be able customise it at right targets. It means, User can open settings and can customise a window ( window.zoomLevel ) or resource ( editor.wordWrap ) setting in User/Workspace Settings. But when user lands into Folder Settings, user can only customise resource settings ( editor.wordWrap ). VS Code will use the setting's classification information to provide right proposals in intelli-sense and will warn user if customising window settings in Folder settings. Extension author: Extension author's main purpose is to define a setting and read its value and apply it. As mentioned before now, there is a new target Folder Settings where a resource scoped setting can only be customisable. So extension author should be knowing if a setting is associated to a resource or not and thereby, classify the setting. If it is a resource setting, ask for the value of the setting by passing the resource for which the value has to be applied. Otherwise you can just ask for the value without passing any resource. API will give you back the value user customised for this setting.","title":"Perspectives"},{"location":"Adopting-Multi-Root-Workspace-APIs/#run-time-diagnostics","text":"While extension development, we provide some run time assistance by logging warnings when we detect the extension is accessing configuration not in an expected way. Following are the diagnostics we show and actions to be taken when you see them. [ext.name]: Accessing a resource scoped configuration without providing a resource is not expected. To get the effective value for '${key}', provide the URI of a resource or 'null' for any resource. It is suggested to pass in a resource when you are accessing a resource scoped configuration. In case of getting the value for any resource, pass null for resource. [ext.name]: Accessing a window scoped configuration for a resource is not expected. To associate '${key}' to a resource, define its scope to 'resource' in configuration contributions in 'package.json'. If they are not resource scoped settings, you do not need to pass in a resource while accessing the setting. If they are resource scoped settings, you have to define them as Resource scoped while registering in the package.json Refer to Configuration Sample extension for more information.","title":"Run time Diagnostics"},{"location":"Adopting-Multi-Root-Workspace-APIs/#language-client-language-server","text":"Since language servers usually act on a workspace they are also affected by the introduction of multi-root workspaces. A language server extension needs to check for the following items and adopt its code accordingly: if the server accesses the rootPath or rootURI property of the InitializeParams passed in the initialize request then the language server must instead use the property workspaceFolders . Since workspace folders can come and go dynamically the server also need to register for workspace/didChangeWorkspaceFolders notifications. The documentation can be found here . if the server is using configuration settings the author also has to review the scope of the settings (see the Settings section above). For a language server 'resource' scope is typically preferred, since it enables a user to configure that language settings on a per folder basis. In addition, the server has to change the way settings are accessed (see the Language Settings section below).","title":"Language Client / Language Server"},{"location":"Adopting-Multi-Root-Workspace-APIs/#single-language-server-or-server-per-folder","text":"The first decision the author of a language server must make is whether a single server can handle all the folders in a multi-root folder setup or whether you want to run a server per root folder. Using a single server is the recommended way. Sharing a single server is more resource friendly than running multiple servers. Language servers that operate on a single file like a CSS or JSON file or linters that validate a single file at a time can easily handle multiple folders. We have already migrated the HTML, JSON, CSS language servers and the 'eslint' and 'tslint' Language servers. We have implemented them all as a single language server. The lsp-sample example demonstrates the use of the new protocol workspace folder and configuration protocol. We recommend that you also review the corresponding extensions when migrating your server. Language servers that operate on multiple files with interdependencies can be different and you need to evaluate whether you want to start a server per workspace folder to isolate folders from each other. We have migrated the TypeScript/JavaScript language server and we were able to use a single server for multiple folders. We added support to this to the vscode-languageclient library and the lsp-multi-server-sample example demonstrates the use of a server per folder.","title":"Single language server or server per folder?"},{"location":"Adopting-Multi-Root-Workspace-APIs/#language-settings","text":"In the current version of the language server protocol the client pushes settings to the server. With the introduction of a resource scope this is not possible anymore since the actual settings values can depend on a resource. We introduce protocol which allow servers to fetch settings from a client comparable to the getConfiguration API in the extension host. The protocol addition is documented here . The bundled CSS or HTML language extensions illustrate this approach. A setting that supports file paths relative to a workspace needs special treatment. In the single folder case the language server process is started in the root folder of the workspace. A relative path can then be resolved easily since the server's home directory corresponds to the workspace root. In the multi-root folder setup this is no longer the case and when the setting is defined as a resource scoped setting, then the path needs to be resolved per root folder. One approach that has worked well for us, is to resolve the relative file path of a setting on the client using the new settings API. In this way the server only sees absolute paths. An example for this can be found in vscode-tslint . It uses the vscode-languageclient middleware to transform the relative file paths.","title":"Language settings"},{"location":"Adopting-Multi-Root-Workspace-APIs/#samples","text":"Sample|Description ------|-----------| Basic multi root |Illustrates the WorkspaceFolder API and how to work with a resource scoped configuration setting.| Language Server Settings |Demonstrates how to handle configuration settings in a language server.| Multi Language Server |Starts a language server for each root folder in a workspace.|","title":"Samples"},{"location":"Adopting-Multi-Root-Workspace-APIs/#writing-tests","text":"Today we do not provide any extension API to add or remove workspace folders. However, you are free to run your extension tests against a code-workspace.json file that can contain any number of workspace folders. Modifying this file programmatically will cause the workspace to change, however you have to account for the changes to the file bubbling through to VS Code for the update to happen (this can take up to a second). To start your extension tests on a workspace, open the launch.json and add the path to the file to the args property: { \"name\" : \"Launch Extension\" , \"type\" : \"extensionHost\" , \"request\" : \"launch\" , \"runtimeExecutable\" : \"${execPath}\" , \"args\" : [ \"${workspaceRoot}/test/test.code-workspace\" , \"--extensionDevelopmentPath=${workspaceRoot}\" ], \"stopOnEntry\" : false , \"sourceMaps\" : true , \"outFiles\" : [ \"${workspaceRoot}/out/src/**/*.js\" ], \"preLaunchTask\" : \"npm\" }","title":"Writing Tests"},{"location":"Build-Master/","text":"This page describes the Build Master role. This is a weekly rotating role. Daily Goals Make sure an Insider build is released daily Make sure the Continuous Build is green Process Given build failures, make sure to pay attention to the #build Slack channel . It should notify who's likely responsible. When there are hygiene or compilation errors , push a commit that fixes them and ping the responsible dev. If the fix isn't trivial, bring in the related developer to come up with a fix. When there are test failures , comment out the test and create an issue for the test owner to fix. The same process applies even if the test is flaky. The rule is: a flaky test is as good as a failing test . When there are code signing errors , retrigger builds. If the errors persist, file an issue to ESRP . Else: Try to reason about the failure, get familiar with the build infrastructure and attempt to fix it. Reach out to the previous week's Build Master, they might know something. Reach out to Jo\u00e3o. Improve the Build Master process by documenting whatever he tells you. FAQ Why do we have two builds? The Continuous Build is a public , lightweight build which runs on every commit and PR and has access to no credentials. It exists to make sure our code base is clean, compilable and tests are happy on branches and pull requests. The Product Build is a private , heavyweight build which runs daily to produce Insiders, so it has access to credentials. It exists to create all VS Code distributable assets and place them on our builds page . Note: it's important that it never runs on PRs of external forks of VS Code. How do the builds run? All our builds run in Azure DevOps and are scripted using YAML build definition files: Product Build : https://github.com/microsoft/vscode/blob/master/build/azure-pipelines/product-build.yml Continuous Build : https://github.com/microsoft/vscode/blob/master/azure-pipelines.yml","title":"Build Master"},{"location":"Build-Master/#daily-goals","text":"Make sure an Insider build is released daily Make sure the Continuous Build is green","title":"Daily Goals"},{"location":"Build-Master/#process","text":"Given build failures, make sure to pay attention to the #build Slack channel . It should notify who's likely responsible. When there are hygiene or compilation errors , push a commit that fixes them and ping the responsible dev. If the fix isn't trivial, bring in the related developer to come up with a fix. When there are test failures , comment out the test and create an issue for the test owner to fix. The same process applies even if the test is flaky. The rule is: a flaky test is as good as a failing test . When there are code signing errors , retrigger builds. If the errors persist, file an issue to ESRP . Else: Try to reason about the failure, get familiar with the build infrastructure and attempt to fix it. Reach out to the previous week's Build Master, they might know something. Reach out to Jo\u00e3o. Improve the Build Master process by documenting whatever he tells you.","title":"Process"},{"location":"Build-Master/#faq","text":"","title":"FAQ"},{"location":"Build-Master/#why-do-we-have-two-builds","text":"The Continuous Build is a public , lightweight build which runs on every commit and PR and has access to no credentials. It exists to make sure our code base is clean, compilable and tests are happy on branches and pull requests. The Product Build is a private , heavyweight build which runs daily to produce Insiders, so it has access to credentials. It exists to create all VS Code distributable assets and place them on our builds page . Note: it's important that it never runs on PRs of external forks of VS Code.","title":"Why do we have two builds?"},{"location":"Build-Master/#how-do-the-builds-run","text":"All our builds run in Azure DevOps and are scripted using YAML build definition files: Product Build : https://github.com/microsoft/vscode/blob/master/build/azure-pipelines/product-build.yml Continuous Build : https://github.com/microsoft/vscode/blob/master/azure-pipelines.yml","title":"How do the builds run?"},{"location":"Code-Editor-Roadmap/","text":"Cursor issue #11150 : Changing multiple occurrences when they are adjacent loses one of the occurrences move actions that don't need a view model out of the editor core: deleteAllRight ( @alex ) Indenting/Outdenting issue #9409 : Outdent issue with Typescript issue #15598 : Multi-line indents do not preserve partial indents issue ##2272 : Automatically indent \"end\" for ruby code Find widget issue #15579 : Regex search issue seed search string only if the selection is created explicitly (i.e. not due to a find match) Widget size/position Make it resizeable: #2657 , #2220 Bug, Replace Box in Current File Truncated #5861 Cover search result: #5525 Multiline search #15727 , #9051 , #10588 Find in selection Closing the find widget via x does not clear find in selection toggle #15959 Find selected or Find in selection #8843 #24887 Toggle Find in selection option automatically when there is selection in editor, #15148 , #17560 Persist search settings #6158 Feature requests Introduce an universal newline character like \\R Support Multicursor Find all Replace with new line Ignore comments in search DVORAK on mac multiple keybindings issues, involves Chromium implementing a very poor w3c recommendation multicursor issue #16486 : Deselect one of multi-cursors","title":"Code Editor Roadmap"},{"location":"Code-Editor-Roadmap/#cursor","text":"issue #11150 : Changing multiple occurrences when they are adjacent loses one of the occurrences move actions that don't need a view model out of the editor core: deleteAllRight ( @alex )","title":"Cursor"},{"location":"Code-Editor-Roadmap/#indentingoutdenting","text":"issue #9409 : Outdent issue with Typescript issue #15598 : Multi-line indents do not preserve partial indents issue ##2272 : Automatically indent \"end\" for ruby code","title":"Indenting/Outdenting"},{"location":"Code-Editor-Roadmap/#find-widget","text":"issue #15579 : Regex search issue seed search string only if the selection is created explicitly (i.e. not due to a find match) Widget size/position Make it resizeable: #2657 , #2220 Bug, Replace Box in Current File Truncated #5861 Cover search result: #5525 Multiline search #15727 , #9051 , #10588 Find in selection Closing the find widget via x does not clear find in selection toggle #15959 Find selected or Find in selection #8843 #24887 Toggle Find in selection option automatically when there is selection in editor, #15148 , #17560 Persist search settings #6158 Feature requests Introduce an universal newline character like \\R Support Multicursor Find all Replace with new line Ignore comments in search","title":"Find widget"},{"location":"Code-Editor-Roadmap/#dvorak-on-mac","text":"multiple keybindings issues, involves Chromium implementing a very poor w3c recommendation","title":"DVORAK on mac"},{"location":"Code-Editor-Roadmap/#multicursor","text":"issue #16486 : Deselect one of multi-cursors","title":"multicursor"},{"location":"Coding-Guidelines/","text":"Git We prefer a rebase workflow and occasional feature branches . Most work happens directly on the master branch. For that reason, we recommend setting the pull.rebase setting to merges . git config --global pull.rebase merges Indentation We use tabs, not spaces. Names Use PascalCase for type names Use PascalCase for enum values Use camelCase for function and method names Use camelCase for property names and local variables Use whole words in names when possible Types Do not export types or functions unless you need to share it across multiple components Do not introduce new types or values to the global namespace Comments Use JSDoc style comments for functions , interfaces , enums , and classes Strings Use \"double quotes\" for strings shown to the user that need to be externalized (localized) Use 'single quotes' otherwise All strings visible to the user need to be externalized Style Use arrow functions => over anonymous function expressions Only surround arrow function parameters when necessary. For example, (x) => x + x is wrong but the following are correct: x => x + x ( x , y ) => x + y < T > ( x : T , y : T ) => x === y Always surround loop and conditional bodies with curly braces Open curly braces always go on the same line as whatever necessitates them Parenthesized constructs should have no surrounding whitespace. A single space follows commas, colons, and semicolons in those constructs. For example: for ( var i = 0 , n = str . length ; i < 10 ; i ++ ) { } if ( x < 10 ) { } function f ( x : number , y : string ) : void { }","title":"Coding Guidelines"},{"location":"Coding-Guidelines/#git","text":"We prefer a rebase workflow and occasional feature branches . Most work happens directly on the master branch. For that reason, we recommend setting the pull.rebase setting to merges . git config --global pull.rebase merges","title":"Git"},{"location":"Coding-Guidelines/#indentation","text":"We use tabs, not spaces.","title":"Indentation"},{"location":"Coding-Guidelines/#names","text":"Use PascalCase for type names Use PascalCase for enum values Use camelCase for function and method names Use camelCase for property names and local variables Use whole words in names when possible","title":"Names"},{"location":"Coding-Guidelines/#types","text":"Do not export types or functions unless you need to share it across multiple components Do not introduce new types or values to the global namespace","title":"Types"},{"location":"Coding-Guidelines/#comments","text":"Use JSDoc style comments for functions , interfaces , enums , and classes","title":"Comments"},{"location":"Coding-Guidelines/#strings","text":"Use \"double quotes\" for strings shown to the user that need to be externalized (localized) Use 'single quotes' otherwise All strings visible to the user need to be externalized","title":"Strings"},{"location":"Coding-Guidelines/#style","text":"Use arrow functions => over anonymous function expressions Only surround arrow function parameters when necessary. For example, (x) => x + x is wrong but the following are correct: x => x + x ( x , y ) => x + y < T > ( x : T , y : T ) => x === y Always surround loop and conditional bodies with curly braces Open curly braces always go on the same line as whatever necessitates them Parenthesized constructs should have no surrounding whitespace. A single space follows commas, colons, and semicolons in those constructs. For example: for ( var i = 0 , n = str . length ; i < 10 ; i ++ ) { } if ( x < 10 ) { } function f ( x : number , y : string ) : void { }","title":"Style"},{"location":"Color-customization-color-id-changes/","text":"If you have used the experimental setting workspace.experimental.colorCustomization , use the following table to map the ids to the new format: Experimental Id New Id activeTabActiveGroupForeground tab.activeForeground activeTabBackground tab.activeBackground activeTabInactiveGroupForeground No longer available activityBadgeBackground activityBarBadge.background activityBadgeForeground activityBarBadge.foreground activityBarBackground activityBar.background activityBarDragAndDropBackground activityBar.dropBackground debugExceptionWidgetBackground debugExceptionWidget.background debugExceptionWidgetBorder debugExceptionWidget.border debugToolBarBackground debugToolBar.background dropdownBackground dropdown.background dropdownBorder dropdown.border dropdownForeground dropdown.foreground editorActiveLinkForeground editorLink.activeForeground editorBackground editor.background editorCursor editorCursor.foreground editorDragAndDropBackground editorGroup.dropBackground editorFindMatch editor.findMatchBackground editorFindMatchHighlight editor.findMatchHighlightBackground editorFindRangeHighlight editor.findRangeHighlightBackground editorFindWidgetBackground editorWidget.background editorForeground editor.foreground editorGroupBackground editorGroup.background editorGroupBorder editorGroup.border editorHeaderBackground editorGroupHeader.noTabsBackground editorHoverBackground editorHoverWidget.background editorHoverBorder editorHoverWidget.border editorHoverHighlight editor.hoverHighlightBackground editorInactiveSelection editor.inactiveSelectionBackground editorIndentGuides editorIndentGuide.background editorLineHighlight editor.lineHighlightBackground editorLineHighlightBorder editor.lineHighlightBorder editorLineNumbers editorLineNumber.foreground editorLinkForeground No longer supported editorMarkerNavigationBackground editorMarkerNavigation.background editorMarkerNavigationError editorMarkerNavigationError.background editorMarkerNavigationWarning editorMarkerNavigationWarning.background editorRangeHighlight editor.rangeHighlightBackground editorSelection editor.selectionBackground editorSelectionHighlight editor.selectionHighlightBackground editorSideBySideBorder No longer supported editorWhitespaces editorWhitespace.foreground editorWordHighlight editor.wordHighlightBackground editorWordHighlightStrong editor.wordHighlightStrongBackground focusedElementOutline focusBorder foreground foreground highContrastBorder contrastBorder highContrastOutline contrastActiveBorder inactiveTabActiveGroupForeground tab.inactiveForeground inactiveTabBackground tab.inactiveBackground inactiveTabInactiveGroupForeground No longer supported inputBoxActiveOptionBorder inputOption.activeBorder inputBoxBackground input.background inputBoxBorder input.border inputBoxForeground input.foreground panelActiveTitleBorder panelTitle.activeBorder panelActiveTitleForeground panelTitle.activeForeground panelBackground panel.background panelInactiveTitleForeground panelTitle.inactiveForeground panelTopBorder panel.border peekViewBorder peekView.border peekViewEditorBackground peekViewEditor.background peekViewEditorMatchHighlight peekViewEditor.matchHighlightBackground peekViewResultsBackground peekViewResult.background peekViewResultsFileForeground peekViewResult.fileForeground peekViewResultsMatchForeground peekViewResult.lineForeground peekViewResultsMatchHighlight peekViewResult.matchHighlightBackground peekViewResultsSelectionBackground peekViewResult.selectionBackground peekViewResultsSelectionForeground peekViewResult.selectionForeground peekViewTitle peekViewTitleLabel.foreground peekViewTitleBackground peekViewTitle.background peekViewTitleInfo peekViewTitleDescription.foreground sideBarBackground sideBar.background sideBarTitleForeground sideBarTitle.foreground statusBarBackground statusBar.background statusBarDebuggingBackground statusBar.debuggingBackground statusBarForeground statusBar.foreground statusBarInfoItemBackground statusBarItem.prominentBackground statusBarInfoItemHoverBackground statusBarItem.prominentHoverBackground statusBarItemActiveBackground statusBarItem.activeBackground statusBarItemHoverBackground statusBarItem.hoverBackground statusBarNoFolderBackground statusBar.noFolderBackground tabBorder tab.border tabsContainerBackground editorGroupHeader.tabsBackground terminalAnsiBlack terminal.ansiBlack terminalAnsiBlue terminal.ansiBlue terminalAnsiBrightBlack terminal.ansiBrightBlack terminalAnsiBrightBlue terminal.ansiBrightBlue terminalAnsiBrightCyan terminal.ansiBrightCyan terminalAnsiBrightGreen terminal.ansiBrightGreen terminalAnsiBrightMagenta terminal.ansiBrightMagenta terminalAnsiBrightRed terminal.ansiBrightRed terminalAnsiBrightWhite terminal.ansiBrightWhite terminalAnsiBrightYellow terminal.ansiBrightYellow terminalAnsiCyan terminal.ansiCyan terminalAnsiGreen terminal.ansiGreen terminalAnsiMagenta terminal.ansiMagenta terminalAnsiRed terminal.ansiRed terminalAnsiWhite terminal.ansiWhite terminalAnsiYellow terminal.ansiYellow titleBarActiveBackground titleBar.activeBackground titleBarActiveForeground titleBar.activeForeground titleBarInactiveBackground titleBar.inactiveBackground titleBarInactiveForeground titleBar.inactiveForeground","title":"Color customization color id changes"},{"location":"Community-Issue-Tracking/","text":"Welcome, and thank you for your interest in contributing to VS Code! We have started to involve the most active members of the community in our issue tracking to better load-balance the work and allow for quicker feedback on new issues. The following are the guidelines and extra powers for our community trackers: Check our \"inbox\" for new issues and see if any can be helped with: - If it needs more information, mark it as such with /needsMoreInfo and maybe explain what is missing: - Does it reproduce with all extensions disabled ( --disable-extensions or Reload Window With Extensions Disabled )? - For performance issues ask them to follow https://github.com/Microsoft/vscode/wiki/Performance-Issues . - For native crashes ask them to follow https://github.com/Microsoft/vscode/wiki/Native-Crash-Issues . - For non-English reports, ask them to describe the issue in English and suggest a machine translator. - If it is a duplicate of an existing issue, mark it as such with /duplicate #12345 . - Optionally let the bot search for duplicates (if it hasn't done so already) with /findDuplicates . - If it is an issue with an extension from the Marketplace (i.e., not a built-in one), use /causedByExtension and optionally point the user to the repository where they can file the issue for the extension. - If it is a bug you can reproduce, /confirm it and add any additional info that might help the dev team reproduce it. - If it is a bug you cannot reproduce, use /confirmationPending to label it and add any info that might help the author clarify the steps to reproduce. - If it is a question that is better asked on StackOverflow, use /question to label and close it as such.","title":"Community Issue Tracking"},{"location":"Contributor-License-Agreement/","text":"You must sign a Contribution License Agreement (CLA) before your PR will be merged. This a one-time requirement for Microsoft projects in GitHub. You can read more about Contribution License Agreements (CLA) on Wikipedia. However, you don't have to do this up-front. You can simply clone, fork, and submit your pull-request as usual. When your pull-request is created, it is classified by a CLA bot. If the change is trivial (i.e. you just fixed a typo) then the PR is labelled with cla-not-required . Otherwise, it's classified as cla-required . In that case, the system will also tell you how you can sign the CLA. Once you have signed a CLA, the current and all future pull-requests will be labelled as cla-signed . Signing the CLA might sound scary but it's actually very simple and can be done in less than a minute.","title":"Contributor License Agreement"},{"location":"Cross-Compiling-for-Debian-Based-Linux/","text":"To build for a target architecture different than the host (e.g. using x64 to build for ARM), you'll need to do the following, in addition to the setup under How to Contribute : One-Time Setup Install build toolchain and chroot/rootfs prerequisites: sudo apt-get install qemu qemu-user-static debootstrap gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf Create a chroot/rootfs for the target architecture: sudo qemu-debootstrap --arch = armhf --variant = minbase xenial rootfs Install libx11-dev on the chroot/rootfs: sudo chroot rootfs apt-get install -y libx11-dev Build Because cross-compiling isn't officially supported by the VSCode team, some workarounds are required to make the app build correctly: Point to the target toolchain on the build host: export CC = $( which arm-linux-gnueabihf-gcc ) export CXX = \" $( which arm-linux-gnueabihf-g++ ) -L $( pwd ) /rootfs/usr/lib/arm-linux-gnueabihf/\" note the -L linker argument pointing to the absolute path of libx11 on the chroot/rootfs Tell yarn you want to cross-compile native modules for ARM: export npm_config_arch = arm Build VSCode and create a .deb file (for easier installation on the target device) as usual: yarn yarn run gulp vscode-linux-arm-min yarn run gulp vscode-linux-arm-build-deb","title":"Cross Compiling for Debian Based Linux"},{"location":"December-Pre-Release/","text":"A pre-release of the December update is now available on the so called insiders channel (see below). We love getting feedback on the pre-release and you can help us in many ways: - test new features as described in the [[December Test Plan]]. - verify the bugs you have filed and that are targeting the December milestone bug fixes . Reporting Issues When reporting issues please mention in the comment that you found the issue in the insiders release and follow our reporting issues guidelines [[Submitting-Bugs-and-Suggestions]]. Since we are also testing the same release, please do a duplicate search and comment on the existing issue before creating a new one. Getting the update Notice the release notes are not up to date yet, to find out about new features check the December plan or the [[December Test Plan]]. The updated version of Code is 0.10.4, once updated you will see this in the Help | About or Code | About Visual Studio Code dialog. Getting the update for Windows and Mac OS X Follow these steps . Getting the update on Linux On Linux you must manually update (no support for auto-update): Download Code from this location Linux 64 , Linux 32 . Open the Zip and run Code. Code will require a manual update each time we release. Reverting back to the most recent stable version To revert to the standard build, reverse the updates you made to your storage.json i.e. back to stable from insiders. At that point you will receive the 0.10.3 update again. If all else fails, uninstall the Update and re-install from http://code.visualstudio.com .","title":"December Pre Release"},{"location":"December-Pre-Release/#reporting-issues","text":"When reporting issues please mention in the comment that you found the issue in the insiders release and follow our reporting issues guidelines [[Submitting-Bugs-and-Suggestions]]. Since we are also testing the same release, please do a duplicate search and comment on the existing issue before creating a new one.","title":"Reporting Issues"},{"location":"December-Pre-Release/#getting-the-update","text":"Notice the release notes are not up to date yet, to find out about new features check the December plan or the [[December Test Plan]]. The updated version of Code is 0.10.4, once updated you will see this in the Help | About or Code | About Visual Studio Code dialog.","title":"Getting the update"},{"location":"December-Pre-Release/#getting-the-update-for-windows-and-mac-os-x","text":"Follow these steps .","title":"Getting the update for Windows and Mac OS X"},{"location":"December-Pre-Release/#getting-the-update-on-linux","text":"On Linux you must manually update (no support for auto-update): Download Code from this location Linux 64 , Linux 32 . Open the Zip and run Code. Code will require a manual update each time we release.","title":"Getting the update on Linux"},{"location":"December-Pre-Release/#reverting-back-to-the-most-recent-stable-version","text":"To revert to the standard build, reverse the updates you made to your storage.json i.e. back to stable from insiders. At that point you will receive the 0.10.3 update again. If all else fails, uninstall the Update and re-install from http://code.visualstudio.com .","title":"Reverting back to the most recent stable version"},{"location":"December-Test-Plan/","text":"The test plan for the December iteration plan December Iteration Plan . Debug - long text wraps in repl win @alexandrudima mac @jrieken Verify that long text now nicely wraps across multiple lines in the debug repl both for evaluation requests and for output text. Debug - breakpoint state mac @jrieken linux @aeschli We have changed breakpoints states and now show it differently in the UI. Verify: * new UI properly and intuitivly reflects if breakpoints are enabled, disabled, verified or deactivated. * breakpoints get hit / not hit depending on their enablement state Debug - extension debugging win @dbaeumer linux @aeschli Extension debugging is now using a new strategy to attach the debugger to the extension * verify you can debug your extension as before * verify you can restart debugging from the debugger side and the debugger reconnects properly * verify you can change folders or refresh on the extension development side and the debugger reconnects * verify closing the extension development side stops debugging * verify stopping the session from the debugger closes the extension development window Update - channel from settings win @egamma mac @joaomoreno Verify you can change the update channel from settings. View - persisted zoom settings win @dbaeumer mac | linux @weinand Verify you can change and persist the zoom factor for windows. * negative and positive values work * the zoom actions are still working as before but do not persist * the change is live Quick open - Path and Fuzzy matching win @aeschli mac | linux @isidorn Unless you include a path character in your query or enabled fuzzy matching, quick open for files should work as before: * results are sorted properly with most relevant ones to the top * editor history always comes first on top of matching file results * if you narrow down a search, subsequent matching is fast and does not go to the disk (verify with a larger workspace) Verify the new support to match on paths if included in search * using the native path separator in the search enables matching on (workspace relative) paths for both editor history results and file matching * more relevant results are still sorted to the top * results are highlighted properly also in their path segment Verify the new support for fuzzy file matching * find and enable the new setting to enable fuzzy matching for quick open. this will only enable fuzzy matching for file search, it should not have any impact to other quick open providers, nor the editor history search * verify results from file searches match on the entire (workspace relative) path of the file without having to use the native path separator * verify matching happens in substrings of the path, not requiring the characters to be in sequence (e.g. \"fr\" would match \" f**oo_ba**r \") * more relevant results are sorted to the top Extensions info in status bar #1123 win @bpasero mac @egamma (blocked by #1256) linux @SofianHn Verify that the extensions status shows up in the status bar if you have extension errors. Verify clicking on the status bar shows all the error / warning messages to the user and that you can uninstall the extension via action in message. Emmet support in JSX and TSX files win | mac | linux @joaomoreno In both .tsx and jsx files the following snippet .foo>input[name=\"bob\"]+label[for=\"bob\"] Should expand to < div className = \"foo\" > \\n\\t < input type = \"text\" name = \"bob\" /> \\n\\t < label htmlFor = \"bob\" ></ label > \\n </ div > ES6 by default win @dbaeumer linux | mac @joaomoreno Make sure that ES6 is supported without the need to configure something. Test: * JS code inside html supports ES6, like let , const , and class C {} * Have no jsconfig file and make sure ES6 is supported * create a new jsconfig.json and make sure the default is ES6 for the target property Language Server win | mac | linux @jrieken The language client / server libraries now support the complete set of language features available in the extension host. Implement a sample language server with more features by taking https://github.com/Microsoft/vscode-languageserver-node-example as a starting point. Focus on the new support for CodeActions, CodeLens, Formatting and rename. vscode-tslint win | mac | linux @bpasero added support for a configFile config setting, see the README.md (known limitations captured in Microsoft/vscode-tslint#16) schema support for the tslint.json configuration file line/page scrolling win @aeschli mac @isidorn linux @aeschli not platform specific win/linux: Ctrl + Up , Ctrl + Down , Ctrl + PageUp , Ctrl + PageDown mac: Ctrl + PageUp , Ctrl + PageDown , Cmd + PageUp , Cmd + PageDown should now scroll the viewport by a line or a page. select current line win | mac | linux @isidorn not platform specific win/linux: Ctrl + I mac: Cmd + I should expand selection to the current line and, if pressed multiple times, to the following lines. please check that it works on long lines where word wrapping kicks in or when using wrappingColumn: 0 . numpad keys win @bpasero mac @bpasero linux @bpasero is platform specific please check that you can add and trigger keybinding rules with the following keys: numpad0 numpad1 numpad2 numpad3 numpad4 numpad5 numpad6 numpad7 numpad8 numpad9 numpad_multiply numpad_add numpad_subtract numpad_decimal numpad_divide find widget improvements win | mac | linux @weinand linux @aeschli not platform specific Ctrl + H (mac: Cmd + Alt + F ) now always focuses the replace field in the find widget. Ctrl + F (mac: Cmd + F ) now always focuses the find field in the find widget. when focus is in the find field or the replace field in the find widget, Ctrl + Down (mac: Cmd + Down ) will focus the editor. Alt + C (mac: Cmd + Alt + C ) now toggles case sensitive. This should work also when the find widget is hidden and should reflect in the selection highlight. Alt + W (mac: Cmd + Alt + W ) now toggles match whole words. This should work also when the find widget is hidden and should reflect in the selection highlight. Alt + R (mac: Cmd + Alt + R ) now toggles match regex. This should work also when the find widget is hidden and should reflect in the selection highlight. extension deactivate() win @dbaeumer mac @joaomoreno linux @aeschli is platform specific the extension host now calls deactivate() and dispose() on subscriptions pushed in the activate() ctx please try to author an extension that: when activated, forks/spawns a process the forked/spawned process logs to a file if it is alive (with a timestamp) on deactivate() or through a subscription pushed in the activate() ctx, the extension sends the forked/spawned process a graceful shutdown request the forked/spawned process listens to this graceful shutdown request and gracefully shuts down verify that when closing VSCode the forked/spawned process shuts down gracefully. keybindings with non-US standard kb layout win | mac | linux @bpasero (maybe someone else needs to try, I am running into: Keyboard: Widget not showing correct values #1275) is platform specific please see #713 for a detailed explanation TL;DR . We now have a widget to help with authoring keyboard rules and we now render UI labels taking the keyboard layout under consideration. Setup : please change to a keyboard layout different than US standard. Preferably, this is the keyboard layout that your physical keyboard has. The widget: it only shows when authoring the keybindings.json file it is invokable via Ctrl + K Ctrl + K (mac: Cmd + K Cmd + K ) it is invokable via clicking on the \"Define Keybinding\" launcher it shows an input box that reflects what VSCode sees when you press keys it does not help with defining chords or seeing conflicts, etc, its intent is to help with different kb layouts. no keybindings are triggered while you try keybindings Escape or focus loss dismisses it Enter accepts it The UI labels: easiest to see them in the F1 list the keyboard layout is taken into account only once and then cached, so if you change keyboard layouts, you need to reload the window the idea is that the keys VK_OEM_1 , ... etc are looked up and checked what they would produce if typed under the current system keyboard layout. the labels then render with the produced character. e.g. Split Editor shows under German (Switzerland) as Ctrl + \u00e4 because you trigger it by pressing the keys Ctrl and the key that would produce \u00e4 . dead characters: Sometimes, under some kb layouts, some keys don't produce anything and act more like composing (accents). To be able to render something, we display in the UI label the value or the shiftedValue of those keys. Suggest widget #1006 #1079 win @bpasero mac @egamma The Suggest widget underwent quite some heavy rework behind the scenes. Make sure everything still works as before. Scoped git services #718 mac @isidorn linux @weinand You should now be able to open a folder inside a git repo and still have the git features enabled. Git sync & publish action #908 win @dbaeumer mac @egamma linux @weinand The sync action is back in the status bar: If you check out to a branch that doesn't have an upstream link, we assume it is unpublished . The following UI should show up. Clicking it will publish the branch. If you are in a repository without a remote configured, none of the previous actions should show up: ES6 JavaScript grammar any platform @joaomoreno We're using a modified TypeScript grammar for JavaScript tokenization * Have a look at some JavaScript files, including ES6, make sure they look fine * Test the default light and dark theme as well as some contributed themes * Verify all duplicates of #133 JSON schema configuration any platform @dbaeumer The built-in schemas have been removed. They are now offered by the extensions. The schemas are now loaded directly from the schema server. That way they are more up-to-date, but might lack descriptions * Check hover and intellisense support for package.json, project.json, bower.json * Test tsconfig.json, global.json and jsconfig.json * Test that associating patterns to schema still can be done in the settings * Test that you can configure a schema from a extension. Test an extension from a server or from a file in the extension (see #489, last comment for configuration instructions) Dark and light theme polish any platform @isidorn Due to the move to textmate tokenizer, there were changes in the appearance of the default light and dark theme: Some themes got far more colorful, in particular JavaScript, some languages lost colors, e.g. Jade and XML. The goal was to stay as close as possible to what we had in 0.9.0: We stick to a few major colors: blue for keywords, green for comments and red for strings. * Test JavaScript and TypeScript in the light and dark theme, compare it our old state at https://opentools.azurewebsites.net/try . Note, new colors for method, function and parameters declarations * Test XML, HTML, Jade, Razor, Handlebars, CSS, LESS and SASS, JSON in the light and dark theme: They should all look consistent. Check stings, comments... * Try some of the other languages as well. Check stings, comments...","title":"December Test Plan"},{"location":"December-Test-Plan/#debug-long-text-wraps-in-repl","text":"win @alexandrudima mac @jrieken Verify that long text now nicely wraps across multiple lines in the debug repl both for evaluation requests and for output text.","title":"Debug - long text wraps in repl"},{"location":"December-Test-Plan/#debug-breakpoint-state","text":"mac @jrieken linux @aeschli We have changed breakpoints states and now show it differently in the UI. Verify: * new UI properly and intuitivly reflects if breakpoints are enabled, disabled, verified or deactivated. * breakpoints get hit / not hit depending on their enablement state","title":"Debug - breakpoint state"},{"location":"December-Test-Plan/#debug-extension-debugging","text":"win @dbaeumer linux @aeschli Extension debugging is now using a new strategy to attach the debugger to the extension * verify you can debug your extension as before * verify you can restart debugging from the debugger side and the debugger reconnects properly * verify you can change folders or refresh on the extension development side and the debugger reconnects * verify closing the extension development side stops debugging * verify stopping the session from the debugger closes the extension development window","title":"Debug - extension debugging"},{"location":"December-Test-Plan/#update-channel-from-settings","text":"win @egamma mac @joaomoreno Verify you can change the update channel from settings.","title":"Update - channel from settings"},{"location":"December-Test-Plan/#view-persisted-zoom-settings","text":"win @dbaeumer mac | linux @weinand Verify you can change and persist the zoom factor for windows. * negative and positive values work * the zoom actions are still working as before but do not persist * the change is live","title":"View - persisted zoom settings"},{"location":"December-Test-Plan/#quick-open-path-and-fuzzy-matching","text":"win @aeschli mac | linux @isidorn Unless you include a path character in your query or enabled fuzzy matching, quick open for files should work as before: * results are sorted properly with most relevant ones to the top * editor history always comes first on top of matching file results * if you narrow down a search, subsequent matching is fast and does not go to the disk (verify with a larger workspace) Verify the new support to match on paths if included in search * using the native path separator in the search enables matching on (workspace relative) paths for both editor history results and file matching * more relevant results are still sorted to the top * results are highlighted properly also in their path segment Verify the new support for fuzzy file matching * find and enable the new setting to enable fuzzy matching for quick open. this will only enable fuzzy matching for file search, it should not have any impact to other quick open providers, nor the editor history search * verify results from file searches match on the entire (workspace relative) path of the file without having to use the native path separator * verify matching happens in substrings of the path, not requiring the characters to be in sequence (e.g. \"fr\" would match \" f**oo_ba**r \") * more relevant results are sorted to the top","title":"Quick open - Path and Fuzzy matching"},{"location":"December-Test-Plan/#extensions-info-in-status-bar-1123","text":"win @bpasero mac @egamma (blocked by #1256) linux @SofianHn Verify that the extensions status shows up in the status bar if you have extension errors. Verify clicking on the status bar shows all the error / warning messages to the user and that you can uninstall the extension via action in message.","title":"Extensions info in status bar #1123"},{"location":"December-Test-Plan/#emmet-support-in-jsx-and-tsx-files","text":"win | mac | linux @joaomoreno In both .tsx and jsx files the following snippet .foo>input[name=\"bob\"]+label[for=\"bob\"] Should expand to < div className = \"foo\" > \\n\\t < input type = \"text\" name = \"bob\" /> \\n\\t < label htmlFor = \"bob\" ></ label > \\n </ div >","title":"Emmet support in JSX and TSX files"},{"location":"December-Test-Plan/#es6-by-default","text":"win @dbaeumer linux | mac @joaomoreno Make sure that ES6 is supported without the need to configure something. Test: * JS code inside html supports ES6, like let , const , and class C {} * Have no jsconfig file and make sure ES6 is supported * create a new jsconfig.json and make sure the default is ES6 for the target property","title":"ES6 by default"},{"location":"December-Test-Plan/#language-server","text":"win | mac | linux @jrieken The language client / server libraries now support the complete set of language features available in the extension host. Implement a sample language server with more features by taking https://github.com/Microsoft/vscode-languageserver-node-example as a starting point. Focus on the new support for CodeActions, CodeLens, Formatting and rename.","title":"Language Server"},{"location":"December-Test-Plan/#vscode-tslint","text":"win | mac | linux @bpasero added support for a configFile config setting, see the README.md (known limitations captured in Microsoft/vscode-tslint#16) schema support for the tslint.json configuration file","title":"vscode-tslint"},{"location":"December-Test-Plan/#linepage-scrolling","text":"win @aeschli mac @isidorn linux @aeschli not platform specific win/linux: Ctrl + Up , Ctrl + Down , Ctrl + PageUp , Ctrl + PageDown mac: Ctrl + PageUp , Ctrl + PageDown , Cmd + PageUp , Cmd + PageDown should now scroll the viewport by a line or a page.","title":"line/page scrolling"},{"location":"December-Test-Plan/#select-current-line","text":"win | mac | linux @isidorn not platform specific win/linux: Ctrl + I mac: Cmd + I should expand selection to the current line and, if pressed multiple times, to the following lines. please check that it works on long lines where word wrapping kicks in or when using wrappingColumn: 0 .","title":"select current line"},{"location":"December-Test-Plan/#numpad-keys","text":"win @bpasero mac @bpasero linux @bpasero is platform specific please check that you can add and trigger keybinding rules with the following keys: numpad0 numpad1 numpad2 numpad3 numpad4 numpad5 numpad6 numpad7 numpad8 numpad9 numpad_multiply numpad_add numpad_subtract numpad_decimal numpad_divide","title":"numpad keys"},{"location":"December-Test-Plan/#find-widget-improvements","text":"win | mac | linux @weinand linux @aeschli not platform specific Ctrl + H (mac: Cmd + Alt + F ) now always focuses the replace field in the find widget. Ctrl + F (mac: Cmd + F ) now always focuses the find field in the find widget. when focus is in the find field or the replace field in the find widget, Ctrl + Down (mac: Cmd + Down ) will focus the editor. Alt + C (mac: Cmd + Alt + C ) now toggles case sensitive. This should work also when the find widget is hidden and should reflect in the selection highlight. Alt + W (mac: Cmd + Alt + W ) now toggles match whole words. This should work also when the find widget is hidden and should reflect in the selection highlight. Alt + R (mac: Cmd + Alt + R ) now toggles match regex. This should work also when the find widget is hidden and should reflect in the selection highlight.","title":"find widget improvements"},{"location":"December-Test-Plan/#extension-deactivate","text":"win @dbaeumer mac @joaomoreno linux @aeschli is platform specific the extension host now calls deactivate() and dispose() on subscriptions pushed in the activate() ctx please try to author an extension that: when activated, forks/spawns a process the forked/spawned process logs to a file if it is alive (with a timestamp) on deactivate() or through a subscription pushed in the activate() ctx, the extension sends the forked/spawned process a graceful shutdown request the forked/spawned process listens to this graceful shutdown request and gracefully shuts down verify that when closing VSCode the forked/spawned process shuts down gracefully.","title":"extension deactivate()"},{"location":"December-Test-Plan/#keybindings-with-non-us-standard-kb-layout","text":"win | mac | linux @bpasero (maybe someone else needs to try, I am running into: Keyboard: Widget not showing correct values #1275) is platform specific please see #713 for a detailed explanation TL;DR . We now have a widget to help with authoring keyboard rules and we now render UI labels taking the keyboard layout under consideration. Setup : please change to a keyboard layout different than US standard. Preferably, this is the keyboard layout that your physical keyboard has. The widget: it only shows when authoring the keybindings.json file it is invokable via Ctrl + K Ctrl + K (mac: Cmd + K Cmd + K ) it is invokable via clicking on the \"Define Keybinding\" launcher it shows an input box that reflects what VSCode sees when you press keys it does not help with defining chords or seeing conflicts, etc, its intent is to help with different kb layouts. no keybindings are triggered while you try keybindings Escape or focus loss dismisses it Enter accepts it The UI labels: easiest to see them in the F1 list the keyboard layout is taken into account only once and then cached, so if you change keyboard layouts, you need to reload the window the idea is that the keys VK_OEM_1 , ... etc are looked up and checked what they would produce if typed under the current system keyboard layout. the labels then render with the produced character. e.g. Split Editor shows under German (Switzerland) as Ctrl + \u00e4 because you trigger it by pressing the keys Ctrl and the key that would produce \u00e4 . dead characters: Sometimes, under some kb layouts, some keys don't produce anything and act more like composing (accents). To be able to render something, we display in the UI label the value or the shiftedValue of those keys.","title":"keybindings with non-US standard kb layout"},{"location":"December-Test-Plan/#suggest-widget-1006-1079","text":"win @bpasero mac @egamma The Suggest widget underwent quite some heavy rework behind the scenes. Make sure everything still works as before.","title":"Suggest widget #1006 #1079"},{"location":"December-Test-Plan/#scoped-git-services-718","text":"mac @isidorn linux @weinand You should now be able to open a folder inside a git repo and still have the git features enabled.","title":"Scoped git services #718"},{"location":"December-Test-Plan/#git-sync-publish-action-908","text":"win @dbaeumer mac @egamma linux @weinand The sync action is back in the status bar: If you check out to a branch that doesn't have an upstream link, we assume it is unpublished . The following UI should show up. Clicking it will publish the branch. If you are in a repository without a remote configured, none of the previous actions should show up:","title":"Git sync &amp; publish action #908"},{"location":"December-Test-Plan/#es6-javascript-grammar","text":"any platform @joaomoreno We're using a modified TypeScript grammar for JavaScript tokenization * Have a look at some JavaScript files, including ES6, make sure they look fine * Test the default light and dark theme as well as some contributed themes * Verify all duplicates of #133","title":"ES6 JavaScript grammar"},{"location":"December-Test-Plan/#json-schema-configuration","text":"any platform @dbaeumer The built-in schemas have been removed. They are now offered by the extensions. The schemas are now loaded directly from the schema server. That way they are more up-to-date, but might lack descriptions * Check hover and intellisense support for package.json, project.json, bower.json * Test tsconfig.json, global.json and jsconfig.json * Test that associating patterns to schema still can be done in the settings * Test that you can configure a schema from a extension. Test an extension from a server or from a file in the extension (see #489, last comment for configuration instructions)","title":"JSON schema configuration"},{"location":"December-Test-Plan/#dark-and-light-theme-polish","text":"any platform @isidorn Due to the move to textmate tokenizer, there were changes in the appearance of the default light and dark theme: Some themes got far more colorful, in particular JavaScript, some languages lost colors, e.g. Jade and XML. The goal was to stay as close as possible to what we had in 0.9.0: We stick to a few major colors: blue for keywords, green for comments and red for strings. * Test JavaScript and TypeScript in the light and dark theme, compare it our old state at https://opentools.azurewebsites.net/try . Note, new colors for method, function and parameters declarations * Test XML, HTML, Jade, Razor, Handlebars, CSS, LESS and SASS, JSON in the light and dark theme: They should all look consistent. Check stings, comments... * Try some of the other languages as well. Check stings, comments...","title":"Dark and light theme polish"},{"location":"Design-Goals/","text":"@cdias Introduction Goals Non Goals","title":"Design Goals"},{"location":"Design-Goals/#introduction","text":"","title":"Introduction"},{"location":"Design-Goals/#goals","text":"","title":"Goals"},{"location":"Design-Goals/#non-goals","text":"","title":"Non Goals"},{"location":"Development-Process/","text":"Roadmap The team has a 6-12 months high level [[Roadmap]] which defines high level themes and features to be addressed in this timeframe. Iterations We will work in monthly iterations on the items on the roadmap. Iterations are roughly month based, rather than week based. We will begin a milestone on a Monday and end on a Friday, meaning that each milestone can have a different duration, depending on how the weeks align. At the end of each iteration, we want to have a version of Visual Studio Code that can be used by the VS Code community. The work planned during an iteration is captured in the iteration plan (see [[Iteration Plans]]). The feature highlights of each iteration are highlighted in the release notes. Planning Before each milestone, we will prioritize features to implement and bugs to fix in the upcoming iteration. Bugs are assigned the milestone for the iteration. For new features, we create new issues and label them with Plan Item . Plan Items include a check list for the Definition of Done . The Bugs, Plan Items, and Feature Requests assigned to a milestone encompasses the planned work for the upcoming month. For each Plan Item, we include the checklist for b Definition of Done Test Plan Item created Keyboard accessible Screen reader accessible Works with the different themes, including the high contrast theme Telemetry events in place Release notes updated Inside an Iteration We work in weekly segments: - Week 1 : Reduce debt introduced in the previous iteration, address critical issues uncovered in the previous iteration, plan the next iteration - Week 2 : Work according to the plan - Week 3+ : Work according to the plan - Final Week : Endgame - the team tests the new features according to a test plan and updates the documentation. - we make a pre-release available on the 'insiders' channel and invite users to help us test the pre-release. - Week 1 (next iteration) : - monitoring the pre-release and fixing critical issues. - publish the release, sometime midweek, after 24 hours with no changes to the pre-release. Triage Bugs and features will be assigned a milestone, and within a milestone, they will be assigned a priority. The priority dictates the order in which issues should be addressed. An important bug (something that we think is critical for the milestone) is to be addressed before the other bugs. To find out when a bug fix will be available in an update, then please check the milestone that is assigned to the issue. Please see [[Issue Tracking]] for a description of the different workflows we are using. Weekly Each week we will manage work items, crossing off completed features, and triaging bugs. At the end of the milestone, we will strive for 0 bugs and 0 issues assigned to the milestone. Some bugs and features will then be either postponed to later milestones or moved back to the backlog. End Game The final week of the milestone is what we call the \"end game\" ( see running the endgame ). During this week we will wrap up any feature work, we will test using a test plan [[Iteration Plans]], and then we will fix the critical bugs for that milestone. During the endgame we make a build available on the insiders channel ( see also . We will monitor incoming issues from this release, fix any critical bugs that arise, and then produce a final stable release for the milestone and the stable channel. Before we publish builds we manually execute the [[Smoke Test]] on all supported platforms.","title":"Development Process"},{"location":"Development-Process/#roadmap","text":"The team has a 6-12 months high level [[Roadmap]] which defines high level themes and features to be addressed in this timeframe.","title":"Roadmap"},{"location":"Development-Process/#iterations","text":"We will work in monthly iterations on the items on the roadmap. Iterations are roughly month based, rather than week based. We will begin a milestone on a Monday and end on a Friday, meaning that each milestone can have a different duration, depending on how the weeks align. At the end of each iteration, we want to have a version of Visual Studio Code that can be used by the VS Code community. The work planned during an iteration is captured in the iteration plan (see [[Iteration Plans]]). The feature highlights of each iteration are highlighted in the release notes.","title":"Iterations"},{"location":"Development-Process/#planning","text":"Before each milestone, we will prioritize features to implement and bugs to fix in the upcoming iteration. Bugs are assigned the milestone for the iteration. For new features, we create new issues and label them with Plan Item . Plan Items include a check list for the Definition of Done . The Bugs, Plan Items, and Feature Requests assigned to a milestone encompasses the planned work for the upcoming month. For each Plan Item, we include the checklist for b","title":"Planning"},{"location":"Development-Process/#definition-of-done","text":"Test Plan Item created Keyboard accessible Screen reader accessible Works with the different themes, including the high contrast theme Telemetry events in place Release notes updated","title":"Definition of Done"},{"location":"Development-Process/#inside-an-iteration","text":"We work in weekly segments: - Week 1 : Reduce debt introduced in the previous iteration, address critical issues uncovered in the previous iteration, plan the next iteration - Week 2 : Work according to the plan - Week 3+ : Work according to the plan - Final Week : Endgame - the team tests the new features according to a test plan and updates the documentation. - we make a pre-release available on the 'insiders' channel and invite users to help us test the pre-release. - Week 1 (next iteration) : - monitoring the pre-release and fixing critical issues. - publish the release, sometime midweek, after 24 hours with no changes to the pre-release.","title":"Inside an Iteration"},{"location":"Development-Process/#triage","text":"Bugs and features will be assigned a milestone, and within a milestone, they will be assigned a priority. The priority dictates the order in which issues should be addressed. An important bug (something that we think is critical for the milestone) is to be addressed before the other bugs. To find out when a bug fix will be available in an update, then please check the milestone that is assigned to the issue. Please see [[Issue Tracking]] for a description of the different workflows we are using.","title":"Triage"},{"location":"Development-Process/#weekly","text":"Each week we will manage work items, crossing off completed features, and triaging bugs. At the end of the milestone, we will strive for 0 bugs and 0 issues assigned to the milestone. Some bugs and features will then be either postponed to later milestones or moved back to the backlog.","title":"Weekly"},{"location":"Development-Process/#end-game","text":"The final week of the milestone is what we call the \"end game\" ( see running the endgame ). During this week we will wrap up any feature work, we will test using a test plan [[Iteration Plans]], and then we will fix the critical bugs for that milestone. During the endgame we make a build available on the insiders channel ( see also . We will monitor incoming issues from this release, fix any critical bugs that arise, and then produce a final stable release for the milestone and the stable channel. Before we publish builds we manually execute the [[Smoke Test]] on all supported platforms.","title":"End Game"},{"location":"Differences-between-the-repository-and-Visual-Studio-Code/","text":"This article outlines the differences between the github.com/microsoft/vscode GitHub project (which we refer to as Code - OSS ) and Microsoft's Visual Studio Code distribution. The Code - OSS Repository The Code - OSS repository is where we (Microsoft) develop the open source editor upon which we build the Visual Studio Code product. We contribute source code and manage issues in this repository. We also maintain the wiki, publish the Visual Studio Code roadmap, monthly iteration plans, and endgame plans for the product. The source code in this repository is available to everyone under a standard MIT license . Visual Studio Code Visual Studio Code is a distribution of the Code - OSS repository with Microsoft specific customizations, including additional source code and extensions, released under a traditional Microsoft product license . What Goes Where? We take great care to ensure that no proprietary code or assets are accidently contributed to the Code - OSS repo, so that it can be cloned and freely used by anyone in the community. Our guiding principle is that everything should be open source. If it isn't open source, it must be cleanly separated from the Code - OSS repository so that it is always possible to fork the repo and build a functional editor. The small amount of assets and code that are not open source generally fall into one of the following categories: Trademarked assets that define the brand (e.g. logos and product names) Code that has a reliance on existing proprietary code or libraries Code that is shared with other proprietary licensed products, such as Visual Studio Code that may be used in, or provides access to, a service that we run in our data centers (e.g. access to the Visual Studio Marketplace ) Pre-release code that is undergoing significant revision The closed source additions to the distribution make up a very small percentage of the overall product. While not open source, we believe that transparency is very important to the health of the project and community. Therefore, we want to outline \"the last mile\" between what you see in the repository and what is built into the Visual Studio Code distribution. Most customizations are done through the customization of product.json , but we do include a small amount of additional code and assets in the final product. What Why How Icons, Product Name (e.g. \"Microsoft Visual Studio Code\"), Documentation Microsoft trademarks, which provide brand recognition for customers and helps to avoid confusion for downstream implementations. In other words, because we protect the brands, you know its a product from Microsoft when you see it. Static assets such as icons and the desktop image are included in the distro. Product names and documentation URLs are added to product.json . Visual Studio Marketplace Integration The Visual Studio Marketplace is a service that we provide to users of the Visual Studio family of products (Visual Studio for Windows and Mac, Visual Studio Code, and Azure DevOps, formerly Visual Studio Team Services). The Marketplace not only provides discovery and hosting services, it provides ratings, comments, Q&A, publisher verification, virus scanning, conflict resolution services, payment services for Azure DevOps extensions, as well as support for publishers. The Marketplace is not a general purpose store designed to support any distribution or a subset of distributions. Access to the Marketplace is governed by the Marketplace Terms of Use . product.json includes URLs that point to the Visual Studio Marketplace. Extension Recomendations We maintain a curated list of \"important\" and \"general\" extension recommendations that are subsequently installed from the Marketplace, therefore we only include these in the distro. product.json includes an array of extension IDs. Remote Development Portions of the Remote Development extensions are used in developer services that are run under a proprietary license. While these extensions do not require these services to work, there is enough code reuse that the extensions are also under a proprietary license. While the bulk of the code is in the extensions and in the Code - OSS repository, a handful of small changes are in the Visual Studio Code distribution. The code to transform URIs between remote and local endpoints and negotiate a connection to the Visual Studio Code server is proprietary. Enable Proprietary Debug Adapters, Visual Studio Code Server Certain Microsoft extensions (e.g. C#/.NET debugger) and the Visual Studio Code Server are distributed under a license that restricts their use to the Visual Studio family of products (Visual Studio, Visual Studio Code, or Visual Studio for Mac). The distribution includes a native node module that allows the extension to use a \"handshake\" to adhere to the license by ensuring it is being used from Visual Studio Code. Extensions Using Proposed APIs We follow a strict API process based on proposed APIs ( Extension API Process ). Because proposed APIs often break, we generally do not allow that any extension using proposed APIs can be published to the Marketplace and loaded into Stable builds. We do however maintain a small list of extensions that are exempted from this rule because the publisher (typically Microsoft) has agreed to track the API changes. product.json includes a list of extension IDs that can be published to the Marketplace and use proposed APIs. Telemetry, Surveys, Crash Reporting Microsoft collects anonymous usage statistics, survey data, and crash dumps to help improve the quality of the product. No personally identifiable information is gathered. Any data we do collect, such as crash dumps, is persisted in compliance with GDPR guidelines ( FAQ ). You can disable telemetry collection, please see our FAQ for more details. The App Insights telemetry keys, Hockey App URLs, Experiment URLs, and Survey probabilities and URLs are stored in product.json and are private so that other distributions cannot send us telemetry and we can maintain GDPR compliance. Update Services Visual Studio Code periodically checks with a service that we host to see if there are updates to be installed or, in extremely rare occassions, rolled back. product.json contains the URL of the update service.","title":"Differences between the repository and Visual Studio Code"},{"location":"Differences-between-the-repository-and-Visual-Studio-Code/#the-code-oss-repository","text":"The Code - OSS repository is where we (Microsoft) develop the open source editor upon which we build the Visual Studio Code product. We contribute source code and manage issues in this repository. We also maintain the wiki, publish the Visual Studio Code roadmap, monthly iteration plans, and endgame plans for the product. The source code in this repository is available to everyone under a standard MIT license .","title":"The Code - OSS Repository"},{"location":"Differences-between-the-repository-and-Visual-Studio-Code/#visual-studio-code","text":"Visual Studio Code is a distribution of the Code - OSS repository with Microsoft specific customizations, including additional source code and extensions, released under a traditional Microsoft product license .","title":"Visual Studio Code"},{"location":"Differences-between-the-repository-and-Visual-Studio-Code/#what-goes-where","text":"We take great care to ensure that no proprietary code or assets are accidently contributed to the Code - OSS repo, so that it can be cloned and freely used by anyone in the community. Our guiding principle is that everything should be open source. If it isn't open source, it must be cleanly separated from the Code - OSS repository so that it is always possible to fork the repo and build a functional editor. The small amount of assets and code that are not open source generally fall into one of the following categories: Trademarked assets that define the brand (e.g. logos and product names) Code that has a reliance on existing proprietary code or libraries Code that is shared with other proprietary licensed products, such as Visual Studio Code that may be used in, or provides access to, a service that we run in our data centers (e.g. access to the Visual Studio Marketplace ) Pre-release code that is undergoing significant revision The closed source additions to the distribution make up a very small percentage of the overall product. While not open source, we believe that transparency is very important to the health of the project and community. Therefore, we want to outline \"the last mile\" between what you see in the repository and what is built into the Visual Studio Code distribution. Most customizations are done through the customization of product.json , but we do include a small amount of additional code and assets in the final product. What Why How Icons, Product Name (e.g. \"Microsoft Visual Studio Code\"), Documentation Microsoft trademarks, which provide brand recognition for customers and helps to avoid confusion for downstream implementations. In other words, because we protect the brands, you know its a product from Microsoft when you see it. Static assets such as icons and the desktop image are included in the distro. Product names and documentation URLs are added to product.json . Visual Studio Marketplace Integration The Visual Studio Marketplace is a service that we provide to users of the Visual Studio family of products (Visual Studio for Windows and Mac, Visual Studio Code, and Azure DevOps, formerly Visual Studio Team Services). The Marketplace not only provides discovery and hosting services, it provides ratings, comments, Q&A, publisher verification, virus scanning, conflict resolution services, payment services for Azure DevOps extensions, as well as support for publishers. The Marketplace is not a general purpose store designed to support any distribution or a subset of distributions. Access to the Marketplace is governed by the Marketplace Terms of Use . product.json includes URLs that point to the Visual Studio Marketplace. Extension Recomendations We maintain a curated list of \"important\" and \"general\" extension recommendations that are subsequently installed from the Marketplace, therefore we only include these in the distro. product.json includes an array of extension IDs. Remote Development Portions of the Remote Development extensions are used in developer services that are run under a proprietary license. While these extensions do not require these services to work, there is enough code reuse that the extensions are also under a proprietary license. While the bulk of the code is in the extensions and in the Code - OSS repository, a handful of small changes are in the Visual Studio Code distribution. The code to transform URIs between remote and local endpoints and negotiate a connection to the Visual Studio Code server is proprietary. Enable Proprietary Debug Adapters, Visual Studio Code Server Certain Microsoft extensions (e.g. C#/.NET debugger) and the Visual Studio Code Server are distributed under a license that restricts their use to the Visual Studio family of products (Visual Studio, Visual Studio Code, or Visual Studio for Mac). The distribution includes a native node module that allows the extension to use a \"handshake\" to adhere to the license by ensuring it is being used from Visual Studio Code. Extensions Using Proposed APIs We follow a strict API process based on proposed APIs ( Extension API Process ). Because proposed APIs often break, we generally do not allow that any extension using proposed APIs can be published to the Marketplace and loaded into Stable builds. We do however maintain a small list of extensions that are exempted from this rule because the publisher (typically Microsoft) has agreed to track the API changes. product.json includes a list of extension IDs that can be published to the Marketplace and use proposed APIs. Telemetry, Surveys, Crash Reporting Microsoft collects anonymous usage statistics, survey data, and crash dumps to help improve the quality of the product. No personally identifiable information is gathered. Any data we do collect, such as crash dumps, is persisted in compliance with GDPR guidelines ( FAQ ). You can disable telemetry collection, please see our FAQ for more details. The App Insights telemetry keys, Hockey App URLs, Experiment URLs, and Survey probabilities and URLs are stored in product.json and are private so that other distributions cannot send us telemetry and we can maintain GDPR compliance. Update Services Visual Studio Code periodically checks with a service that we host to see if there are updates to be installed or, in extremely rare occassions, rolled back. product.json contains the URL of the update service.","title":"What Goes Where?"},{"location":"Editor-decorations-&-colors/","text":"- Uses TM theme setting. - Not yet uses TM theme setting. Low priority. - Not required. Editor Contributions Cursor Status Style TM Setting cursor caret bracket-match Find Status Style TM Setting findMatch findMatchHighlight currentFindMatch currentFindMatchHighlight findScope findRangeHighlight rangeHighlight rangeHighlight selectionHighlight selectionHighlight Goto Declaration Status Style TM Setting goto-definition-link activeLinkForeground Hover Status Style TM Setting hoverHighlight hoverHighlight Keybindings Status Style TM Setting keybindingError inlineKeybindingError keybindingInfo inlineKeybindingInfo Links Status Style TM Setting detected-link-active activeLinkForeground detected-link linkForeground Markers Status Style TM Setting greensquiggly redsquiggly Quick open Status Style TM Setting rangeHighlight rangeHighlight References Status Style TM Setting reference-decoration referenceHighlight referenceMatch findMatchHighlight Snippet Status Style TM Setting new-snippet finish-snippet-placeholder placeholder Word Highlighter Status Style TM Setting wordHighlightStrong wordHighlightStrong wordHighlight wordHighlight selectionHighlight selectionHighlight Diff Editor Contributions Status Style TM Setting line-insert line-delete char-insert char-delete Debug Contributions Status Style TM Setting hoverHighlight hoverHighlight Git Contributions Status Style TM Setting git-merge-control-decoration git-dirty-modified-diff-glyph git-dirty-added-diff-glyph git-dirty-deleted-diff-glyph Search Contributions Status Style TM Setting findMatch findMatchHighlight currentFindMatch currentFindMatchHighlight findInFileMatch findMatchHighlight highlight findMatchHighlight replace findInFileMatch replaceMatch","title":"Editor decorations & colors"},{"location":"Editor-decorations-&-colors/#editor-contributions","text":"Cursor Status Style TM Setting cursor caret bracket-match Find Status Style TM Setting findMatch findMatchHighlight currentFindMatch currentFindMatchHighlight findScope findRangeHighlight rangeHighlight rangeHighlight selectionHighlight selectionHighlight Goto Declaration Status Style TM Setting goto-definition-link activeLinkForeground Hover Status Style TM Setting hoverHighlight hoverHighlight Keybindings Status Style TM Setting keybindingError inlineKeybindingError keybindingInfo inlineKeybindingInfo Links Status Style TM Setting detected-link-active activeLinkForeground detected-link linkForeground Markers Status Style TM Setting greensquiggly redsquiggly Quick open Status Style TM Setting rangeHighlight rangeHighlight References Status Style TM Setting reference-decoration referenceHighlight referenceMatch findMatchHighlight Snippet Status Style TM Setting new-snippet finish-snippet-placeholder placeholder Word Highlighter Status Style TM Setting wordHighlightStrong wordHighlightStrong wordHighlight wordHighlight selectionHighlight selectionHighlight","title":"Editor Contributions"},{"location":"Editor-decorations-&-colors/#diff-editor-contributions","text":"Status Style TM Setting line-insert line-delete char-insert char-delete","title":"Diff Editor Contributions"},{"location":"Editor-decorations-&-colors/#debug-contributions","text":"Status Style TM Setting hoverHighlight hoverHighlight","title":"Debug Contributions"},{"location":"Editor-decorations-&-colors/#git-contributions","text":"Status Style TM Setting git-merge-control-decoration git-dirty-modified-diff-glyph git-dirty-added-diff-glyph git-dirty-deleted-diff-glyph","title":"Git Contributions"},{"location":"Editor-decorations-&-colors/#search-contributions","text":"Status Style TM Setting findMatch findMatchHighlight currentFindMatch currentFindMatchHighlight findInFileMatch findMatchHighlight highlight findMatchHighlight replace findInFileMatch replaceMatch","title":"Search Contributions"},{"location":"Explain-extension-causes-high-cpu-load/","text":"Background Visual Studio Code runs extensions in a separate Node.js process \u2013 the extension host. This isolates extension code from VS Code itself, but it doesn\u2019t isolate different extensions from each other. Due to the single threaded nature of JavaScript, an extension can, willingly or not, monopolize the extension host thread, block all other extensions, and make operations appear as unresponsive. To detect this situation, VS Code monitors the extension host so that it knows when it becomes unresponsive. It then attaches a CPU profiler for a short while to analyze what part of the extension host has been causing the unresponsiveness. Dealing with high CPU load issues When an extension is monopolizing the extension host process, VS Code encourages users to file an issue against the extension in question. When you receive such an issue, you should do the following: Make sure the <myExtensionId>.cpuprofile.txt -file has been uploaded. If not, ask the author for it. Remove the .txt -suffix Open the JavaScript profiler via F1 > Developer Tools > \u22ee > More Tools > JavaScript Profiler Select Load and pick the .cpuprofile -file Use the JavaScript profiler to drill into individual functions and analyse in what part of the code most time has been spend. Keep in mind that a huge file, a huge number of files, or some other \"unexpected\" input may have been involved and that was the cause of the high CPU load. Code Loading Sometimes it's not code execution but code loading (which is also blocking) which causes unresponsive extension host. Profile then are harder to read and often look like this: The problem is that there are too many, often little, files that all need to be read and loaded. Considering bundling your extension, e.g with https://webpack.js.org or https://rollupjs.org/ . For the former there is a sample: https://github.com/Microsoft/vscode-extension-samples/tree/master/webpack-sample Testing Changes If you can reproduce the slowdown or if you want to verify your changes, you can also profile the extension host yourself. Follow this guide: https://github.com/Microsoft/vscode/wiki/Performance-Issues#profile-the-running-extensions","title":"Explain extension causes high cpu load"},{"location":"Explain-extension-causes-high-cpu-load/#background","text":"Visual Studio Code runs extensions in a separate Node.js process \u2013 the extension host. This isolates extension code from VS Code itself, but it doesn\u2019t isolate different extensions from each other. Due to the single threaded nature of JavaScript, an extension can, willingly or not, monopolize the extension host thread, block all other extensions, and make operations appear as unresponsive. To detect this situation, VS Code monitors the extension host so that it knows when it becomes unresponsive. It then attaches a CPU profiler for a short while to analyze what part of the extension host has been causing the unresponsiveness.","title":"Background"},{"location":"Explain-extension-causes-high-cpu-load/#dealing-with-high-cpu-load-issues","text":"When an extension is monopolizing the extension host process, VS Code encourages users to file an issue against the extension in question. When you receive such an issue, you should do the following: Make sure the <myExtensionId>.cpuprofile.txt -file has been uploaded. If not, ask the author for it. Remove the .txt -suffix Open the JavaScript profiler via F1 > Developer Tools > \u22ee > More Tools > JavaScript Profiler Select Load and pick the .cpuprofile -file Use the JavaScript profiler to drill into individual functions and analyse in what part of the code most time has been spend. Keep in mind that a huge file, a huge number of files, or some other \"unexpected\" input may have been involved and that was the cause of the high CPU load.","title":"Dealing with high CPU load issues"},{"location":"Explain-extension-causes-high-cpu-load/#code-loading","text":"Sometimes it's not code execution but code loading (which is also blocking) which causes unresponsive extension host. Profile then are harder to read and often look like this: The problem is that there are too many, often little, files that all need to be read and loaded. Considering bundling your extension, e.g with https://webpack.js.org or https://rollupjs.org/ . For the former there is a sample: https://github.com/Microsoft/vscode-extension-samples/tree/master/webpack-sample","title":"Code Loading"},{"location":"Explain-extension-causes-high-cpu-load/#testing-changes","text":"If you can reproduce the slowdown or if you want to verify your changes, you can also profile the extension host yourself. Follow this guide: https://github.com/Microsoft/vscode/wiki/Performance-Issues#profile-the-running-extensions","title":"Testing Changes"},{"location":"Extension-API-guidelines/","text":"Extension API Guidelines This is a loose collection of guidelines that you should be following when proposing API. The process for adding API is described here: https://github.com/Microsoft/vscode/wiki/Extension-API-process . Breakage We DO NOT want to break API. Therefore be careful and conservative when proposing new API. It needs to hold up in the long term. Expose only the minimum but still try to anticipate potential future requests. Namespaces The API is structured into different namespaces, like commands , window , workspace etc. Namespaces contain functions, constants, and events. All types (classes, enum, interfaces) are defined in the global, vscode , namespace. JavaScript The API should have a JavaScript\u2019ish feel. While that is harder to put in rules, it means we use namespaces, properties, functions, and globals instead of object-factories and services. Also take inspiration from popular existing JS API, for instance window.createStatusBarItem is like document.createElement , the members of DiagnosticsCollection are similar to ES6 maps etc. Global Events Events aren\u2019t defined on the types they occur on but in the best matching namespace. For instance, document changes aren't sent by a document but via the workspace.onDidChangeTextDocument event. The event will contain the document in question. This global event pattern makes it easier to manage event subscriptions because changes happen less frequently. Private Events Private or instance events aren't accessible via globals but exist on objects, e.g., FileSystemWatcher#onDidCreate . Don't use private events unless the sender of the event is private. The rule of thumb is: 'Objects that can be accessed globally (editors, tasks, terminals, documents, etc)' should not have private events, objects that are private (only known by its creators, like tree views, web views) can send private events' Event naming Events follow the on[Did|Will]VerbSubject patterns, like onDidChangeActiveEditor or onWillSaveTextDocument . It doesn\u2019t hurt to use explicit names. Creating Objects Objects that live in the main thread but can be controlled/instantiated by extensions are declared as interfaces, e.g. TextDocument or StatusBarItem . When you allow creating such objects your API must follow the createXYZ(args): XYZ pattern. Because this is a constructor-replacement, the call must return synchronously. Shy Objects Objects the API hands out to extensions should not contain more than what the API defines. Don\u2019t expect everyone to read vscode.d.ts but also expect folks to use debugging-aided-intellisense, meaning whatever the debugger shows developers will program against. We don\u2019t want to appear as making false promises. Prefix your private members with _ as that is a common rule or, even better, use function-scopes to hide information. Sync vs. Async Reading data, like an editor selection, a configuration value, etc. is synchronous. Setting a state that reflects on the main side is asynchronous. Despite updates being async your \u2018extension host object\u2019 should reflect the new state synchronously. This happens when setting an editor selection editor.selection = newSelection | | V 1. On the API object set the value as given 2. Make an async-call to the main side ala `trySetSelection` 3. The async-call returns with the actual selection (it might have changed in the meantime) 4. On the API object set the value again We usually don\u2019t expose the fact that setting state is asynchronous. We try to have API that feels sync - editor.selection is a getter/setter and not a method. Data Driven Whenever possible, you should define a data model and define provider-interfaces. This puts VS Code into control as we can decide when to ask those providers, how to deal with multiple providers etc. The ReferenceProvider interface is a good sample for this. Enrich Data Incrementally Sometimes it is expensive for a provider to compute parts of its data. For instance, creating a full CompletionItem (with all the documentation and symbols resolved) conflicts with being able to compute a large list of them quickly. In those cases, providers should return a lightweight version and offer a resolve method that allows extensions to enrich data. The CodeLensProvider and CompletionItemProvider interfaces are good samples for this. Cancellation Calls into a provider should always include a CancellationToken as the last parameter. With that, the main thread can signal to the provider that its result won\u2019t be needed anymore. When adding new parameters to provider-functions, it is OK to have the token not at the end anymore. Objects vs. Interfaces Objects that should be returned by a provider are usually represented by a class that extensions can instantiate, e.g. CodeLens . We do that to provide convenience constructors and to be able to populate default values. Data that we accept in methods calls, i.e., parameter types, like in registerRenameProvider or showQuickPick , are declared as interfaces. That makes it easy to fulfill the API contract using class-instances or plain object literals. Strict and Relaxed Data Data the API returns is strict, e.g. activeTextEditor is an editor or undefined , but not null . On the other side, providers can return relaxed data. We usually accept 4 types: The actual type, like Hover , a Thenable of that type, undefined or null . With that we want to make it easy to implement a provider, e.g., if you can compute results synchronous you don\u2019t need to wrap things into a promise or if a certain condition isn\u2019t met simple return, etc. Validate Data Although providers can return \u2018relaxed\u2019 data, you need to verify it. The same is true for arguments etc. Throw validation errors when possible, drop data object when invalid. Copy Data Don\u2019t send the data that a provider returned over the wire. Often it contains more information than we need and often there are cyclic dependencies. Use the provider data to create objects that your protocol speaks. Enums When API-work started only numeric-enums were supported, today TypeScript supports string-or-types and string-enums. Because fewer concepts are better, we stick to numeric-enums. Strict Null We define the API with strictNull-checks in mind. That means we use the optional annotation foo?: number and null or undefined in type annotations. For instance, its activeTextEditor: TextEditor | undefined . Again, be strict for types we define and relaxed when accepting data. JSDOC We add JSDoc for all parts of the API. The doc is supported by markdown syntax. When document string-datatypes that end up in the UI, use the phrase \u2018Human-readable string\u2026\u2019","title":"Extension API Guidelines"},{"location":"Extension-API-guidelines/#extension-api-guidelines","text":"This is a loose collection of guidelines that you should be following when proposing API. The process for adding API is described here: https://github.com/Microsoft/vscode/wiki/Extension-API-process .","title":"Extension API Guidelines"},{"location":"Extension-API-guidelines/#breakage","text":"We DO NOT want to break API. Therefore be careful and conservative when proposing new API. It needs to hold up in the long term. Expose only the minimum but still try to anticipate potential future requests.","title":"Breakage"},{"location":"Extension-API-guidelines/#namespaces","text":"The API is structured into different namespaces, like commands , window , workspace etc. Namespaces contain functions, constants, and events. All types (classes, enum, interfaces) are defined in the global, vscode , namespace.","title":"Namespaces"},{"location":"Extension-API-guidelines/#javascript","text":"The API should have a JavaScript\u2019ish feel. While that is harder to put in rules, it means we use namespaces, properties, functions, and globals instead of object-factories and services. Also take inspiration from popular existing JS API, for instance window.createStatusBarItem is like document.createElement , the members of DiagnosticsCollection are similar to ES6 maps etc.","title":"JavaScript"},{"location":"Extension-API-guidelines/#global-events","text":"Events aren\u2019t defined on the types they occur on but in the best matching namespace. For instance, document changes aren't sent by a document but via the workspace.onDidChangeTextDocument event. The event will contain the document in question. This global event pattern makes it easier to manage event subscriptions because changes happen less frequently.","title":"Global Events"},{"location":"Extension-API-guidelines/#private-events","text":"Private or instance events aren't accessible via globals but exist on objects, e.g., FileSystemWatcher#onDidCreate . Don't use private events unless the sender of the event is private. The rule of thumb is: 'Objects that can be accessed globally (editors, tasks, terminals, documents, etc)' should not have private events, objects that are private (only known by its creators, like tree views, web views) can send private events'","title":"Private Events"},{"location":"Extension-API-guidelines/#event-naming","text":"Events follow the on[Did|Will]VerbSubject patterns, like onDidChangeActiveEditor or onWillSaveTextDocument . It doesn\u2019t hurt to use explicit names.","title":"Event naming"},{"location":"Extension-API-guidelines/#creating-objects","text":"Objects that live in the main thread but can be controlled/instantiated by extensions are declared as interfaces, e.g. TextDocument or StatusBarItem . When you allow creating such objects your API must follow the createXYZ(args): XYZ pattern. Because this is a constructor-replacement, the call must return synchronously.","title":"Creating Objects"},{"location":"Extension-API-guidelines/#shy-objects","text":"Objects the API hands out to extensions should not contain more than what the API defines. Don\u2019t expect everyone to read vscode.d.ts but also expect folks to use debugging-aided-intellisense, meaning whatever the debugger shows developers will program against. We don\u2019t want to appear as making false promises. Prefix your private members with _ as that is a common rule or, even better, use function-scopes to hide information.","title":"Shy Objects"},{"location":"Extension-API-guidelines/#sync-vs-async","text":"Reading data, like an editor selection, a configuration value, etc. is synchronous. Setting a state that reflects on the main side is asynchronous. Despite updates being async your \u2018extension host object\u2019 should reflect the new state synchronously. This happens when setting an editor selection editor.selection = newSelection | | V 1. On the API object set the value as given 2. Make an async-call to the main side ala `trySetSelection` 3. The async-call returns with the actual selection (it might have changed in the meantime) 4. On the API object set the value again We usually don\u2019t expose the fact that setting state is asynchronous. We try to have API that feels sync - editor.selection is a getter/setter and not a method.","title":"Sync vs. Async"},{"location":"Extension-API-guidelines/#data-driven","text":"Whenever possible, you should define a data model and define provider-interfaces. This puts VS Code into control as we can decide when to ask those providers, how to deal with multiple providers etc. The ReferenceProvider interface is a good sample for this.","title":"Data Driven"},{"location":"Extension-API-guidelines/#enrich-data-incrementally","text":"Sometimes it is expensive for a provider to compute parts of its data. For instance, creating a full CompletionItem (with all the documentation and symbols resolved) conflicts with being able to compute a large list of them quickly. In those cases, providers should return a lightweight version and offer a resolve method that allows extensions to enrich data. The CodeLensProvider and CompletionItemProvider interfaces are good samples for this.","title":"Enrich Data Incrementally"},{"location":"Extension-API-guidelines/#cancellation","text":"Calls into a provider should always include a CancellationToken as the last parameter. With that, the main thread can signal to the provider that its result won\u2019t be needed anymore. When adding new parameters to provider-functions, it is OK to have the token not at the end anymore.","title":"Cancellation"},{"location":"Extension-API-guidelines/#objects-vs-interfaces","text":"Objects that should be returned by a provider are usually represented by a class that extensions can instantiate, e.g. CodeLens . We do that to provide convenience constructors and to be able to populate default values. Data that we accept in methods calls, i.e., parameter types, like in registerRenameProvider or showQuickPick , are declared as interfaces. That makes it easy to fulfill the API contract using class-instances or plain object literals.","title":"Objects vs. Interfaces"},{"location":"Extension-API-guidelines/#strict-and-relaxed-data","text":"Data the API returns is strict, e.g. activeTextEditor is an editor or undefined , but not null . On the other side, providers can return relaxed data. We usually accept 4 types: The actual type, like Hover , a Thenable of that type, undefined or null . With that we want to make it easy to implement a provider, e.g., if you can compute results synchronous you don\u2019t need to wrap things into a promise or if a certain condition isn\u2019t met simple return, etc.","title":"Strict and Relaxed Data"},{"location":"Extension-API-guidelines/#validate-data","text":"Although providers can return \u2018relaxed\u2019 data, you need to verify it. The same is true for arguments etc. Throw validation errors when possible, drop data object when invalid.","title":"Validate Data"},{"location":"Extension-API-guidelines/#copy-data","text":"Don\u2019t send the data that a provider returned over the wire. Often it contains more information than we need and often there are cyclic dependencies. Use the provider data to create objects that your protocol speaks.","title":"Copy Data"},{"location":"Extension-API-guidelines/#enums","text":"When API-work started only numeric-enums were supported, today TypeScript supports string-or-types and string-enums. Because fewer concepts are better, we stick to numeric-enums.","title":"Enums"},{"location":"Extension-API-guidelines/#strict-null","text":"We define the API with strictNull-checks in mind. That means we use the optional annotation foo?: number and null or undefined in type annotations. For instance, its activeTextEditor: TextEditor | undefined . Again, be strict for types we define and relaxed when accepting data.","title":"Strict Null"},{"location":"Extension-API-guidelines/#jsdoc","text":"We add JSDoc for all parts of the API. The doc is supported by markdown syntax. When document string-datatypes that end up in the UI, use the phrase \u2018Human-readable string\u2026\u2019","title":"JSDOC"},{"location":"Extension-API-process/","text":"Extension API Process The goal of this process is to be transparent about how APIs are created, what phases a proposal goes through, and to know when proposals will be finalized. While still maintaining flexibility in the API making process. About Proposed APIs All proposed APIs are defined in the vscode.proposed.d.ts file. We iterate, both internally and externally, on API proposals before making any APIs stable. With greater transparency and collaboration, we can produce better, flexible, powerful, and more ergonomic APIs. Therefore, ideally, proposals would be reviewed, tried, and tested by extension authors. To try out a proposed API, do the following: You must use Insiders because proposed APIs change frequently. You must have this line in the package.json file of your extension: \"enableProposedApi\": true . Copy the latest version of the vscode.proposed.d.ts -file into your project. Note: You cannot publish an extension that uses a proposed API. We may likely make breaking changes in the next release and we never want to break existing extensions. API Proposal Stages Here is a rough flow chart of the process. API Idea Have an idea for a new API? Great! Ask yourself the following questions: How does this fit into the existing API? Is this a one-off-API that solves only your one problem, or can it be applied more broadly? Does this reuse a concept, like providers or commands, or does this add a new concept? Who else could use an API like this? (Multiple use-cases lead to better APIs) API Proposal Suggested Before proposing your new API, ask yourself the following: Does the proposal alter an existing API? If yes, it must be backward compatible with the existing API. Does it violates it our API guidelines ? An API proposal is suggested, either internally or externally via a GitHub issue. - The issue will track the life-cycle of the API proposal - The issue will be labeled with api and api-proposal Once you submit your proposal, it will begin gather interest and pre-implementation feedback. API Proposal Implemented / Feedback Requested Next, if the proposal garners enough interest, it will likely be implemented. Once implemented, the proposal is ready for review and feedback (e.g. does it meet requirements, API guidelines, ergonomics, etc). We will also monitor and gauge continued interest in the proposal. Ideally, extension authors/contributors will try out the new API and provide real-world feedback. vscode.proposed.d.ts file will be updated with the new API Each proposed API is contained within its own //#region and contains a short description of the API and a link to the proposal GitHub issue The proposal issue will be labeled with api-feedback As an API proposal is reviewed and gathers feedback, it is very likely to evolve in response. As this continues, look to the vscode.proposed.d.ts file for the latest version. API Proposal Finalization Here are some finalization questions that will be asked before beginning: - Is there a non-trivial usage-sample for this new API? - Are there multiple (ideally not similar) use-cases that this proposal solves? - Is the proposal too narrow (not solving enough) or too broad (trying to solve too much)? - Who would use this new API? Once a proposal sufficiently answers those questions and is in a good place, it begins the finalization process for becoming stable. While this signals the intent to ship the proposed APIs, there isn't any guarantee that there won't be futher changes or that the proposal will become stable (e.g. in rare circumstances, we might even have deprecate the proposed API). At the same time, ideally, the finalization of an API will be attached to an upcoming milestone, again as an intent not guarantee. And finally, assuming a succesful finalization, the API will move from vscode.proposed.d.ts into vscode.d.ts and the API proposal issue will be closed. Weekly API call: During debt week, everyone that plans to work on API joins the call and presents their case. This call is about forming a shared understanding of the problem and helps us to understand whether the request is one that can safely be mapped onto prior art or will require custom constructs (which pretty much means more work). We introduce a \u2018api-finalization\u2019 tag on GH to clearly identify the items that are about moving API from proposed to stable. Everyone who owns an open \u2018api-finalization\u2019 item for the current iteration needs to show up for the API call. Everyone who owns an open \u2018api-finalization\u2019 item scheduled for the iteration will present in week 1 of the iteration a concrete proposal and sample code showing how the API is being used. The sample code needs to be realistic. One-liners with artificial parameters etc. usually don\u2019t cut it. In each API call, we\u2019ll work through the remaining open \u2018api-finalization\u2019 items before we look at \u2018api-proposal\u2019 items. If an API topic needs more time than what we have in the API call, we\u2019ll schedule separate calls for these topics. These calls are open to everyone, just like the API call.","title":"Extension API process"},{"location":"Extension-API-process/#extension-api-process","text":"The goal of this process is to be transparent about how APIs are created, what phases a proposal goes through, and to know when proposals will be finalized. While still maintaining flexibility in the API making process.","title":"Extension API Process"},{"location":"Extension-API-process/#about-proposed-apis","text":"All proposed APIs are defined in the vscode.proposed.d.ts file. We iterate, both internally and externally, on API proposals before making any APIs stable. With greater transparency and collaboration, we can produce better, flexible, powerful, and more ergonomic APIs. Therefore, ideally, proposals would be reviewed, tried, and tested by extension authors. To try out a proposed API, do the following: You must use Insiders because proposed APIs change frequently. You must have this line in the package.json file of your extension: \"enableProposedApi\": true . Copy the latest version of the vscode.proposed.d.ts -file into your project. Note: You cannot publish an extension that uses a proposed API. We may likely make breaking changes in the next release and we never want to break existing extensions.","title":"About Proposed APIs"},{"location":"Extension-API-process/#api-proposal-stages","text":"Here is a rough flow chart of the process.","title":"API Proposal Stages"},{"location":"Extension-API-process/#api-idea","text":"Have an idea for a new API? Great! Ask yourself the following questions: How does this fit into the existing API? Is this a one-off-API that solves only your one problem, or can it be applied more broadly? Does this reuse a concept, like providers or commands, or does this add a new concept? Who else could use an API like this? (Multiple use-cases lead to better APIs)","title":"API Idea"},{"location":"Extension-API-process/#api-proposal-suggested","text":"Before proposing your new API, ask yourself the following: Does the proposal alter an existing API? If yes, it must be backward compatible with the existing API. Does it violates it our API guidelines ? An API proposal is suggested, either internally or externally via a GitHub issue. - The issue will track the life-cycle of the API proposal - The issue will be labeled with api and api-proposal Once you submit your proposal, it will begin gather interest and pre-implementation feedback.","title":"API Proposal Suggested"},{"location":"Extension-API-process/#api-proposal-implemented-feedback-requested","text":"Next, if the proposal garners enough interest, it will likely be implemented. Once implemented, the proposal is ready for review and feedback (e.g. does it meet requirements, API guidelines, ergonomics, etc). We will also monitor and gauge continued interest in the proposal. Ideally, extension authors/contributors will try out the new API and provide real-world feedback. vscode.proposed.d.ts file will be updated with the new API Each proposed API is contained within its own //#region and contains a short description of the API and a link to the proposal GitHub issue The proposal issue will be labeled with api-feedback As an API proposal is reviewed and gathers feedback, it is very likely to evolve in response. As this continues, look to the vscode.proposed.d.ts file for the latest version.","title":"API Proposal Implemented / Feedback Requested"},{"location":"Extension-API-process/#api-proposal-finalization","text":"Here are some finalization questions that will be asked before beginning: - Is there a non-trivial usage-sample for this new API? - Are there multiple (ideally not similar) use-cases that this proposal solves? - Is the proposal too narrow (not solving enough) or too broad (trying to solve too much)? - Who would use this new API? Once a proposal sufficiently answers those questions and is in a good place, it begins the finalization process for becoming stable. While this signals the intent to ship the proposed APIs, there isn't any guarantee that there won't be futher changes or that the proposal will become stable (e.g. in rare circumstances, we might even have deprecate the proposed API). At the same time, ideally, the finalization of an API will be attached to an upcoming milestone, again as an intent not guarantee. And finally, assuming a succesful finalization, the API will move from vscode.proposed.d.ts into vscode.d.ts and the API proposal issue will be closed.","title":"API Proposal Finalization"},{"location":"Extension-API-process/#weekly-api-call","text":"During debt week, everyone that plans to work on API joins the call and presents their case. This call is about forming a shared understanding of the problem and helps us to understand whether the request is one that can safely be mapped onto prior art or will require custom constructs (which pretty much means more work). We introduce a \u2018api-finalization\u2019 tag on GH to clearly identify the items that are about moving API from proposed to stable. Everyone who owns an open \u2018api-finalization\u2019 item for the current iteration needs to show up for the API call. Everyone who owns an open \u2018api-finalization\u2019 item scheduled for the iteration will present in week 1 of the iteration a concrete proposal and sample code showing how the API is being used. The sample code needs to be realistic. One-liners with artificial parameters etc. usually don\u2019t cut it. In each API call, we\u2019ll work through the remaining open \u2018api-finalization\u2019 items before we look at \u2018api-proposal\u2019 items. If an API topic needs more time than what we have in the API call, we\u2019ll schedule separate calls for these topics. These calls are open to everyone, just like the API call.","title":"Weekly API call:"},{"location":"Feature-Areas/","text":"The issues in the vscode repository are categorized using labels into the following feature areas. The feature area labels have a dark blue label. In addition there can be feature sub areas which are colored light blue. Feature Area Label Description Sub Areas languages-basic languages with syntax-highlighting, snippet, comment-toggling, bracket-matching support only css-less-scss support for CSS, LESS, SCSS html HTML support js JavaScript support json JSON support markdown markdown support php PHP support typescript TypeScript support workbench overall workbench UI themes, workbench-tabs, editor groups, color-palette, keybindings, proxy, webview, telemetry menus menu model, menu contributions, (use workbench-menu for UI) explorer-files explorer and general file management explorer-custom git git support debug debugging, launching support search full text search support editor vscode editor support brackets, monaco-editor, diff-editor,editor-contrib, editor-core-commands, editor-core-settings, editor-core-view, editor-multicursor, find-widget, folding, intellisense, ligatures, snippets, tokenization, intellisense, VIM enablement task task support error-list the error list integrated-terminal integrated terminal panel conpty, input, winpty, xtermjs extensions extension UI, details, install marketplace extensions-development extension development tooling, including vscode-test, @types/vscode, vscode-dts issue reporter issue reporter window api vscode extension API install-update install and update of vscode accessiblity accessibility support i18n internationalization - Code, translation error L10N New UI language request in loc platform for language pack extension","title":"Feature Areas"},{"location":"Feature-Areas/#feature-area","text":"Label Description Sub Areas languages-basic languages with syntax-highlighting, snippet, comment-toggling, bracket-matching support only css-less-scss support for CSS, LESS, SCSS html HTML support js JavaScript support json JSON support markdown markdown support php PHP support typescript TypeScript support workbench overall workbench UI themes, workbench-tabs, editor groups, color-palette, keybindings, proxy, webview, telemetry menus menu model, menu contributions, (use workbench-menu for UI) explorer-files explorer and general file management explorer-custom git git support debug debugging, launching support search full text search support editor vscode editor support brackets, monaco-editor, diff-editor,editor-contrib, editor-core-commands, editor-core-settings, editor-core-view, editor-multicursor, find-widget, folding, intellisense, ligatures, snippets, tokenization, intellisense, VIM enablement task task support error-list the error list integrated-terminal integrated terminal panel conpty, input, winpty, xtermjs extensions extension UI, details, install marketplace extensions-development extension development tooling, including vscode-test, @types/vscode, vscode-dts issue reporter issue reporter window api vscode extension API install-update install and update of vscode accessiblity accessibility support i18n internationalization - Code, translation error L10N New UI language request in loc platform for language pack extension","title":"Feature Area"},{"location":"Feedback-Channels/","text":"As a development team we want to be present on many channels (Github issues, Twitter, Stack Overflow, Gitter). We want to be responsive and at the same time be effective, for example, we want to avoid having to provide the same answer on different channels. This page describes how the development team intends to use and be active on the different channels. Github issues Github issues should be used for bugs and feature requests. How to submit good bugs and feature requests is described in How to Contribute and how we track issues is described in [[Issue Tracking]]. Notice, we don't want to use Github Issues for general 'how-to' questions about Code. We will therefore redirect general 'how-to' questions to Stack Overflow. Stack overflow Stack overflow is the best place for getting high quality answers. Many Code community members are already on Stack Overflow and provide great answers to 'how-to' questions. A development team member tracks stack overflow for questions without an answer and jumps in as needed. Therefore please do not be upset when we close an issue with the comment to ask a question on Stack Overflow. Gitter Chat Room The Gitter Channel provides a place where the Community can get together and collaborate. It is actually great to see that folks have already started to collaborate and support each other there. The VS Code team's presence in the room will be optional, at least for the foreseeable future. We hope the Community will use the room and have discussions. Slack The Visual Studio Code Development Community Slack workspace is a community maintained place for VS Code contributors, extension developers, theme authors, etc to help one another and collaborate. This Slack workspace contains many discussion channels including many for specific extensions. Here are a few of the main channels: (you must first join the Slack workspace before the links below will work) - vscode-dev for general VS Code discussions. - vscode-extensions-dev for discussions about extension development. - vscode-themes for discussions about theme authoring. Just like the Gitter room, the VS Code team's presence in this Slack workspace will be optional, at least for the foreseeable future. Twitter We use the @code account on twitter for announcements and members from the development team watch for tweets for @code.","title":"Feedback Channels"},{"location":"Feedback-Channels/#github-issues","text":"Github issues should be used for bugs and feature requests. How to submit good bugs and feature requests is described in How to Contribute and how we track issues is described in [[Issue Tracking]]. Notice, we don't want to use Github Issues for general 'how-to' questions about Code. We will therefore redirect general 'how-to' questions to Stack Overflow.","title":"Github issues"},{"location":"Feedback-Channels/#stack-overflow","text":"Stack overflow is the best place for getting high quality answers. Many Code community members are already on Stack Overflow and provide great answers to 'how-to' questions. A development team member tracks stack overflow for questions without an answer and jumps in as needed. Therefore please do not be upset when we close an issue with the comment to ask a question on Stack Overflow.","title":"Stack overflow"},{"location":"Feedback-Channels/#gitter-chat-room","text":"The Gitter Channel provides a place where the Community can get together and collaborate. It is actually great to see that folks have already started to collaborate and support each other there. The VS Code team's presence in the room will be optional, at least for the foreseeable future. We hope the Community will use the room and have discussions.","title":"Gitter Chat Room"},{"location":"Feedback-Channels/#slack","text":"The Visual Studio Code Development Community Slack workspace is a community maintained place for VS Code contributors, extension developers, theme authors, etc to help one another and collaborate. This Slack workspace contains many discussion channels including many for specific extensions. Here are a few of the main channels: (you must first join the Slack workspace before the links below will work) - vscode-dev for general VS Code discussions. - vscode-extensions-dev for discussions about extension development. - vscode-themes for discussions about theme authoring. Just like the Gitter room, the VS Code team's presence in this Slack workspace will be optional, at least for the foreseeable future.","title":"Slack"},{"location":"Feedback-Channels/#twitter","text":"We use the @code account on twitter for announcements and members from the development team watch for tweets for @code.","title":"Twitter"},{"location":"Home/","text":"Welcome Welcome to the Visual Studio Code Wiki. These pages are primarily intended for those who wish to contribute to the VS Code project by submitting bug reports, suggesting new features, building extensions, commenting on new ideas, or even by submitting pull requests. Please refer to the sidebar (on the right) for details on Project Management, Contributing to VS Code, and Documentation. If you are looking for more information on using VS Code, please visit our the Visual Studio Code portal and follow us on Twitter !","title":"Home"},{"location":"Home/#welcome","text":"Welcome to the Visual Studio Code Wiki. These pages are primarily intended for those who wish to contribute to the VS Code project by submitting bug reports, suggesting new features, building extensions, commenting on new ideas, or even by submitting pull requests. Please refer to the sidebar (on the right) for details on Project Management, Contributing to VS Code, and Documentation. If you are looking for more information on using VS Code, please visit our the Visual Studio Code portal and follow us on Twitter !","title":"Welcome"},{"location":"How-to-Contribute/","text":"Contributing to Visual Studio Code There are many ways to contribute to the Visual Studio Code project: logging bugs, submitting pull requests, reporting issues, and creating suggestions. After cloning and building the repo, check out the issues list . Issues labeled help wanted are good issues to submit a PR for. Issues labeled good first issue are great candidates to pick up if you are in the code for the first time. If you are contributing significant changes, please discuss with the assignee of the issue first before starting to work on the issue. Prerequisites In order to download necessary tools, clone the repository, and install dependencies via yarn you need network access. You'll need the following tools: Git Node.JS , x64 , version >= 10.x , <= 12.x Yarn , follow the installation guide Python , at least version 2.7 (version 3 is not supported) Note: Python 2.7 will be automatically installed for Windows users through installing windows-build-tools npm module (see below) A C/C++ compiler tool chain for your platform: Windows Set a PYTHON environment variable pointing to your python.exe . E.g.: C:\\Python27\\python.exe Install a compiler for the native modules VS Code is depending on Option 1 (recommended): Use Windows Build Tools npm module Start Powershell as Administrator and install Windows Build Tools npm module ( documentation ). npm install --global windows-build-tools --vs2015 Note: The --debug flag is helpful if you encounter any problems during installation. Note: if you encounter an error The build tools for v141 (Platform Toolset = 'v141') cannot be found.\" you might have a version of Visual Studio installed. Either uninstall that version or make sure to have VC++ 2015.3 v14.00 (v140) toolset for desktop installed (see below) - Option 2: Use Visual Studio 2017 - Install Visual Studio 2017 Community Edition - Select Desktop Development with C++ - Select VC++ 2015.3 v14.00 (v140) toolset for desktop on the right hand side Note: if you encounter an error The build tools for v141 (Platform Toolset = 'v141') cannot be found.\" make sure you installed the VC++ 2015.3 v14.00 (v140) toolset for desktop from the previous step - Restart your computer - Warning: Make sure your profile path only contains ASCII letters, e.g. John , otherwise it can lead to node-gyp usage problems (nodejs/node-gyp/issues#297) - Note : Building and debugging via the Windows subsystem for Linux (WSL) is currently not supported. macOS Xcode and the Command Line Tools, which will install gcc and the related toolchain containing make Run xcode-select --install to install the Command Line Tools Linux make pkg-config GCC or another compile toolchain native-keymap needs libx11-dev and libxkbfile-dev . On Debian-based Linux: sudo apt-get install libx11-dev libxkbfile-dev On Red Hat-based Linux: sudo yum install libX11-devel.x86_64 libxkbfile-devel.x86_64 # or .i686 . keytar needs libsecret-1-dev . On Debian-based Linux: sudo apt-get install libsecret-1-dev . On Red Hat-based Linux: sudo yum install libsecret-devel . Building deb and rpm packages requires fakeroot and rpm , run: sudo apt-get install fakeroot rpm Install and build all of the dependencies using Yarn : cd vscode yarn Troubleshooting In case of issues, try deleting the contents of ~/.node-gyp first and then run yarn cache clean and then try again. If you are on Windows or Linux 64 bit systems and would like to compile to 32 bit, you'll need to set the npm_config_arch environment variable to ia32 before running yarn . This will compile all native node modules for a 32 bit architecture. Similarly, when cross-compiling for ARM, set npm_config_arch to arm . Note: For more information on how to install NPM modules globally on UNIX systems without resorting to sudo , refer to this guide . If you have Visual Studio 2019 installed, you may face issues when using the default version of node-gyp. If you have Visual Studio 2019 installed, you may need to follow the solutions here Build and Run If you want to understand how VS Code works or want to debug an issue, you'll want to get the source, build it, and run the tool locally. Getting the sources First, fork the VS Code repository so that you can make a pull request. Then, clone your fork locally: git clone https://github.com/<<<your-github-account>>>/vscode.git Occasionally you will want to merge changes in the upstream repository (the official code repo) with your fork. cd vscode git checkout master git pull https://github.com/microsoft/vscode.git master Manage any merge conflicts, commit them, and then push them to your fork. Build Go into vscode and start the TypeScript incremental builder: cd vscode yarn watch \ud83d\udc49 Note: If you are running Windows and have installed Visual Studio 2017 as your build tool, you need to open x64 Native Tools Command Prompt for VS 2017 . Do not confuse it with VS2015 x64 Native Tools Command Prompt , if installed. The incremental builder will do an initial full build and will display a message that includes the phrase \"Finished compilation\" once the initial build is complete. The builder will then continue to run in the terminal. It will watch for file changes and compile those changes incrementally, giving you a fast, iterative coding experience. \ud83d\udc49 Tip! Linux users may hit a ENOSPC error when running yarn run watch , to get around this follow instructions in the Common Questions . \ud83d\udc49 Tip! Open VS Code on the folder where you have cloned the vscode repository and press CMD+SHIFT+B ( CTRL+SHIFT+B on Windows, Linux) to start the builder. To view the build output open the Output stream by pressing CMD+SHIFT+U . Errors and Warnings Errors and warnings will show in the console while developing VS Code. If you use VS Code to develop VS Code, errors and warnings are shown in the status bar at the bottom left of the editor. You can view the error list using View | Errors and Warnings or pressing CMD+P and then ! . \ud83d\udc49 Tip! You don't need to stop and restart the development version of VS Code after each change. You can just execute Reload Window from the command palette. We like to assign the keyboard shortcut CMD+R ( CTRL+R on Windows, Linux) to this command. Run To test the changes you launch a development version of VS Code on the workspace vscode , which you are currently editing. macOS and Linux ./scripts/code.sh Windows .\\scripts\\code.bat Web (Chromium, Firefox or Safari only) yarn web You can use --port , --host and --scheme to further instruct the simple server that runs for the web version about your environment (e.g. if you want to test the web version over a network). You can identify the development version of VS Code (\"Code - OSS\") by the following icon in the Dock or Taskbar: \ud83d\udc49 Tip! If you receive an error stating that the app is not a valid Electron app, it probably means you didn't run yarn watch first. Debugging VS Code has a multi-process architecture and your code is executed in different processes. The render process runs the UI code inside the Shell window. To debug code running in the render you can either use VS Code or the Chrome Developer Tools. Using VS Code Install the Debugger for Chrome extension. This extension will let you attach to and debug client side code running in Chrome. Open the vscode repository folder Choose the Launch VS Code launch configuration from the launch dropdown in the Debug viewlet and press F5 . Using the Chrome Developer Tools Run the Developer: Toggle Developer Tools command from the Command Palette in your development instance of VS Code to launch the Chrome tools. It's also possible to debug the released versions of VS Code, since the sources link to sourcemaps hosted online. The extension host process runs code implemented by a plugin. To debug extensions (including those packaged with VS Code) which run in the extension host process, you can use VS Code itself. Switch to the Debug viewlet, choose the Attach to Extension Host configuration, and press F5 . The search process can be debugged, but must first be started. Before attempting to attach, start a search by pressing CMD+P ( CTRL+P on Windows), otherwise attaching will fail and time out. Automated Testing Run the unit tests directly from a terminal by running ./scripts/test.sh from the vscode folder ( scripts\\test on Windows). The test README has complete details on how to run and debug tests, as well as how to produce coverage reports. We also have automated UI tests. The smoke test README has all the details. Unit Testing Run the tests directly from a terminal by running ./scripts/test.sh from the vscode folder ( scripts\\test on Windows). The test README has complete details on how to run and debug tests, as well as how to produce coverage reports. Linting We use tslint for linting our sources. You can run tslint across the sources by calling gulp tslint from a terminal or command prompt. You can also run gulp tslint as a VS Code task by pressing CMD+P ( CTRL+P on Windows) and entering task tslint . Warnings from tslint show up in the Errors and Warnings quick box and you can navigate to them from inside VS Code. To lint the source as you make changes you can install the tslint extension . Extensions The Visual Studio Marketplace is not available from the vscode open source builds. If you need to use or debug an extension you can check to see if the extension author publishes builds in their repository (check the Builds page) or if it is open source you can clone and build the extension locally. Once you have the .VSIX, you can \"side load\" the extension either through the command line or using Install from VSIX command in the Extensions View command drop-down ( see more on command line extension management). Work Branches Even if you have push rights on the Microsoft/vscode repository, you should create a personal fork and create feature branches there when you need them. This keeps the main repository clean and your personal workflow cruft out of sight. Pull Requests Before we can accept a pull request from you, you'll need to sign a [[Contributor License Agreement (CLA)|Contributor-License-Agreement]]. It is an automated process and you only need to do it once. To enable us to quickly review and accept your pull requests, always create one pull request per issue and link the issue in the pull request . Never merge multiple requests in one unless they have the same root cause. Be sure to follow our [[Coding Guidelines|Coding-Guidelines]] and keep code changes as small as possible. Avoid pure formatting changes to code that has not been modified otherwise. Pull requests should contain tests whenever possible. Introducing usage of new Electron API with a PR A pull request that depends on Electron API that VS Code is currently not using comes with a certain risk and maybe rejected. Whenever we update Electron, there is a chance that less popular Electron APIs break and it is very hard to find out upfront. Once a PR lands in VS Code, the role of maintaining the feature moves to the team and as such we have to follow up with upstream components to ensure the feature is still supported. As such, as a rule of thumb: * avoid Electron APIs and use web standards instead (this also ensures that your feature is supported in our web client) * if you must use Electron APIs, we require a unit test at https://github.com/atom/electron so that we protect against future breakage. Where to Contribute Check out the full issues list for a list of all potential areas for contributions. Note that just because an issue exists in the repository does not mean we will accept a contribution to the core editor for it. There are several reasons we may not accept a pull request like: Performance - One of Visual Studio Code's core values is to deliver a lightweight code editor, that means it should perform well in both real and perceived performance. User experience - Since we want to deliver a lightweight code editor, the UX should feel lightweight as well and not be cluttered. Most changes to the UI should go through the issue owner and/or the UX team. Architectural - The team and/or feature owner needs to agree with any architectural impact a change may make. Things like new extension APIs must be discussed with and agreed upon by the feature owner. To improve the chances to get a pull request merged you should select an issue that is labelled with the help-wanted or bug labels. If the issue you want to work on is not labelled with help-wanted or bug , you can start a conversation with the issue owner asking whether an external contribution will be considered. To avoid multiple pull requests resolving the same issue, let others know you are working on it by saying so in a comment. Spell check errors Pull requests that fix spell check errors in translatable strings (strings in nls.localize(...) calls) are welcomed but please make sure it doesn't touch multiple feature areas , otherwise it will be difficult to review. Pull requests only fixing spell check errors in source code are not recommended. Packaging VS Code can be packaged for the following platforms: win32-ia32 | win32-x64 | darwin | linux-ia32 | linux-x64 | linux-arm These gulp tasks are available: vscode-[platform] : Builds a packaged version for [platform] . vscode-[platform]-min : Builds a packaged and minified version for [platform] . See also: Cross-Compiling for Debian-based Linux Suggestions We're also interested in your feedback for the future of VS Code. You can submit a suggestion or feature request through the issue tracker. To make this process more effective, we're asking that these include more information to help define them more clearly. Translations We appreciate your localization contributions, either by providing new translations, voting on translations, or suggesting process improvements. We take translations through the Transifex service, not through the vscode repo. See our localization site to get started. Discussion Etiquette In order to keep the conversation clear and transparent, please limit discussion to English and keep things on topic with the issue. Be considerate to others and try to be courteous and professional at all times.","title":"How to Contribute"},{"location":"How-to-Contribute/#contributing-to-visual-studio-code","text":"There are many ways to contribute to the Visual Studio Code project: logging bugs, submitting pull requests, reporting issues, and creating suggestions. After cloning and building the repo, check out the issues list . Issues labeled help wanted are good issues to submit a PR for. Issues labeled good first issue are great candidates to pick up if you are in the code for the first time. If you are contributing significant changes, please discuss with the assignee of the issue first before starting to work on the issue.","title":"Contributing to Visual Studio Code"},{"location":"How-to-Contribute/#prerequisites","text":"In order to download necessary tools, clone the repository, and install dependencies via yarn you need network access. You'll need the following tools: Git Node.JS , x64 , version >= 10.x , <= 12.x Yarn , follow the installation guide Python , at least version 2.7 (version 3 is not supported) Note: Python 2.7 will be automatically installed for Windows users through installing windows-build-tools npm module (see below) A C/C++ compiler tool chain for your platform: Windows Set a PYTHON environment variable pointing to your python.exe . E.g.: C:\\Python27\\python.exe Install a compiler for the native modules VS Code is depending on Option 1 (recommended): Use Windows Build Tools npm module Start Powershell as Administrator and install Windows Build Tools npm module ( documentation ). npm install --global windows-build-tools --vs2015 Note: The --debug flag is helpful if you encounter any problems during installation. Note: if you encounter an error The build tools for v141 (Platform Toolset = 'v141') cannot be found.\" you might have a version of Visual Studio installed. Either uninstall that version or make sure to have VC++ 2015.3 v14.00 (v140) toolset for desktop installed (see below) - Option 2: Use Visual Studio 2017 - Install Visual Studio 2017 Community Edition - Select Desktop Development with C++ - Select VC++ 2015.3 v14.00 (v140) toolset for desktop on the right hand side Note: if you encounter an error The build tools for v141 (Platform Toolset = 'v141') cannot be found.\" make sure you installed the VC++ 2015.3 v14.00 (v140) toolset for desktop from the previous step - Restart your computer - Warning: Make sure your profile path only contains ASCII letters, e.g. John , otherwise it can lead to node-gyp usage problems (nodejs/node-gyp/issues#297) - Note : Building and debugging via the Windows subsystem for Linux (WSL) is currently not supported. macOS Xcode and the Command Line Tools, which will install gcc and the related toolchain containing make Run xcode-select --install to install the Command Line Tools Linux make pkg-config GCC or another compile toolchain native-keymap needs libx11-dev and libxkbfile-dev . On Debian-based Linux: sudo apt-get install libx11-dev libxkbfile-dev On Red Hat-based Linux: sudo yum install libX11-devel.x86_64 libxkbfile-devel.x86_64 # or .i686 . keytar needs libsecret-1-dev . On Debian-based Linux: sudo apt-get install libsecret-1-dev . On Red Hat-based Linux: sudo yum install libsecret-devel . Building deb and rpm packages requires fakeroot and rpm , run: sudo apt-get install fakeroot rpm Install and build all of the dependencies using Yarn : cd vscode yarn","title":"Prerequisites"},{"location":"How-to-Contribute/#troubleshooting","text":"In case of issues, try deleting the contents of ~/.node-gyp first and then run yarn cache clean and then try again. If you are on Windows or Linux 64 bit systems and would like to compile to 32 bit, you'll need to set the npm_config_arch environment variable to ia32 before running yarn . This will compile all native node modules for a 32 bit architecture. Similarly, when cross-compiling for ARM, set npm_config_arch to arm . Note: For more information on how to install NPM modules globally on UNIX systems without resorting to sudo , refer to this guide . If you have Visual Studio 2019 installed, you may face issues when using the default version of node-gyp. If you have Visual Studio 2019 installed, you may need to follow the solutions here","title":"Troubleshooting"},{"location":"How-to-Contribute/#build-and-run","text":"If you want to understand how VS Code works or want to debug an issue, you'll want to get the source, build it, and run the tool locally.","title":"Build and Run"},{"location":"How-to-Contribute/#getting-the-sources","text":"First, fork the VS Code repository so that you can make a pull request. Then, clone your fork locally: git clone https://github.com/<<<your-github-account>>>/vscode.git Occasionally you will want to merge changes in the upstream repository (the official code repo) with your fork. cd vscode git checkout master git pull https://github.com/microsoft/vscode.git master Manage any merge conflicts, commit them, and then push them to your fork.","title":"Getting the sources"},{"location":"How-to-Contribute/#build","text":"Go into vscode and start the TypeScript incremental builder: cd vscode yarn watch \ud83d\udc49 Note: If you are running Windows and have installed Visual Studio 2017 as your build tool, you need to open x64 Native Tools Command Prompt for VS 2017 . Do not confuse it with VS2015 x64 Native Tools Command Prompt , if installed. The incremental builder will do an initial full build and will display a message that includes the phrase \"Finished compilation\" once the initial build is complete. The builder will then continue to run in the terminal. It will watch for file changes and compile those changes incrementally, giving you a fast, iterative coding experience. \ud83d\udc49 Tip! Linux users may hit a ENOSPC error when running yarn run watch , to get around this follow instructions in the Common Questions . \ud83d\udc49 Tip! Open VS Code on the folder where you have cloned the vscode repository and press CMD+SHIFT+B ( CTRL+SHIFT+B on Windows, Linux) to start the builder. To view the build output open the Output stream by pressing CMD+SHIFT+U .","title":"Build"},{"location":"How-to-Contribute/#errors-and-warnings","text":"Errors and warnings will show in the console while developing VS Code. If you use VS Code to develop VS Code, errors and warnings are shown in the status bar at the bottom left of the editor. You can view the error list using View | Errors and Warnings or pressing CMD+P and then ! . \ud83d\udc49 Tip! You don't need to stop and restart the development version of VS Code after each change. You can just execute Reload Window from the command palette. We like to assign the keyboard shortcut CMD+R ( CTRL+R on Windows, Linux) to this command.","title":"Errors and Warnings"},{"location":"How-to-Contribute/#run","text":"To test the changes you launch a development version of VS Code on the workspace vscode , which you are currently editing. macOS and Linux ./scripts/code.sh Windows .\\scripts\\code.bat Web (Chromium, Firefox or Safari only) yarn web You can use --port , --host and --scheme to further instruct the simple server that runs for the web version about your environment (e.g. if you want to test the web version over a network). You can identify the development version of VS Code (\"Code - OSS\") by the following icon in the Dock or Taskbar: \ud83d\udc49 Tip! If you receive an error stating that the app is not a valid Electron app, it probably means you didn't run yarn watch first.","title":"Run"},{"location":"How-to-Contribute/#debugging","text":"VS Code has a multi-process architecture and your code is executed in different processes. The render process runs the UI code inside the Shell window. To debug code running in the render you can either use VS Code or the Chrome Developer Tools.","title":"Debugging"},{"location":"How-to-Contribute/#using-vs-code","text":"Install the Debugger for Chrome extension. This extension will let you attach to and debug client side code running in Chrome. Open the vscode repository folder Choose the Launch VS Code launch configuration from the launch dropdown in the Debug viewlet and press F5 .","title":"Using VS Code"},{"location":"How-to-Contribute/#using-the-chrome-developer-tools","text":"Run the Developer: Toggle Developer Tools command from the Command Palette in your development instance of VS Code to launch the Chrome tools. It's also possible to debug the released versions of VS Code, since the sources link to sourcemaps hosted online. The extension host process runs code implemented by a plugin. To debug extensions (including those packaged with VS Code) which run in the extension host process, you can use VS Code itself. Switch to the Debug viewlet, choose the Attach to Extension Host configuration, and press F5 . The search process can be debugged, but must first be started. Before attempting to attach, start a search by pressing CMD+P ( CTRL+P on Windows), otherwise attaching will fail and time out.","title":"Using the Chrome Developer Tools"},{"location":"How-to-Contribute/#automated-testing","text":"Run the unit tests directly from a terminal by running ./scripts/test.sh from the vscode folder ( scripts\\test on Windows). The test README has complete details on how to run and debug tests, as well as how to produce coverage reports. We also have automated UI tests. The smoke test README has all the details.","title":"Automated Testing"},{"location":"How-to-Contribute/#unit-testing","text":"Run the tests directly from a terminal by running ./scripts/test.sh from the vscode folder ( scripts\\test on Windows). The test README has complete details on how to run and debug tests, as well as how to produce coverage reports.","title":"Unit Testing"},{"location":"How-to-Contribute/#linting","text":"We use tslint for linting our sources. You can run tslint across the sources by calling gulp tslint from a terminal or command prompt. You can also run gulp tslint as a VS Code task by pressing CMD+P ( CTRL+P on Windows) and entering task tslint . Warnings from tslint show up in the Errors and Warnings quick box and you can navigate to them from inside VS Code. To lint the source as you make changes you can install the tslint extension .","title":"Linting"},{"location":"How-to-Contribute/#extensions","text":"The Visual Studio Marketplace is not available from the vscode open source builds. If you need to use or debug an extension you can check to see if the extension author publishes builds in their repository (check the Builds page) or if it is open source you can clone and build the extension locally. Once you have the .VSIX, you can \"side load\" the extension either through the command line or using Install from VSIX command in the Extensions View command drop-down ( see more on command line extension management).","title":"Extensions"},{"location":"How-to-Contribute/#work-branches","text":"Even if you have push rights on the Microsoft/vscode repository, you should create a personal fork and create feature branches there when you need them. This keeps the main repository clean and your personal workflow cruft out of sight.","title":"Work Branches"},{"location":"How-to-Contribute/#pull-requests","text":"Before we can accept a pull request from you, you'll need to sign a [[Contributor License Agreement (CLA)|Contributor-License-Agreement]]. It is an automated process and you only need to do it once. To enable us to quickly review and accept your pull requests, always create one pull request per issue and link the issue in the pull request . Never merge multiple requests in one unless they have the same root cause. Be sure to follow our [[Coding Guidelines|Coding-Guidelines]] and keep code changes as small as possible. Avoid pure formatting changes to code that has not been modified otherwise. Pull requests should contain tests whenever possible.","title":"Pull Requests"},{"location":"How-to-Contribute/#introducing-usage-of-new-electron-api-with-a-pr","text":"A pull request that depends on Electron API that VS Code is currently not using comes with a certain risk and maybe rejected. Whenever we update Electron, there is a chance that less popular Electron APIs break and it is very hard to find out upfront. Once a PR lands in VS Code, the role of maintaining the feature moves to the team and as such we have to follow up with upstream components to ensure the feature is still supported. As such, as a rule of thumb: * avoid Electron APIs and use web standards instead (this also ensures that your feature is supported in our web client) * if you must use Electron APIs, we require a unit test at https://github.com/atom/electron so that we protect against future breakage.","title":"Introducing usage of new Electron API with a PR"},{"location":"How-to-Contribute/#where-to-contribute","text":"Check out the full issues list for a list of all potential areas for contributions. Note that just because an issue exists in the repository does not mean we will accept a contribution to the core editor for it. There are several reasons we may not accept a pull request like: Performance - One of Visual Studio Code's core values is to deliver a lightweight code editor, that means it should perform well in both real and perceived performance. User experience - Since we want to deliver a lightweight code editor, the UX should feel lightweight as well and not be cluttered. Most changes to the UI should go through the issue owner and/or the UX team. Architectural - The team and/or feature owner needs to agree with any architectural impact a change may make. Things like new extension APIs must be discussed with and agreed upon by the feature owner. To improve the chances to get a pull request merged you should select an issue that is labelled with the help-wanted or bug labels. If the issue you want to work on is not labelled with help-wanted or bug , you can start a conversation with the issue owner asking whether an external contribution will be considered. To avoid multiple pull requests resolving the same issue, let others know you are working on it by saying so in a comment.","title":"Where to Contribute"},{"location":"How-to-Contribute/#spell-check-errors","text":"Pull requests that fix spell check errors in translatable strings (strings in nls.localize(...) calls) are welcomed but please make sure it doesn't touch multiple feature areas , otherwise it will be difficult to review. Pull requests only fixing spell check errors in source code are not recommended.","title":"Spell check errors"},{"location":"How-to-Contribute/#packaging","text":"VS Code can be packaged for the following platforms: win32-ia32 | win32-x64 | darwin | linux-ia32 | linux-x64 | linux-arm These gulp tasks are available: vscode-[platform] : Builds a packaged version for [platform] . vscode-[platform]-min : Builds a packaged and minified version for [platform] . See also: Cross-Compiling for Debian-based Linux","title":"Packaging"},{"location":"How-to-Contribute/#suggestions","text":"We're also interested in your feedback for the future of VS Code. You can submit a suggestion or feature request through the issue tracker. To make this process more effective, we're asking that these include more information to help define them more clearly.","title":"Suggestions"},{"location":"How-to-Contribute/#translations","text":"We appreciate your localization contributions, either by providing new translations, voting on translations, or suggesting process improvements. We take translations through the Transifex service, not through the vscode repo. See our localization site to get started.","title":"Translations"},{"location":"How-to-Contribute/#discussion-etiquette","text":"In order to keep the conversation clear and transparent, please limit discussion to English and keep things on topic with the issue. Be considerate to others and try to be courteous and professional at all times.","title":"Discussion Etiquette"},{"location":"IME-Test/","text":"Input method smoke test. VS Code is powered by Monaco , a browser based code editor which supports IE 9/10/11, Edge, Chrome, Firefox, Safari and Opera, so when we make changes to the editor part, we should make sure it still works on all browsers Monaco support. The golden standard is Word Table of Contents [Windows/Mac] Japanese [Windows] Korean [Windows] Vietnamese with UniKey [Windows] Chinese [Windows] Sogou pinyin Chinese input method [Mac] Zhuyin Input Method (Chinese) [Linux] Japanese [Linux] Korean (Hangul) [Linux] Chinese (Pinyin) [Linux] Chinese (Sogou Pinyin) [Windows/Mac] Japanese Add the Japanese input method Windows: Settings > Time & Language > Region & language > Add a language > Japanese Mac: Settings > Keyboard > Input Sources > Add a language > Japanese Focus VS Code and switch OS input method to Japanese and choose Hiragana: Windows: Mac: Choose Hiragana in the menu bar Type the following words: sennsei or konnichiha or mikann followed by the enter key. Here is how Word looks like doing this: sennsei should result in \"\u305b\u3093\u305b\u3044\" or \"\u5148\u751f\" konnichiha should result in \"\u3053\u3093\u3044\u3061\u306f\" mikann should result in \"\u307f\u304b\u3093\" or \"\u6a58\" After typing some Japanese words, try to type space or enter key a few times to see if the composition works correctly. [Windows] Korean Add the Korean input method Settings > Time & Language > Region & language > Add a language > Korean Focus VS Code and switch OS input method to Korean and choose Hangul: Type gksrmf and press space. Here is how Word looks like doing this (it should be \"\ud55c\uae00\"): Type dkssudgktpdy in a new file. Here is how Word looks like doing this: Type dks , it should be read \uc548 . Now backspace should result in \uc544 , backspace again should result in \u3147 [Windows] Vietnamese with UniKey Download and Run UniKey Click the button with a down arrow: Get the following settings: Focus VS Code and click once UniKey's system tray entry (next to the date) to toggle on Vietnamese mode (get it to be a V): Type Tooi => it should transform to => T\u00f4i. Here is how Word looks like doing this: [Windows] Chinese Add the Chinese (Simplified) input method Settings > Time & Language > Region & language > Add a language > Chinese (Simplified) Focus VS Code and switch OS input method to Chinese and choose Chinese mode and make sure the input method's name is Microsoft Pinyin: Type . or , in full width form. They should be typed in immediately. Here is how Word looks like doing this: Type ni press Space and then hao and press Space . They should be typed in immediately. Here is how Word looks like doing this: Type hazni press Space . It should result into \u54c8\u795d\u4f60 or \u6c49\u5b50 or \u54c8\u5b50\u4f60 . The result might differ due to different implementation of the algorithm the IME uses, just make sure it's the same as what you get in Notepad or whatever. Type a and press space key twice. The result should be \u554a (Please note it ends with a single space)\u3002 -- [Windows] Sogou pinyin Chinese input method Install Sogou pinyin Chinese input method Download Sogou pinyin Chinese input method from this link Double click downloaded install exe Click YES if UAC dialog show Click Install immediately in the install UI Wait for the process complete, UNCHECK the \"install the Sogou browser\" Uncheck all options, click finish Focus VS Code and switch OS input method to Chinese and choose Chinese mode and make sure the input method's name is Sogou Pinyin: Type ni press Space and then hao and press Space . They should be typed in immediately. Here is how Word looks like doing this: It should result into \u4f60\u597d [Mac] Zhuyin Input Method (Chinese) System Preferences > Keyboard > Input Sources > Add > Chinese, Tranditional > Zhuyin Focus VS Code and switch OS input method to Zhuyin (press Command + space) Type su3cl3 and press Enter. Here is how World looks like doing this (It should be \"\u4f60\u597d\") [Mac] The hold input method Long press e A pop-up should appear Choose a different variant, like an e with an accute accent [Mac] The emoji inserter [Linux] Japanese Use mozc . Ubuntu Follow this guide , from the Mozc section: sudo apt-get install ibus-mozc System Settings > Text Entry , add Japanese (Mozc)(IBus) to the list In the system menu bar, switch the input language to Mozc and the input mode to Hiragana Elementary OS http://elementaryos.stackexchange.com/questions/271/how-can-i-enable-japanese-input Test Input Output sennsei \"\u305b\u3093\u305b\u3044\" or \"\u5148\u751f\" konnichiha \"\u3053\u3093\u3044\u3061\u306f\" mikann \"\u307f\u304b\u3093\" or \"\u6a58\" [Linux] Korean Ubuntu Follow this guide to install and setup fcitx. Elementary OS Install fcitx: Follow instructions here Install Korean-Hangul support: sudo apt-get install fcitx-hangul Test Input Output gksrmf \"\ud55c\uae00\" [Linux] Chinese (Pinyin) Ubuntu Follow this guide to install and setup fcitx. Elementary OS Install fcitx: Follow instructions here Select Google Pinyin Test Input Output ni Space hao Space \"\u4f60\u597d\" [Linux] Chinese (Sogou Pinyin) Install fcitx as above Install the deb images (32/64 bit) from http://pinyin.sogou.com/linux/?r=pinyin Test Input Output ni Space hao Space \"\u4f60\u597d\" Content created from: * #1168 * #2250 * #2374 * #5615 * #7997 * #10937","title":"IME Test"},{"location":"IME-Test/#table-of-contents","text":"[Windows/Mac] Japanese [Windows] Korean [Windows] Vietnamese with UniKey [Windows] Chinese [Windows] Sogou pinyin Chinese input method [Mac] Zhuyin Input Method (Chinese) [Linux] Japanese [Linux] Korean (Hangul) [Linux] Chinese (Pinyin) [Linux] Chinese (Sogou Pinyin)","title":"Table of Contents"},{"location":"IME-Test/#windowsmac-japanese","text":"Add the Japanese input method Windows: Settings > Time & Language > Region & language > Add a language > Japanese Mac: Settings > Keyboard > Input Sources > Add a language > Japanese Focus VS Code and switch OS input method to Japanese and choose Hiragana: Windows: Mac: Choose Hiragana in the menu bar Type the following words: sennsei or konnichiha or mikann followed by the enter key. Here is how Word looks like doing this: sennsei should result in \"\u305b\u3093\u305b\u3044\" or \"\u5148\u751f\" konnichiha should result in \"\u3053\u3093\u3044\u3061\u306f\" mikann should result in \"\u307f\u304b\u3093\" or \"\u6a58\" After typing some Japanese words, try to type space or enter key a few times to see if the composition works correctly.","title":"[Windows/Mac] Japanese"},{"location":"IME-Test/#windows-korean","text":"Add the Korean input method Settings > Time & Language > Region & language > Add a language > Korean Focus VS Code and switch OS input method to Korean and choose Hangul: Type gksrmf and press space. Here is how Word looks like doing this (it should be \"\ud55c\uae00\"): Type dkssudgktpdy in a new file. Here is how Word looks like doing this: Type dks , it should be read \uc548 . Now backspace should result in \uc544 , backspace again should result in \u3147","title":"[Windows] Korean"},{"location":"IME-Test/#windows-vietnamese-with-unikey","text":"Download and Run UniKey Click the button with a down arrow: Get the following settings: Focus VS Code and click once UniKey's system tray entry (next to the date) to toggle on Vietnamese mode (get it to be a V): Type Tooi => it should transform to => T\u00f4i. Here is how Word looks like doing this:","title":"[Windows] Vietnamese with UniKey"},{"location":"IME-Test/#windows-chinese","text":"Add the Chinese (Simplified) input method Settings > Time & Language > Region & language > Add a language > Chinese (Simplified) Focus VS Code and switch OS input method to Chinese and choose Chinese mode and make sure the input method's name is Microsoft Pinyin: Type . or , in full width form. They should be typed in immediately. Here is how Word looks like doing this: Type ni press Space and then hao and press Space . They should be typed in immediately. Here is how Word looks like doing this: Type hazni press Space . It should result into \u54c8\u795d\u4f60 or \u6c49\u5b50 or \u54c8\u5b50\u4f60 . The result might differ due to different implementation of the algorithm the IME uses, just make sure it's the same as what you get in Notepad or whatever. Type a and press space key twice. The result should be \u554a (Please note it ends with a single space)\u3002 --","title":"[Windows] Chinese"},{"location":"IME-Test/#windows-sogou-pinyin-chinese-input-method","text":"Install Sogou pinyin Chinese input method Download Sogou pinyin Chinese input method from this link Double click downloaded install exe Click YES if UAC dialog show Click Install immediately in the install UI Wait for the process complete, UNCHECK the \"install the Sogou browser\" Uncheck all options, click finish Focus VS Code and switch OS input method to Chinese and choose Chinese mode and make sure the input method's name is Sogou Pinyin: Type ni press Space and then hao and press Space . They should be typed in immediately. Here is how Word looks like doing this: It should result into \u4f60\u597d","title":"[Windows] Sogou pinyin Chinese input method"},{"location":"IME-Test/#mac-zhuyin-input-method-chinese","text":"System Preferences > Keyboard > Input Sources > Add > Chinese, Tranditional > Zhuyin Focus VS Code and switch OS input method to Zhuyin (press Command + space) Type su3cl3 and press Enter. Here is how World looks like doing this (It should be \"\u4f60\u597d\")","title":"[Mac] Zhuyin Input Method (Chinese)"},{"location":"IME-Test/#mac-the-hold-input-method","text":"Long press e A pop-up should appear Choose a different variant, like an e with an accute accent","title":"[Mac] The hold input method"},{"location":"IME-Test/#mac-the-emoji-inserter","text":"","title":"[Mac] The emoji inserter"},{"location":"IME-Test/#linux-japanese","text":"Use mozc .","title":"[Linux] Japanese"},{"location":"IME-Test/#ubuntu","text":"Follow this guide , from the Mozc section: sudo apt-get install ibus-mozc System Settings > Text Entry , add Japanese (Mozc)(IBus) to the list In the system menu bar, switch the input language to Mozc and the input mode to Hiragana","title":"Ubuntu"},{"location":"IME-Test/#elementary-os","text":"http://elementaryos.stackexchange.com/questions/271/how-can-i-enable-japanese-input","title":"Elementary OS"},{"location":"IME-Test/#test","text":"Input Output sennsei \"\u305b\u3093\u305b\u3044\" or \"\u5148\u751f\" konnichiha \"\u3053\u3093\u3044\u3061\u306f\" mikann \"\u307f\u304b\u3093\" or \"\u6a58\"","title":"Test"},{"location":"IME-Test/#linux-korean","text":"","title":"[Linux] Korean"},{"location":"IME-Test/#ubuntu_1","text":"Follow this guide to install and setup fcitx.","title":"Ubuntu"},{"location":"IME-Test/#elementary-os_1","text":"Install fcitx: Follow instructions here Install Korean-Hangul support: sudo apt-get install fcitx-hangul","title":"Elementary OS"},{"location":"IME-Test/#test_1","text":"Input Output gksrmf \"\ud55c\uae00\"","title":"Test"},{"location":"IME-Test/#linux-chinese-pinyin","text":"","title":"[Linux] Chinese (Pinyin)"},{"location":"IME-Test/#ubuntu_2","text":"Follow this guide to install and setup fcitx.","title":"Ubuntu"},{"location":"IME-Test/#elementary-os_2","text":"Install fcitx: Follow instructions here Select Google Pinyin","title":"Elementary OS"},{"location":"IME-Test/#test_2","text":"Input Output ni Space hao Space \"\u4f60\u597d\"","title":"Test"},{"location":"IME-Test/#linux-chinese-sogou-pinyin","text":"Install fcitx as above Install the deb images (32/64 bit) from http://pinyin.sogou.com/linux/?r=pinyin","title":"[Linux] Chinese (Sogou Pinyin)"},{"location":"IME-Test/#test_3","text":"Input Output ni Space hao Space \"\u4f60\u597d\" Content created from: * #1168 * #2250 * #2374 * #5615 * #7997 * #10937","title":"Test"},{"location":"Insiders-Release-Notes/","text":"Insider Release Notes The Insiders build is designed for early adopters wanting a nightly release. In fact, Insiders builds are the builds we use internally to develop VS Code. Over the course of an iteration the contents of the Insiders builds will change frequently. Therefore, we do not produce a formal set of Release Notes. Instead, the following queries will help you explore the contents of a nightly build: Commit log Recently closed issues Current month's iteration plan Current month's Release Notes on GitHub","title":"Insiders Release Notes"},{"location":"Insiders-Release-Notes/#insider-release-notes","text":"The Insiders build is designed for early adopters wanting a nightly release. In fact, Insiders builds are the builds we use internally to develop VS Code. Over the course of an iteration the contents of the Insiders builds will change frequently. Therefore, we do not produce a formal set of Release Notes. Instead, the following queries will help you explore the contents of a nightly build: Commit log Recently closed issues Current month's iteration plan Current month's Release Notes on GitHub","title":"Insider Release Notes"},{"location":"Issue-Grooming/","text":"Our GitHub community is one of the biggest reasons of our success. Every single day, you create between 50 - 250 issues with inspiring ideas for new functionality, you tell us what works as expected and what doesn't, and you tell us how to improve what's already there. We appreciate every single issue you create. Thank you! Despite our best efforts to deal with all of those issues, over the course of time we fall behind. When you look at an issue it's sometimes unclear whether or not we intent to provide the functionality you propose, whether or not we fix the bug, whether or not the issue is a duplicate of another one. In order to restore a reasonable level of clarity we annually perform a House Keeping Iteration in which we go through all open issues. We categorize, label, fix, and close issues. This results in a wave of notification which is hard to deal with (our apologies) but in the end there is better understanding of what will happen to your ideas. Below are more details about what we do during a House Keeping Iteration. Closing Issues We close issues for the following reasons: Reason Label The issue is obsolete or already fixed. We didn't get the information we need within 7 days. needs more info It's a duplicate of another issue. *duplicate The feature request is best implemented by an extension. *extension-candidate What is described is the designed behavior. *as-designed The issue was caused by an extension. *caused-by-extension The issue is a developer question. *dev-question The issue is a user question. *question The issue is off-topic, does not contain any actionable information or was unintended. invalid Given the information we have we can't reproduce the issue. *not-reproducible The feature request is out of scope. (See below ) *out-of-scope We close issues with the help of a bot that responds to a particular comment such as /duplicate of #1234 or to assigning a label with adding a pre-canned comment to the issue and closing the issue. Out-of-Scope Feature Requests Feature requests like all issues are a means of communication between us and our community as well as among members of the community. Thus, in principle, we could keep all feature requests open no matter what will happen to the feature they describe. But this makes it hard for you to understand what has realistic chances to ever make it into the repository. We therefore close feature requests we won't address. If you are the author of a feature request you might not like that we close your issue. It might even feel like a slap in your face. We understand that. All of us have been there as well - in this project or others we have contributed to. So, be assured, we love all of your input. Don't take personal offense when we decide to close your issue . If you feel your feature request deserves to stay open, improve your use case or gather more up-votes. Then ping us and we'll consider reopening the feature request. Here are the criteria we use to make the decision about closing a feature request: 1. Does the functionality described in the feature request have any reasonable chance to be implemented in the next 24 months? 24 months is longer than our roadmap which outlines the next 6-12 months. Thus, there is some crystal ball reading on our part, and we'll most likely keep more feature requests open than what we can accomplish in 24 months. 2. Has the community at large expressed interest in this functionality? I.e. has it gathered more than 10 up-votes or more than 10 comments? This criterion alone covers more than 650 of the 2850 open feature requests as of right now, October 9 th , 2019. 3. Do we think the feature request is bold and forward looking and would we like to see it be tackled at some point even if it's further out than 24 months? (Clearly, this one is the most subjective criterion.) If the answer to any of the three questions is yes then we ask about affordability: Can our team afford to implement the feature? I.e. are the costs to implement the functionality reasonable compared to the size of our team? In summary, a feature needs to pass one of 1-3 and 4. Otherwise, we'll close it as out of scope . We'll unsubscribe from these issues to reduce the overall number of issue notifications we receive every day. Won't fix Bugs We close bugs as won't fix if there is a negative cost-benefit balance. It's not that we don't care about users who are affected by an issue but, for example, if the fix is so complex that despite all of our tests we risk regressions for many users, fixing is not a reasonable choice. When we close a bug as won't fix we'll make our case why we do so. Upstream Issue We label some issues as upstream . Upstream means that the issue is in a package or library that we consume and that we cannot fix independently. We close an upstream issue if we can establish a clear traceability link between the issue in our repository and an issue in the issue tracker of the package or library. In some cases this is not possible, for example, we might have identified an issue as a Chromium issue but Chromium does not accept the issue yet because the repro case is too complex. Categorizing Issues Each issue must have a type label. Most type labels are grey, some are yellow. Bugs are grey with a touch of red. Type Description bug the implementation of a feature is not correct feature-request request for a new feature under-discussion not decided whether the issue is a bug or feature debt improve the implementation/architecture needs more info not possible to assign a type label due to missing information question we should direct questions to SO upstream an issue used to track an issue in an upstream component electron an issue with electron engineering issues related to our engineering system or our processes Labeling Issues We assign the important label to issues that result in data loss a breakage of extension critical security, performance issues UI issue that makes a feature unusable We label issues that the community can take up as help-wanted . If issues are suitable for beginners we may add the good-first-issue label and we add code pointers that help beginners to get started with a PR. Fixing Issues We assign bugs that we plan to fix during the grooming to the milestone of the current iteration.","title":"Issue Grooming"},{"location":"Issue-Grooming/#closing-issues","text":"We close issues for the following reasons: Reason Label The issue is obsolete or already fixed. We didn't get the information we need within 7 days. needs more info It's a duplicate of another issue. *duplicate The feature request is best implemented by an extension. *extension-candidate What is described is the designed behavior. *as-designed The issue was caused by an extension. *caused-by-extension The issue is a developer question. *dev-question The issue is a user question. *question The issue is off-topic, does not contain any actionable information or was unintended. invalid Given the information we have we can't reproduce the issue. *not-reproducible The feature request is out of scope. (See below ) *out-of-scope We close issues with the help of a bot that responds to a particular comment such as /duplicate of #1234 or to assigning a label with adding a pre-canned comment to the issue and closing the issue.","title":"Closing Issues"},{"location":"Issue-Grooming/#out-of-scope-feature-requests","text":"Feature requests like all issues are a means of communication between us and our community as well as among members of the community. Thus, in principle, we could keep all feature requests open no matter what will happen to the feature they describe. But this makes it hard for you to understand what has realistic chances to ever make it into the repository. We therefore close feature requests we won't address. If you are the author of a feature request you might not like that we close your issue. It might even feel like a slap in your face. We understand that. All of us have been there as well - in this project or others we have contributed to. So, be assured, we love all of your input. Don't take personal offense when we decide to close your issue . If you feel your feature request deserves to stay open, improve your use case or gather more up-votes. Then ping us and we'll consider reopening the feature request. Here are the criteria we use to make the decision about closing a feature request: 1. Does the functionality described in the feature request have any reasonable chance to be implemented in the next 24 months? 24 months is longer than our roadmap which outlines the next 6-12 months. Thus, there is some crystal ball reading on our part, and we'll most likely keep more feature requests open than what we can accomplish in 24 months. 2. Has the community at large expressed interest in this functionality? I.e. has it gathered more than 10 up-votes or more than 10 comments? This criterion alone covers more than 650 of the 2850 open feature requests as of right now, October 9 th , 2019. 3. Do we think the feature request is bold and forward looking and would we like to see it be tackled at some point even if it's further out than 24 months? (Clearly, this one is the most subjective criterion.) If the answer to any of the three questions is yes then we ask about affordability: Can our team afford to implement the feature? I.e. are the costs to implement the functionality reasonable compared to the size of our team? In summary, a feature needs to pass one of 1-3 and 4. Otherwise, we'll close it as out of scope . We'll unsubscribe from these issues to reduce the overall number of issue notifications we receive every day.","title":"Out-of-Scope Feature Requests"},{"location":"Issue-Grooming/#wont-fix-bugs","text":"We close bugs as won't fix if there is a negative cost-benefit balance. It's not that we don't care about users who are affected by an issue but, for example, if the fix is so complex that despite all of our tests we risk regressions for many users, fixing is not a reasonable choice. When we close a bug as won't fix we'll make our case why we do so.","title":"Won't fix Bugs"},{"location":"Issue-Grooming/#upstream-issue","text":"We label some issues as upstream . Upstream means that the issue is in a package or library that we consume and that we cannot fix independently. We close an upstream issue if we can establish a clear traceability link between the issue in our repository and an issue in the issue tracker of the package or library. In some cases this is not possible, for example, we might have identified an issue as a Chromium issue but Chromium does not accept the issue yet because the repro case is too complex.","title":"Upstream Issue"},{"location":"Issue-Grooming/#categorizing-issues","text":"Each issue must have a type label. Most type labels are grey, some are yellow. Bugs are grey with a touch of red. Type Description bug the implementation of a feature is not correct feature-request request for a new feature under-discussion not decided whether the issue is a bug or feature debt improve the implementation/architecture needs more info not possible to assign a type label due to missing information question we should direct questions to SO upstream an issue used to track an issue in an upstream component electron an issue with electron engineering issues related to our engineering system or our processes","title":"Categorizing Issues"},{"location":"Issue-Grooming/#labeling-issues","text":"We assign the important label to issues that result in data loss a breakage of extension critical security, performance issues UI issue that makes a feature unusable We label issues that the community can take up as help-wanted . If issues are suitable for beginners we may add the good-first-issue label and we add code pointers that help beginners to get started with a PR.","title":"Labeling Issues"},{"location":"Issue-Grooming/#fixing-issues","text":"We assign bugs that we plan to fix during the grooming to the milestone of the current iteration.","title":"Fixing Issues"},{"location":"Issue-Tracking/","text":"This page describes how we track issues in the vscode repository. Popular queries Global Inbox Bugs to be Verified - VS Code only Verification Needed - VS Code only Inbox tracking and Issue triage New issues or pull requests submitted by the community are triaged by a team member. The team rotates the inbox tracker on a weekly basis. A bot assists the inbox tracker. Inbox Tracking The inbox tracker is responsible for the global inbox containing all open issues and pull requests that - are neither feature requests nor test plan items nor plan items and - have no owner assignment . The inbox tracker may perform any step described in our issue triaging documentation but it's main responsibility is to route issues to the actual feature area owner. Feature area owners track the feature area inbox containing all open issues and pull requests that - are personally assigned to them and are not assigned to any milestone - are labeled with their feature area label and are not assigned to any milestone. This secondary triage may involve any of the steps described in our issue triaging documentation and results in a fully triaged or closed issue. Ongoing Issue Management The details can be found in our issue triaging documentation . Planning During the iteration planning process we use the following sources as input: - Review feature requests with many reactions. Issues we plan to work on during an iteration are assigned to the current milestone. Filing bugs as a development team member When team members files a bug they perform steps of the inbox tracker for the issue they filed. Therefore bugs filed by the development team do not need to be triaged by the global inbox tracker. Verification Issues need to be verified. Verification is a service that you request from others either implicitly with the bug -label or explicitly with the verification-needed -label. Find issue that are to be verified with these queries bugs to be verified, VS Code verification needed, VS Code bugs to be verified, all GitHub projects verification needed, all GitHub projects Follow the these rules: Query for issues that are to be verified Start with issues you created (filter by Author ) but didn't close Pick an item Start with setting verified -label (prevents duplicate verifications) Verify the issue If you cannot verify the issue due to missing or hard-to-understand repro steps, add a verification-steps-needed label and remove the verified label If the issue still shows, add the verification-found -label and remove the verified label Go back to #3 Consistent labels across vscode repositories Visual Studio Code consists of multiple repositories and we should use consistent work flows and labels across all our repositories. To establish consistent labels across all our repositories use the Label Manager tool. Consistent milestones across vscode repositories To enable planning across repositories all the Visual Studio Code related repositories need to define the same milestones. Iteration Planning We use issues for iteration plans. Iteration plans have a label iteration-plan with tasks [ ] for the different items. The individual items are tracked in existing issues (bugs, feature requests). If there is no existing issue then a new issue with the label plan-item is created. All our iteration plans can be found here","title":"Issue Tracking"},{"location":"Issue-Tracking/#popular-queries","text":"Global Inbox Bugs to be Verified - VS Code only Verification Needed - VS Code only","title":"Popular queries"},{"location":"Issue-Tracking/#inbox-tracking-and-issue-triage","text":"New issues or pull requests submitted by the community are triaged by a team member. The team rotates the inbox tracker on a weekly basis. A bot assists the inbox tracker.","title":"Inbox tracking and Issue triage"},{"location":"Issue-Tracking/#inbox-tracking","text":"The inbox tracker is responsible for the global inbox containing all open issues and pull requests that - are neither feature requests nor test plan items nor plan items and - have no owner assignment . The inbox tracker may perform any step described in our issue triaging documentation but it's main responsibility is to route issues to the actual feature area owner. Feature area owners track the feature area inbox containing all open issues and pull requests that - are personally assigned to them and are not assigned to any milestone - are labeled with their feature area label and are not assigned to any milestone. This secondary triage may involve any of the steps described in our issue triaging documentation and results in a fully triaged or closed issue.","title":"Inbox Tracking"},{"location":"Issue-Tracking/#ongoing-issue-management","text":"The details can be found in our issue triaging documentation .","title":"Ongoing Issue Management"},{"location":"Issue-Tracking/#planning","text":"During the iteration planning process we use the following sources as input: - Review feature requests with many reactions. Issues we plan to work on during an iteration are assigned to the current milestone.","title":"Planning"},{"location":"Issue-Tracking/#filing-bugs-as-a-development-team-member","text":"When team members files a bug they perform steps of the inbox tracker for the issue they filed. Therefore bugs filed by the development team do not need to be triaged by the global inbox tracker.","title":"Filing bugs as a development team member"},{"location":"Issue-Tracking/#verification","text":"Issues need to be verified. Verification is a service that you request from others either implicitly with the bug -label or explicitly with the verification-needed -label. Find issue that are to be verified with these queries bugs to be verified, VS Code verification needed, VS Code bugs to be verified, all GitHub projects verification needed, all GitHub projects Follow the these rules: Query for issues that are to be verified Start with issues you created (filter by Author ) but didn't close Pick an item Start with setting verified -label (prevents duplicate verifications) Verify the issue If you cannot verify the issue due to missing or hard-to-understand repro steps, add a verification-steps-needed label and remove the verified label If the issue still shows, add the verification-found -label and remove the verified label Go back to #3","title":"Verification"},{"location":"Issue-Tracking/#consistent-labels-across-vscode-repositories","text":"Visual Studio Code consists of multiple repositories and we should use consistent work flows and labels across all our repositories. To establish consistent labels across all our repositories use the Label Manager tool.","title":"Consistent labels across vscode repositories"},{"location":"Issue-Tracking/#consistent-milestones-across-vscode-repositories","text":"To enable planning across repositories all the Visual Studio Code related repositories need to define the same milestones.","title":"Consistent milestones across vscode repositories"},{"location":"Issue-Tracking/#iteration-planning","text":"We use issues for iteration plans. Iteration plans have a label iteration-plan with tasks [ ] for the different items. The individual items are tracked in existing issues (bugs, feature requests). If there is no existing issue then a new issue with the label plan-item is created. All our iteration plans can be found here","title":"Iteration Planning"},{"location":"Issues-Triaging/","text":"Triaging an issue is a multi-step process that is collaboratively performed by the inbox tracker, the feature area owners, and our issue bot. Triaging an issue usually takes around one business day but may take longer, for example, when the feature area owner is not around. Goal of triaging is to provide you with a clear understanding of what will happen to your issue. For example, after your feature request was triaged you know whether we plan to tackle the issue or whether we'll wait to hear what the broader community thinks about this request. From your perspective it's straightforward to understand whether or not your issue is triaged: Our Triaging Flow Below is the basic flow your issue goes through. At any step in the flow we may also close the issue or request more information. We omitted that from the flow chart to keep it as clean as possible. The chart uses three major states. They are easily identifiable: State What your GitHub issue looks like Closed matches the query is:closed Community Review matches the query milestone:\"Backlog Candidates\" Accepted has any milestone except Backlog Candidates In the rest of this document, we'll go into more detail about each of the activities of triaging and how we make decisions. Closing Issues We close issues for the following reasons: Reason Label The issue is obsolete or already fixed. We didn't get the information we need within 7 days. needs more info It's a duplicate of another issue. *duplicate The feature request is best implemented by an extension. *extension-candidate What is described is the designed behavior. *as-designed The issue was caused by an extension. *caused-by-extension The issue is a developer question. *dev-question The issue is a user question. *question The issue is not related to the goals of our project and/or therefore unactionable *off-topic The issue does not contain any valid or useful information or was unintended. invalid Given the information we have we can't reproduce the issue. *not-reproducible The feature request is out of scope. (See below ) *out-of-scope The issue is tracked in a repository we rely on. upstream-issue-linked , upstream We close issues with the help of a bot that responds to a particular comment such as /duplicate of #1234 or to assigning a label with adding a pre-canned comment to the issue and closing the issue. Requesting Information If an issue misses information that we need to understand the issue, we assign the needs more info label. We usually add the /needsMoreInfo comment to the issue which lets the bot add the label as well as a comment with links to documentation. If the issue is a performance issue we ask you to follow this documentation . The bot is monitoring all issues labeled needs more info . If we don't receive the needed information within 7 days the bot closes the issue. Categorizing Issues Each issue must have a type label. Most type labels are grey, some are yellow. Bugs are grey with a touch of red. Type Description needs more info not possible to assign a type label due to missing information; see above bug the implementation of a feature is not correct feature-request request for a new feature under-discussion not decided whether the issue is a bug or feature debt improve the implementation/architecture *question we should direct questions to StackOverflow upstream , upstream-issue-linked an issue used to track an issue in an upstream component electron an issue with electron engineering issues related to our engineering system or our processes We also use the following type labels, although they don't directly play a role in the triaging process as they are usually assigned to issues created by our team or by tooling. Type Description iteration-plan a plan tracking the work for an iteration iteration-plan-draft a draft of an iteration plan plan-item an issue to organize and structure planned work testplan-item an issue describing how to test a feature endgame-plan a plan tracking the endgame of an iteration perf-profile a issue representing a performance profile Assigning Feature Areas Each issue must have a feature area label. Feature area labels are dark blue. See the list of feature area labels here . Assigning a Milestone In addition to milestones representing our iterations and releases such as November 2019 , we have three milestones with special meaning: - Issues assigned to Backlog : Our team is in favor of implementing the feature request/fix the issue. The issue is not yet assigned to a concrete iteration. If and when a Backlog item is scheduled for a concrete iteration depends on how well the issue aligns with our Roadmap . We review and update our roadmap at least once every 12 months. The Backlog helps us shaping our Roadmap but it is not the only source of input. Therefore, some Backlog items will be closed as out-of-scope once it becomes clear that they do not align with our Roadmap. - Issues assigned to On Deck : Our team wants to implement the feature/fix the issue. The issue is on the short list to be assigned to a concrete iteration. Note: On Deck is used sparsely. More commonly, issues go from Backlog directly to concrete iterations. - Issues assigned to Backlog Candidates : Our team does not intend to implement the feature request/fix the issue but wants the community to weigh in before we make our final decision. See also Managing Feature Requests . Important Issues We assign the important label to issues that result in data loss a breakage of extension critical security, performance issues UI issue that makes a feature unusable Asking for Help We label ** Backlog **issues, particularly feature requests, that we encourage the community to take up with help-wanted . If issues are suitable for beginners we may add the good-first-issue label and we add code pointers that help beginners to get started with a PR. Sometime, we get issues that we can't or don't have the time to reproduce due to the complexity or time requirements of the setup but that we indeed suspect to be issues. We label those issues with investigation-wanted . What we are looking for is help in reproducing and analyzing the issue. In the best of all worlds we receive a PR from you. Please note, we only accept PRs for issues that are accepted, i.e. have a milestone assigned that is not Backlog Candidates . Type-specific Characteristics / Triaging Managing Feature Requests Feature requests like all issues are a means of communication between us and our community as well as among the members of the community. Thus, in principle, we could keep all feature requests open no matter what will happen to the feature they describe. Unfortunately, this makes it hard for you to understand what has realistic chances to ever make it into the repository. We therefore close feature requests we cannot address with out-of-scope while we assign feature requests we don't plan to address but want to give you time to weigh in to the Backlog Candidates milestone. If you are the author of a feature request you might not like that we close or don't plan to address your request. It might even feel like a slap in your face. We understand that. All of us have been there - in this project or others we have contributed to. So, be assured, we love all of your input. Don't take personal offense when we close or assign the Backlog Candidates milestone to your issue . If you feel your feature request deserves to stay open, improve your use case and ping us or gather more up-votes. This is our decision making tree. More details below. To put the diagram in words: Does the proposal match with our general product direction? For example, VS Code is a light-weight extensible text editor and as such we are not interested in turning it into a platform to implement a web browser. If the answer is no we close the issue as out-of-scope . Can our team afford to implement the feature? I.e. are the direct and the opportunity costs to implement the functionality and maintain it going forward reasonable compared to the size of our team? If the answer is no we close the issue as out-of-scope . Does the functionality described in the feature request have any reasonable chance to be implemented in the next 24 months? 24 months is longer than our roadmap which outlines the next 6-12 months. Thus, there is some crystal ball reading on our part, and we'll most likely keep more feature requests open than what we can accomplish in 24 months. If the answer is yes we assign the issue to the Backlog milestone. Do we think the feature request is bold and forward looking and would we like to see it be tackled at some point even if it's further out than 24 months? (Clearly, this is quite subjective.) If the answer is yes we assign the issue to the Backlog milestone. Has the community at large expressed interest in this functionality? I.e. has it gathered more than 20 up-votes. If the answer is yes we assign the issue to the Backlog otherwise the Backlog Candidates milestone. A bot monitors the issues assigned to Backlog Candidates . If a feature request surpasses the 20 up-votes, the bot removes the Backlog Candidates milestone and adds the Backlog milestone. If an issue is assigned to the Backlog Candidates milestone for more than 60 days, the bot will close the issue. Won't fix Bugs We close bugs as wont-fix if there is a negative cost-benefit balance. It's not that we don't care about users who are affected by an issue but, for example, if the fix is so complex that despite all of our tests we risk regressions for many users, fixing is not a reasonable choice. When we close a bug as wont-fix we'll make our case why we do so. Upstream Issue We label some issues as upstream . Upstream means that the issue is in a package or library that we consume and that we cannot fix independently. We close an upstream issue if we can establish a clear traceability link between the issue in our repository and an issue in the issue tracker of the package or library. In some cases this is not possible, for example, we might have identified an issue as a Chromium issue but Chromium does not accept the issue yet because the repro case is too complex.","title":"Issues Triaging"},{"location":"Issues-Triaging/#our-triaging-flow","text":"Below is the basic flow your issue goes through. At any step in the flow we may also close the issue or request more information. We omitted that from the flow chart to keep it as clean as possible. The chart uses three major states. They are easily identifiable: State What your GitHub issue looks like Closed matches the query is:closed Community Review matches the query milestone:\"Backlog Candidates\" Accepted has any milestone except Backlog Candidates In the rest of this document, we'll go into more detail about each of the activities of triaging and how we make decisions.","title":"Our Triaging Flow"},{"location":"Issues-Triaging/#closing-issues","text":"We close issues for the following reasons: Reason Label The issue is obsolete or already fixed. We didn't get the information we need within 7 days. needs more info It's a duplicate of another issue. *duplicate The feature request is best implemented by an extension. *extension-candidate What is described is the designed behavior. *as-designed The issue was caused by an extension. *caused-by-extension The issue is a developer question. *dev-question The issue is a user question. *question The issue is not related to the goals of our project and/or therefore unactionable *off-topic The issue does not contain any valid or useful information or was unintended. invalid Given the information we have we can't reproduce the issue. *not-reproducible The feature request is out of scope. (See below ) *out-of-scope The issue is tracked in a repository we rely on. upstream-issue-linked , upstream We close issues with the help of a bot that responds to a particular comment such as /duplicate of #1234 or to assigning a label with adding a pre-canned comment to the issue and closing the issue.","title":"Closing Issues"},{"location":"Issues-Triaging/#requesting-information","text":"If an issue misses information that we need to understand the issue, we assign the needs more info label. We usually add the /needsMoreInfo comment to the issue which lets the bot add the label as well as a comment with links to documentation. If the issue is a performance issue we ask you to follow this documentation . The bot is monitoring all issues labeled needs more info . If we don't receive the needed information within 7 days the bot closes the issue.","title":"Requesting Information"},{"location":"Issues-Triaging/#categorizing-issues","text":"Each issue must have a type label. Most type labels are grey, some are yellow. Bugs are grey with a touch of red. Type Description needs more info not possible to assign a type label due to missing information; see above bug the implementation of a feature is not correct feature-request request for a new feature under-discussion not decided whether the issue is a bug or feature debt improve the implementation/architecture *question we should direct questions to StackOverflow upstream , upstream-issue-linked an issue used to track an issue in an upstream component electron an issue with electron engineering issues related to our engineering system or our processes We also use the following type labels, although they don't directly play a role in the triaging process as they are usually assigned to issues created by our team or by tooling. Type Description iteration-plan a plan tracking the work for an iteration iteration-plan-draft a draft of an iteration plan plan-item an issue to organize and structure planned work testplan-item an issue describing how to test a feature endgame-plan a plan tracking the endgame of an iteration perf-profile a issue representing a performance profile","title":"Categorizing Issues"},{"location":"Issues-Triaging/#assigning-feature-areas","text":"Each issue must have a feature area label. Feature area labels are dark blue. See the list of feature area labels here .","title":"Assigning Feature Areas"},{"location":"Issues-Triaging/#assigning-a-milestone","text":"In addition to milestones representing our iterations and releases such as November 2019 , we have three milestones with special meaning: - Issues assigned to Backlog : Our team is in favor of implementing the feature request/fix the issue. The issue is not yet assigned to a concrete iteration. If and when a Backlog item is scheduled for a concrete iteration depends on how well the issue aligns with our Roadmap . We review and update our roadmap at least once every 12 months. The Backlog helps us shaping our Roadmap but it is not the only source of input. Therefore, some Backlog items will be closed as out-of-scope once it becomes clear that they do not align with our Roadmap. - Issues assigned to On Deck : Our team wants to implement the feature/fix the issue. The issue is on the short list to be assigned to a concrete iteration. Note: On Deck is used sparsely. More commonly, issues go from Backlog directly to concrete iterations. - Issues assigned to Backlog Candidates : Our team does not intend to implement the feature request/fix the issue but wants the community to weigh in before we make our final decision. See also Managing Feature Requests .","title":"Assigning a Milestone"},{"location":"Issues-Triaging/#important-issues","text":"We assign the important label to issues that result in data loss a breakage of extension critical security, performance issues UI issue that makes a feature unusable","title":"Important Issues"},{"location":"Issues-Triaging/#asking-for-help","text":"We label ** Backlog **issues, particularly feature requests, that we encourage the community to take up with help-wanted . If issues are suitable for beginners we may add the good-first-issue label and we add code pointers that help beginners to get started with a PR. Sometime, we get issues that we can't or don't have the time to reproduce due to the complexity or time requirements of the setup but that we indeed suspect to be issues. We label those issues with investigation-wanted . What we are looking for is help in reproducing and analyzing the issue. In the best of all worlds we receive a PR from you. Please note, we only accept PRs for issues that are accepted, i.e. have a milestone assigned that is not Backlog Candidates .","title":"Asking for Help"},{"location":"Issues-Triaging/#type-specific-characteristics-triaging","text":"","title":"Type-specific Characteristics / Triaging"},{"location":"Issues-Triaging/#managing-feature-requests","text":"Feature requests like all issues are a means of communication between us and our community as well as among the members of the community. Thus, in principle, we could keep all feature requests open no matter what will happen to the feature they describe. Unfortunately, this makes it hard for you to understand what has realistic chances to ever make it into the repository. We therefore close feature requests we cannot address with out-of-scope while we assign feature requests we don't plan to address but want to give you time to weigh in to the Backlog Candidates milestone. If you are the author of a feature request you might not like that we close or don't plan to address your request. It might even feel like a slap in your face. We understand that. All of us have been there - in this project or others we have contributed to. So, be assured, we love all of your input. Don't take personal offense when we close or assign the Backlog Candidates milestone to your issue . If you feel your feature request deserves to stay open, improve your use case and ping us or gather more up-votes. This is our decision making tree. More details below. To put the diagram in words: Does the proposal match with our general product direction? For example, VS Code is a light-weight extensible text editor and as such we are not interested in turning it into a platform to implement a web browser. If the answer is no we close the issue as out-of-scope . Can our team afford to implement the feature? I.e. are the direct and the opportunity costs to implement the functionality and maintain it going forward reasonable compared to the size of our team? If the answer is no we close the issue as out-of-scope . Does the functionality described in the feature request have any reasonable chance to be implemented in the next 24 months? 24 months is longer than our roadmap which outlines the next 6-12 months. Thus, there is some crystal ball reading on our part, and we'll most likely keep more feature requests open than what we can accomplish in 24 months. If the answer is yes we assign the issue to the Backlog milestone. Do we think the feature request is bold and forward looking and would we like to see it be tackled at some point even if it's further out than 24 months? (Clearly, this is quite subjective.) If the answer is yes we assign the issue to the Backlog milestone. Has the community at large expressed interest in this functionality? I.e. has it gathered more than 20 up-votes. If the answer is yes we assign the issue to the Backlog otherwise the Backlog Candidates milestone. A bot monitors the issues assigned to Backlog Candidates . If a feature request surpasses the 20 up-votes, the bot removes the Backlog Candidates milestone and adds the Backlog milestone. If an issue is assigned to the Backlog Candidates milestone for more than 60 days, the bot will close the issue.","title":"Managing Feature Requests"},{"location":"Issues-Triaging/#wont-fix-bugs","text":"We close bugs as wont-fix if there is a negative cost-benefit balance. It's not that we don't care about users who are affected by an issue but, for example, if the fix is so complex that despite all of our tests we risk regressions for many users, fixing is not a reasonable choice. When we close a bug as wont-fix we'll make our case why we do so.","title":"Won't fix Bugs"},{"location":"Issues-Triaging/#upstream-issue","text":"We label some issues as upstream . Upstream means that the issue is in a package or library that we consume and that we cannot fix independently. We close an upstream issue if we can establish a clear traceability link between the issue in our repository and an issue in the issue tracker of the package or library. In some cases this is not possible, for example, we might have identified an issue as a Chromium issue but Chromium does not accept the issue yet because the repro case is too complex.","title":"Upstream Issue"},{"location":"Iteration-Plans/","text":"December 2019 / January 2020 Iteration Plan Endgame: TBD November 2019 Iteration Plan Endgame October 2019 Iteration Plan Endgame September 2019 Iteration Plan Endgame August 2019 Iteration Plan Endgame July 2019 Iteration Plan Endgame June 2019 Iteration Plan Endgame May 2019 Iteration Plan Endgame April 2019 Iteration Plan Endgame March 2019 Iteration Plan Endgame February 2019 Iteration Plan Endgame December 2018 / January 2019 Iteration Plan Endgame November 2018 Iteration Plan Endgame October 2018 Iteration Plan Endgame September 2018 Iteration Plan Endgame August 2018 Iteration Plan Endgame July 2018 Iteration Plan Endgame June 2018 Iteration Plan Endgame May 2018 Iteration Plan Endgame April 2018 Iteration Plan Endgame March 2018 Iteration Plan Endgame February 2018 Iteration Plan Endgame January 2018 Iteration Plan Endgame November/December 2017 Iteration Plan Endgame October 2017 Iteration Plan Endgame September 2017 Iteration Plan Endgame August 2017 Iteration Plan Endgame July 2017 Iteration Plan Endgame June 2017 Iteration Plan Endgame May 2017 Iteration Plan Endgame April 2017 Iteration Plan Endgame March 2017 Iteration Plan Endgame February 2017 Iteration Plan Endgame January 2017 Iteration Plan Endgame November/December 2016 Iteration Plan October 2016 Iteration Plan - Project view September 2016 Iteration Plan August 2016 Iteration Plan Test Plan July 2016 Iteration Plan Test Plan June 2016 Iteration Plan Test Plan May 2016 Iteration Plan Test Plan April 2016 Iteration Plan Test Plan March 2016 Iteration Plan Test Plan February 2016 Iteration Plan Test Plan January 2016 Iteration Plan Test Plan December 2015 December Iteration Plan [[December Test Plan]] [[December Pre-release]] November 2015 [[November|November Plan]]","title":"Iteration Plans"},{"location":"Iteration-Plans/#december-2019-january-2020","text":"Iteration Plan Endgame: TBD","title":"December 2019 / January 2020"},{"location":"Iteration-Plans/#november-2019","text":"Iteration Plan Endgame","title":"November 2019"},{"location":"Iteration-Plans/#october-2019","text":"Iteration Plan Endgame","title":"October 2019"},{"location":"Iteration-Plans/#september-2019","text":"Iteration Plan Endgame","title":"September 2019"},{"location":"Iteration-Plans/#august-2019","text":"Iteration Plan Endgame","title":"August 2019"},{"location":"Iteration-Plans/#july-2019","text":"Iteration Plan Endgame","title":"July 2019"},{"location":"Iteration-Plans/#june-2019","text":"Iteration Plan Endgame","title":"June 2019"},{"location":"Iteration-Plans/#may-2019","text":"Iteration Plan Endgame","title":"May 2019"},{"location":"Iteration-Plans/#april-2019","text":"Iteration Plan Endgame","title":"April 2019"},{"location":"Iteration-Plans/#march-2019","text":"Iteration Plan Endgame","title":"March 2019"},{"location":"Iteration-Plans/#february-2019","text":"Iteration Plan Endgame","title":"February 2019"},{"location":"Iteration-Plans/#december-2018-january-2019","text":"Iteration Plan Endgame","title":"December 2018 / January 2019"},{"location":"Iteration-Plans/#november-2018","text":"Iteration Plan Endgame","title":"November 2018"},{"location":"Iteration-Plans/#october-2018","text":"Iteration Plan Endgame","title":"October 2018"},{"location":"Iteration-Plans/#september-2018","text":"Iteration Plan Endgame","title":"September 2018"},{"location":"Iteration-Plans/#august-2018","text":"Iteration Plan Endgame","title":"August 2018"},{"location":"Iteration-Plans/#july-2018","text":"Iteration Plan Endgame","title":"July 2018"},{"location":"Iteration-Plans/#june-2018","text":"Iteration Plan Endgame","title":"June 2018"},{"location":"Iteration-Plans/#may-2018","text":"Iteration Plan Endgame","title":"May 2018"},{"location":"Iteration-Plans/#april-2018","text":"Iteration Plan Endgame","title":"April 2018"},{"location":"Iteration-Plans/#march-2018","text":"Iteration Plan Endgame","title":"March 2018"},{"location":"Iteration-Plans/#february-2018","text":"Iteration Plan Endgame","title":"February 2018"},{"location":"Iteration-Plans/#january-2018","text":"Iteration Plan Endgame","title":"January 2018"},{"location":"Iteration-Plans/#novemberdecember-2017","text":"Iteration Plan Endgame","title":"November/December 2017"},{"location":"Iteration-Plans/#october-2017","text":"Iteration Plan Endgame","title":"October 2017"},{"location":"Iteration-Plans/#september-2017","text":"Iteration Plan Endgame","title":"September 2017"},{"location":"Iteration-Plans/#august-2017","text":"Iteration Plan Endgame","title":"August 2017"},{"location":"Iteration-Plans/#july-2017","text":"Iteration Plan Endgame","title":"July 2017"},{"location":"Iteration-Plans/#june-2017","text":"Iteration Plan Endgame","title":"June 2017"},{"location":"Iteration-Plans/#may-2017","text":"Iteration Plan Endgame","title":"May 2017"},{"location":"Iteration-Plans/#april-2017","text":"Iteration Plan Endgame","title":"April 2017"},{"location":"Iteration-Plans/#march-2017","text":"Iteration Plan Endgame","title":"March 2017"},{"location":"Iteration-Plans/#february-2017","text":"Iteration Plan Endgame","title":"February 2017"},{"location":"Iteration-Plans/#january-2017","text":"Iteration Plan Endgame","title":"January 2017"},{"location":"Iteration-Plans/#novemberdecember-2016","text":"Iteration Plan","title":"November/December 2016"},{"location":"Iteration-Plans/#october-2016","text":"Iteration Plan - Project view","title":"October 2016"},{"location":"Iteration-Plans/#september-2016","text":"Iteration Plan","title":"September 2016"},{"location":"Iteration-Plans/#august-2016","text":"Iteration Plan Test Plan","title":"August 2016"},{"location":"Iteration-Plans/#july-2016","text":"Iteration Plan Test Plan","title":"July 2016"},{"location":"Iteration-Plans/#june-2016","text":"Iteration Plan Test Plan","title":"June 2016"},{"location":"Iteration-Plans/#may-2016","text":"Iteration Plan Test Plan","title":"May 2016"},{"location":"Iteration-Plans/#april-2016","text":"Iteration Plan Test Plan","title":"April 2016"},{"location":"Iteration-Plans/#march-2016","text":"Iteration Plan Test Plan","title":"March 2016"},{"location":"Iteration-Plans/#february-2016","text":"Iteration Plan Test Plan","title":"February 2016"},{"location":"Iteration-Plans/#january-2016","text":"Iteration Plan Test Plan","title":"January 2016"},{"location":"Iteration-Plans/#december-2015","text":"December Iteration Plan [[December Test Plan]] [[December Pre-release]]","title":"December 2015"},{"location":"Iteration-Plans/#november-2015","text":"[[November|November Plan]]","title":"November 2015"},{"location":"Keybinding-Issues/","text":"Summary This page documents workarounds for known issues related to VS Code keybindings and explains how VS Code handles keybindings and why it does what it does for the curious. TOC Quick troubleshoot Troubleshoot keybindings on Linux Troubleshoot keybindings on Mac Troubleshoot keybindings on Windows Troubleshoot generic keybindings e.code, e.keyCode and e.key How it works on Windows How it works on macOS/Linux Deciphering keybindings.json Troubleshoot Troubleshoot Linux Keybindings Are you connecting to the Linux machine via some form of virtualization or remote desktop software? symptoms : e.g. pressing AltGr acts as Backspace , pressing C acts as ArrowLeft , etc. solution : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. explanation : VS Code on Linux dispatches keybindings using scan codes to accomodate various keyboard layouts. This works well when sitting physically at the machine and the OS is the one creating keyboard events, but some virtualization / remote desktop software creates keyboard events with incorrect scan codes. Are you switching keyboard layouts while VS Code is running? symptoms : VS Code keybindings reflect the keyboard layout that was active when VS Code was launched. solution 1 : Reload VS Code after switching keyboard layouts. F1 > Reload Window solution 2 : Define your own custom keybindings based on scan codes. e.g. \"key\": \"ctrl+[Backquote]\" will always be the same physical key irrespective of keyboard layouts. explanation : VS Code on Linux does not detect switching the keyboard layout. We have an open feature request and a PR is welcome - #23690 Are you on CentOS or ArchLinux or perhaps on Ubuntu with KDE? symptoms : VS Code keybindings reflect a keyboard layout that I have installed, but not the active one. solution 1 : make sure setxkbmap -query returns as the first keyboard layout the one you want to work with in VS Code. solution 2 : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. This will prevent VS Code from trying to determine your keyboard layout whatsoever. explanation : Switching keyboard layouts under some Linux window managers does not result in a change in the low level X window APIs VS Code uses to read the current keyboard layout. This means that VS Code ends up sometimes reading one of the other configured keyboard layouts and not the current active one. PR welcome: #23505 , #24166 Are you customizing keyboard mappings via setxkbmap or equivalents? symptoms : customizations done via setxkbmap or equivalents have no effect in VS Code. solution : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. explanation : VS Code does not honour keyboard mappings at this time when determining what scan codes it should listen for. Ideas and PR welcome - #23991 Are you using some keyboard layout that remaps more than the printable characters? symptoms : e.g. the Neo keyboard layout does not work entirely in VS Code. solution : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. This will prevent VS Code from trying to determine your keyboard layout whatsoever. explanation : VS Code only looks at scan codes that usually produce printable characters in determining what scan codes to listen to. Ideas and PR welcome - #24043 An important action is not mapped to a good keybinding by default. symptoms : e.g. the Toggle Integrated Terminal action has no default keybinding on the Ukrainian keyboard layout, the Comment Line action is bound to Ctrl+Shift+7 on the German keyboard layout. solution : use the Keybinding UI or keybindings.json file to define a custom keybinding that suits your needs. explanation : VS Code does not ship with default keybindings optimized per keyboard layout. For example, Ctrl+` cannot be mapped by VS Code automatically to a scan code on the Ukrainian keyboard layout because no modifier + scan code combination produces ` on the Ukrainian keyboard layout. You can upvote in issue #1240 . Experiencing any other issue? try : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. further troubleshooting : Troubleshoot generic keybindings Troubleshoot Mac Keybindings Are you using a custom installed keyboard layout with its own sub-layouts? symptoms : changing the sub-layout to Dvorak - QWERTY \u2318 in the custom Chinese pinyin layout is not reflected in VS Code solution : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. explanation : using custom keyboard layouts with their own sub-layouts cannot be detected by VS Code because the keyboard layout reports the same identifier when the sub-layout is changed. Are you using an external ISO keyboard attached to a laptop with an ANSI keyboard? symptoms : [Backquote] and [IntlBackslash] are \"swapped\". solution : press a key on the keyboard you want to use. Wait up to 3s and VS Code should catch up. explanation : On ISO keyboards, macOS swaps the scan codes for [Backquote] and [IntlBackslash] . We respect this swapping. However, Chromium, in order to stay W3C spec compliant, decided to unswap the two scan codes. We cannot detect when Chromium unswaps the scan codes on a keyboard event basis, we need to poll and check if the last keyboard event came from an ISO keyboard and then expect that Chromium swaps the scan codes such that we can un-un-swap them. Read more in issue #26506 Are you using some keyboard layout that remaps more than the printable characters? symptoms : e.g. the Neo keyboard layout does not work entirely in VS Code. solution : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. This will prevent VS Code from trying to determine your keyboard layout whatsoever. explanation : VS Code only looks at scan codes that usually produce printable characters in determining what scan codes to listen to. Ideas and PR welcome - #24043 An important action is not mapped to a good keybinding by default. symptoms : e.g. the Toggle Integrated Terminal action has no default keybinding on the Ukrainian keyboard layout, the Comment Line action is bound to Ctrl+Shift+7 on the German keyboard layout. solution : use the Keybinding UI or keybindings.json file to define a custom keybinding that suits your needs. explanation : VS Code does not ship with default keybindings optimized per keyboard layout. For example, Ctrl+` cannot be mapped by VS Code automatically to a scan code on the Ukrainian keyboard layout because no modifier + scan code combination produces ` on the Ukrainian keyboard layout. You can upvote in issue #1240 . Experiencing any other issue? try : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. further troubleshooting : Troubleshoot generic keybindings Troubleshoot Windows Keybindings An important action is not mapped to a good keybinding by default. symptoms : e.g. an important action has no keybinding on a specific keyboard layout out of the box or it is an unfortunate one. solution : use the Keybinding UI or keybindings.json file to define a custom keybinding that suits your needs. explanation : VS Code does not ship with default keybindings optimized per keyboard layout. Keyboard layouts under Windows are free to more, remove, or add a set of key codes and it is possible that under your keyboard layout a specific key code, e.g. VK_OEM_3 is not used. You can upvote in issue #1240 . Experiencing any other issue? further troubleshooting : Troubleshoot generic keybindings Troubleshoot generic Keybindings When I press a key combination, VS Code does not react symptoms : e.g. Ctrl+Alt+Up does not add a cursor up, it rotates the screen. solution : check what key combination we receive from the OS. If we don't receive a good key combination, you need to configure your OS or drivers to release that key combination to applications. e.g.: A keybinding does something unexpected. symptoms : e.g. Cmd+Q does not quit on mac. solution : identify and remove the keybinding rule that runs on that specific keypress. run code --disable-extensions or try to identify the keybinding rule that you don't like and remove it via the Keybindings UI or via editing directly keybindings.json . The keybindings contributed by extensions are always near the bottom of the Default keybindings.json file. explanation : VS Code extensions can overwrite the defaults VS Code ships with. We do our best to present only valid keybindings in dialogs and hovers, but sometimes a keybinding rule contributed by an extension shadows a built-in rule in a certain context. I cannot type a character via AltGr+[Key] or Alt+[Key] or Ctrl+Alt+[Key] symptoms : e.g. I cannot type [ via AltGr+8 on the German keyboard layout. solution : identify and remove the keybinding rule that runs on that specific keypress. run code --disable-extensions or try to identify the keybinding rule that you don't like and remove it via the Keybindings UI or via editing directly keybindings.json . The keybindings contributed by extensions are always near the bottom of the Default keybindings.json file. e.g. { \"key\": \"ctrl+alt+8\" } in keybindings.json will completely free up that keypress. explanation : VS Code does not contain default keybindings that are of the form Ctrl+Alt+[Key] on Windows, since these might produce vital characters. Some extensions, however, do not do so. You are in total control of the keybinding rules and you can remove the ones you don't want. I want to find out which commands are bound to a key combination. I have tried all of the above open an editor. Run F1 > Developer: Inspect key mappings save the output to a file open an issue and explain thoroughly your setup and attach the file. This guide will explain how VS Code handles keybindings and guide you through identifying keybindings issues (especially related to different keyboard layouts). Please take the time to read through this detailed explanation before proceeding to troubleshooting. e.code , e.keyCode and e.key Here is an example for e.code , e.keyCode and e.key values on Chromium, on Windows: Windows US standard kb layout Windows GER Germany kb layout e.code: string e.keyCode: number e.key: string Windows was chosen as an example because Windows is the only platform where e.keyCode has an actual correspondent at the Operating System level. More specifically, on Windows: e.code is the equivalent of Windows scan codes . e.keyCode is the equivalent of Windows virtual-keys . e.key is the mostly produced character, except for dead keys, where it has the value Dead . Keyboard layouts under Windows consist of two mappings : * the first one maps scan codes to virtual keys. For example, that is how Z and Y are swapped on the GER keyboard layout. * the second one maps virtual keys and modifiers to produced characters. For example, Shift+0x37 produces & on the US keyboard layout, while Shift+0x37 produces / on the GER keyboard layout. Read more about how keyboard layouts work under Windows here . What's wrong with e.code There's nothing wrong per-se, except, under Windows, all desktop applications that I could test dispatch on e.keyCode , i.e. it would be \"non-native\" for VS Code to dispatch on e.code on Windows. What's wrong with e.keyCode macOS and Linux do not have an Operating System level correspondant for e.keyCode . Keyboard layouts on macOS and Linux consist of a single mapping . Chromium does a somewhat decent job at coming up with values for e.keyCode , but all the values are fabricated, and any piece of code that ends up depending on e.keyCode will ultimately be incorrect on various keyboard layouts on macOS/Linux . What's wrong with e.key In some circumstances (i.e. combining accents), e.key has the value Dead . We cannot dispatch on e.key because the keys that produce combining accents would be unmappable in VS Code. Moreover, it is not possible to correlate modifier keys, e.code and e.key in any meaningful way without additional information. e.g. pressing Ctrl+Alt+Digit7 results in ctrlKey: true, altKey: true, key: \"{\" pressing Ctrl+Alt+Digit6 results in ctrlKey: true, altKey: true, key: \"6\" there is no way to determine that Ctrl+Alt+ were \"consumed\" in producing { and were not \"consumed\" in producing 6 . To sum up On Windows, VS Code dispatches on e.keyCode . On macOS and Linux, VS Code dispatches on e.code . How it works on Windows All built-in commands, extensions and user settings register keybindings in terms of keyCode . All Electron APIs (i.e. menus) refer to keybindings in terms of keyCode . The only special thing to do here is to be sure to present good labels in the UI to end-users. For example, the Toggle Line Comment action is bound to Ctrl+0xBF : Kb Layout Scan Code Virtual Key Produced Character US [Slash] 0xBF / GER [Backslash] 0xBF # Therefore, the keybinding for Toggle Line Comment should be rendered as Ctrl+/ on a US keyboard layout and as Ctrl+# on a GER keyboard layout. This is done by using the native node module native-keymap . It gives the virtual key and the produced characters for each scan code. e.g.: Backslash : { vkey : \"VK_OEM_2\" , // well known name given to 0xBF value : \"#\" , withShift : \"'\" , withAltGr : \"\" , withShiftAltGr : \"\" } Code pointers node-native-keymap WindowsKeyboardMapper How it works on macOS/Linux All built-in commands, extensions and user settings register keybindings in terms of keyCode . Therefore, the immediate thing to do here is to transform these keybindings in terms of code . This is done with an heuristic based on the produced characters. Linux US standard kb layout Linux GER Switzerland kb layout For example, the Toggle Line Comment action is bound to Ctrl+0xBF , which would produce / under the US standard keyboard layout: Kb Layout Scan Code Virtual Key Produced Character US [Slash] 0xBF / GER (CH) Shift+[Digit7] 0xBF / Therefore, under the US keyboard layout, the action is bound to Ctrl+/ , while on the GER (CH) keyboard layout it is bound to Ctrl+Shift+Digit7 . This is done by using the native node module native-keymap . It gives the produced characters for each scan code. e.g.: Digit7 : { value : \"7\" , withShift : \"/\" , withAltGr : \"|\" , withShiftAltGr : \"\u215e\" } Since Electron APIs (i.e. menus) refer to keybindings based on keyCode , we cannot expose the keybindings to Electron in all circumstances. If the native node module fails to run (i.e. the mappings cannot be obtained), keybinding dispatching falls back to using e.keyCode . Code pointers node-native-keymap node-native-keymap MacLinuxKeyboardMapper Deciphering keybindings.json Most of the keybindings serialized in keybindings.json refer to e.keyCode . Here is the table to figure them out: keybindings.json Key Code Name Key Code Value ; VK_OEM_1 0xBA = VK_OEM_PLUS 0xBB , VK_OEM_COMMA 0xBC - VK_OEM_MINUS 0xBD . VK_OEM_PERIOD 0xBE / VK_OEM_2 0xBF ` VK_OEM_3 0xC0 [ VK_OEM_4 0xDB \\ VK_OEM_5 0xDC ] VK_OEM_6 0xDD ' VK_OEM_7 0xDE oem_102 VK_OEM_102 0xE2","title":"Keybinding Issues"},{"location":"Keybinding-Issues/#summary","text":"This page documents workarounds for known issues related to VS Code keybindings and explains how VS Code handles keybindings and why it does what it does for the curious.","title":"Summary"},{"location":"Keybinding-Issues/#toc","text":"Quick troubleshoot Troubleshoot keybindings on Linux Troubleshoot keybindings on Mac Troubleshoot keybindings on Windows Troubleshoot generic keybindings e.code, e.keyCode and e.key How it works on Windows How it works on macOS/Linux Deciphering keybindings.json","title":"TOC"},{"location":"Keybinding-Issues/#troubleshoot","text":"","title":"Troubleshoot"},{"location":"Keybinding-Issues/#troubleshoot-linux-keybindings","text":"Are you connecting to the Linux machine via some form of virtualization or remote desktop software? symptoms : e.g. pressing AltGr acts as Backspace , pressing C acts as ArrowLeft , etc. solution : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. explanation : VS Code on Linux dispatches keybindings using scan codes to accomodate various keyboard layouts. This works well when sitting physically at the machine and the OS is the one creating keyboard events, but some virtualization / remote desktop software creates keyboard events with incorrect scan codes. Are you switching keyboard layouts while VS Code is running? symptoms : VS Code keybindings reflect the keyboard layout that was active when VS Code was launched. solution 1 : Reload VS Code after switching keyboard layouts. F1 > Reload Window solution 2 : Define your own custom keybindings based on scan codes. e.g. \"key\": \"ctrl+[Backquote]\" will always be the same physical key irrespective of keyboard layouts. explanation : VS Code on Linux does not detect switching the keyboard layout. We have an open feature request and a PR is welcome - #23690 Are you on CentOS or ArchLinux or perhaps on Ubuntu with KDE? symptoms : VS Code keybindings reflect a keyboard layout that I have installed, but not the active one. solution 1 : make sure setxkbmap -query returns as the first keyboard layout the one you want to work with in VS Code. solution 2 : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. This will prevent VS Code from trying to determine your keyboard layout whatsoever. explanation : Switching keyboard layouts under some Linux window managers does not result in a change in the low level X window APIs VS Code uses to read the current keyboard layout. This means that VS Code ends up sometimes reading one of the other configured keyboard layouts and not the current active one. PR welcome: #23505 , #24166 Are you customizing keyboard mappings via setxkbmap or equivalents? symptoms : customizations done via setxkbmap or equivalents have no effect in VS Code. solution : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. explanation : VS Code does not honour keyboard mappings at this time when determining what scan codes it should listen for. Ideas and PR welcome - #23991 Are you using some keyboard layout that remaps more than the printable characters? symptoms : e.g. the Neo keyboard layout does not work entirely in VS Code. solution : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. This will prevent VS Code from trying to determine your keyboard layout whatsoever. explanation : VS Code only looks at scan codes that usually produce printable characters in determining what scan codes to listen to. Ideas and PR welcome - #24043 An important action is not mapped to a good keybinding by default. symptoms : e.g. the Toggle Integrated Terminal action has no default keybinding on the Ukrainian keyboard layout, the Comment Line action is bound to Ctrl+Shift+7 on the German keyboard layout. solution : use the Keybinding UI or keybindings.json file to define a custom keybinding that suits your needs. explanation : VS Code does not ship with default keybindings optimized per keyboard layout. For example, Ctrl+` cannot be mapped by VS Code automatically to a scan code on the Ukrainian keyboard layout because no modifier + scan code combination produces ` on the Ukrainian keyboard layout. You can upvote in issue #1240 . Experiencing any other issue? try : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. further troubleshooting : Troubleshoot generic keybindings","title":"Troubleshoot Linux Keybindings"},{"location":"Keybinding-Issues/#troubleshoot-mac-keybindings","text":"Are you using a custom installed keyboard layout with its own sub-layouts? symptoms : changing the sub-layout to Dvorak - QWERTY \u2318 in the custom Chinese pinyin layout is not reflected in VS Code solution : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. explanation : using custom keyboard layouts with their own sub-layouts cannot be detected by VS Code because the keyboard layout reports the same identifier when the sub-layout is changed. Are you using an external ISO keyboard attached to a laptop with an ANSI keyboard? symptoms : [Backquote] and [IntlBackslash] are \"swapped\". solution : press a key on the keyboard you want to use. Wait up to 3s and VS Code should catch up. explanation : On ISO keyboards, macOS swaps the scan codes for [Backquote] and [IntlBackslash] . We respect this swapping. However, Chromium, in order to stay W3C spec compliant, decided to unswap the two scan codes. We cannot detect when Chromium unswaps the scan codes on a keyboard event basis, we need to poll and check if the last keyboard event came from an ISO keyboard and then expect that Chromium swaps the scan codes such that we can un-un-swap them. Read more in issue #26506 Are you using some keyboard layout that remaps more than the printable characters? symptoms : e.g. the Neo keyboard layout does not work entirely in VS Code. solution : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. This will prevent VS Code from trying to determine your keyboard layout whatsoever. explanation : VS Code only looks at scan codes that usually produce printable characters in determining what scan codes to listen to. Ideas and PR welcome - #24043 An important action is not mapped to a good keybinding by default. symptoms : e.g. the Toggle Integrated Terminal action has no default keybinding on the Ukrainian keyboard layout, the Comment Line action is bound to Ctrl+Shift+7 on the German keyboard layout. solution : use the Keybinding UI or keybindings.json file to define a custom keybinding that suits your needs. explanation : VS Code does not ship with default keybindings optimized per keyboard layout. For example, Ctrl+` cannot be mapped by VS Code automatically to a scan code on the Ukrainian keyboard layout because no modifier + scan code combination produces ` on the Ukrainian keyboard layout. You can upvote in issue #1240 . Experiencing any other issue? try : use \"keyboard.dispatch\": \"keyCode\" in your settings and restart VS Code. further troubleshooting : Troubleshoot generic keybindings","title":"Troubleshoot Mac Keybindings"},{"location":"Keybinding-Issues/#troubleshoot-windows-keybindings","text":"An important action is not mapped to a good keybinding by default. symptoms : e.g. an important action has no keybinding on a specific keyboard layout out of the box or it is an unfortunate one. solution : use the Keybinding UI or keybindings.json file to define a custom keybinding that suits your needs. explanation : VS Code does not ship with default keybindings optimized per keyboard layout. Keyboard layouts under Windows are free to more, remove, or add a set of key codes and it is possible that under your keyboard layout a specific key code, e.g. VK_OEM_3 is not used. You can upvote in issue #1240 . Experiencing any other issue? further troubleshooting : Troubleshoot generic keybindings","title":"Troubleshoot Windows Keybindings"},{"location":"Keybinding-Issues/#troubleshoot-generic-keybindings","text":"When I press a key combination, VS Code does not react symptoms : e.g. Ctrl+Alt+Up does not add a cursor up, it rotates the screen. solution : check what key combination we receive from the OS. If we don't receive a good key combination, you need to configure your OS or drivers to release that key combination to applications. e.g.: A keybinding does something unexpected. symptoms : e.g. Cmd+Q does not quit on mac. solution : identify and remove the keybinding rule that runs on that specific keypress. run code --disable-extensions or try to identify the keybinding rule that you don't like and remove it via the Keybindings UI or via editing directly keybindings.json . The keybindings contributed by extensions are always near the bottom of the Default keybindings.json file. explanation : VS Code extensions can overwrite the defaults VS Code ships with. We do our best to present only valid keybindings in dialogs and hovers, but sometimes a keybinding rule contributed by an extension shadows a built-in rule in a certain context. I cannot type a character via AltGr+[Key] or Alt+[Key] or Ctrl+Alt+[Key] symptoms : e.g. I cannot type [ via AltGr+8 on the German keyboard layout. solution : identify and remove the keybinding rule that runs on that specific keypress. run code --disable-extensions or try to identify the keybinding rule that you don't like and remove it via the Keybindings UI or via editing directly keybindings.json . The keybindings contributed by extensions are always near the bottom of the Default keybindings.json file. e.g. { \"key\": \"ctrl+alt+8\" } in keybindings.json will completely free up that keypress. explanation : VS Code does not contain default keybindings that are of the form Ctrl+Alt+[Key] on Windows, since these might produce vital characters. Some extensions, however, do not do so. You are in total control of the keybinding rules and you can remove the ones you don't want. I want to find out which commands are bound to a key combination. I have tried all of the above open an editor. Run F1 > Developer: Inspect key mappings save the output to a file open an issue and explain thoroughly your setup and attach the file. This guide will explain how VS Code handles keybindings and guide you through identifying keybindings issues (especially related to different keyboard layouts). Please take the time to read through this detailed explanation before proceeding to troubleshooting.","title":"Troubleshoot generic Keybindings"},{"location":"Keybinding-Issues/#ecode-ekeycode-and-ekey","text":"Here is an example for e.code , e.keyCode and e.key values on Chromium, on Windows: Windows US standard kb layout Windows GER Germany kb layout e.code: string e.keyCode: number e.key: string Windows was chosen as an example because Windows is the only platform where e.keyCode has an actual correspondent at the Operating System level. More specifically, on Windows: e.code is the equivalent of Windows scan codes . e.keyCode is the equivalent of Windows virtual-keys . e.key is the mostly produced character, except for dead keys, where it has the value Dead . Keyboard layouts under Windows consist of two mappings : * the first one maps scan codes to virtual keys. For example, that is how Z and Y are swapped on the GER keyboard layout. * the second one maps virtual keys and modifiers to produced characters. For example, Shift+0x37 produces & on the US keyboard layout, while Shift+0x37 produces / on the GER keyboard layout. Read more about how keyboard layouts work under Windows here .","title":"e.code, e.keyCode and e.key"},{"location":"Keybinding-Issues/#whats-wrong-with-ecode","text":"There's nothing wrong per-se, except, under Windows, all desktop applications that I could test dispatch on e.keyCode , i.e. it would be \"non-native\" for VS Code to dispatch on e.code on Windows.","title":"What's wrong with e.code"},{"location":"Keybinding-Issues/#whats-wrong-with-ekeycode","text":"macOS and Linux do not have an Operating System level correspondant for e.keyCode . Keyboard layouts on macOS and Linux consist of a single mapping . Chromium does a somewhat decent job at coming up with values for e.keyCode , but all the values are fabricated, and any piece of code that ends up depending on e.keyCode will ultimately be incorrect on various keyboard layouts on macOS/Linux .","title":"What's wrong with e.keyCode"},{"location":"Keybinding-Issues/#whats-wrong-with-ekey","text":"In some circumstances (i.e. combining accents), e.key has the value Dead . We cannot dispatch on e.key because the keys that produce combining accents would be unmappable in VS Code. Moreover, it is not possible to correlate modifier keys, e.code and e.key in any meaningful way without additional information. e.g. pressing Ctrl+Alt+Digit7 results in ctrlKey: true, altKey: true, key: \"{\" pressing Ctrl+Alt+Digit6 results in ctrlKey: true, altKey: true, key: \"6\" there is no way to determine that Ctrl+Alt+ were \"consumed\" in producing { and were not \"consumed\" in producing 6 .","title":"What's wrong with e.key"},{"location":"Keybinding-Issues/#to-sum-up","text":"On Windows, VS Code dispatches on e.keyCode . On macOS and Linux, VS Code dispatches on e.code .","title":"To sum up"},{"location":"Keybinding-Issues/#how-it-works-on-windows","text":"All built-in commands, extensions and user settings register keybindings in terms of keyCode . All Electron APIs (i.e. menus) refer to keybindings in terms of keyCode . The only special thing to do here is to be sure to present good labels in the UI to end-users. For example, the Toggle Line Comment action is bound to Ctrl+0xBF : Kb Layout Scan Code Virtual Key Produced Character US [Slash] 0xBF / GER [Backslash] 0xBF # Therefore, the keybinding for Toggle Line Comment should be rendered as Ctrl+/ on a US keyboard layout and as Ctrl+# on a GER keyboard layout. This is done by using the native node module native-keymap . It gives the virtual key and the produced characters for each scan code. e.g.: Backslash : { vkey : \"VK_OEM_2\" , // well known name given to 0xBF value : \"#\" , withShift : \"'\" , withAltGr : \"\" , withShiftAltGr : \"\" }","title":"How it works on Windows"},{"location":"Keybinding-Issues/#code-pointers","text":"node-native-keymap WindowsKeyboardMapper","title":"Code pointers"},{"location":"Keybinding-Issues/#how-it-works-on-macoslinux","text":"All built-in commands, extensions and user settings register keybindings in terms of keyCode . Therefore, the immediate thing to do here is to transform these keybindings in terms of code . This is done with an heuristic based on the produced characters. Linux US standard kb layout Linux GER Switzerland kb layout For example, the Toggle Line Comment action is bound to Ctrl+0xBF , which would produce / under the US standard keyboard layout: Kb Layout Scan Code Virtual Key Produced Character US [Slash] 0xBF / GER (CH) Shift+[Digit7] 0xBF / Therefore, under the US keyboard layout, the action is bound to Ctrl+/ , while on the GER (CH) keyboard layout it is bound to Ctrl+Shift+Digit7 . This is done by using the native node module native-keymap . It gives the produced characters for each scan code. e.g.: Digit7 : { value : \"7\" , withShift : \"/\" , withAltGr : \"|\" , withShiftAltGr : \"\u215e\" } Since Electron APIs (i.e. menus) refer to keybindings based on keyCode , we cannot expose the keybindings to Electron in all circumstances. If the native node module fails to run (i.e. the mappings cannot be obtained), keybinding dispatching falls back to using e.keyCode .","title":"How it works on macOS/Linux"},{"location":"Keybinding-Issues/#code-pointers_1","text":"node-native-keymap node-native-keymap MacLinuxKeyboardMapper","title":"Code pointers"},{"location":"Keybinding-Issues/#deciphering-keybindingsjson","text":"Most of the keybindings serialized in keybindings.json refer to e.keyCode . Here is the table to figure them out: keybindings.json Key Code Name Key Code Value ; VK_OEM_1 0xBA = VK_OEM_PLUS 0xBB , VK_OEM_COMMA 0xBC - VK_OEM_MINUS 0xBD . VK_OEM_PERIOD 0xBE / VK_OEM_2 0xBF ` VK_OEM_3 0xC0 [ VK_OEM_4 0xDB \\ VK_OEM_5 0xDC ] VK_OEM_6 0xDD ' VK_OEM_7 0xDE oem_102 VK_OEM_102 0xE2","title":"Deciphering keybindings.json"},{"location":"Known-issues/","text":"This page will provide a summary of known issues marked \"upstream\" (i.e. we cannot workaround/fix them in VS Code sources) Smooth scrolling on Windows using laptops with Precision Touchpad Scrolling with two fingers on the touchpad feels \"janky\". The root cause lies within Electron/Chromium and the way they convert touchpad gestures to mousewheel events. * First reported in VSCode Version: 1.5.3 * https://github.com/Microsoft/vscode/issues/13612 * https://github.com/Microsoft/vscode/issues/12637 *** Confirmed workaround reported by @alexpaluzzi During my testing, I discovered that the lag occurs if you start VS Code maximized. I thought maybe I was going crazy, but all I did was restore the window and then re-maximize it and all of the scroll jank was gone. Unconfirmed workarounds: reported by davidstoneham Staring vscode with the flag \"--disable-gpu\" fixes the issue for me reported by alexey-kozlenkov If I run VSCode as an administrator, then scrolling does not work. If I run VSCode just as it is, scrolling does work. reported by rcdmk I have another trick that does work as long as I keep focus on the VS code window: 1. Tap with tree fingers, so Search/Cortana pannel shows up to the left of screen. 2. Swipe with two fingers over the VS code window and notice that the document does scroll","title":"Known issues"},{"location":"Known-issues/#smooth-scrolling-on-windows-using-laptops-with-precision-touchpad","text":"Scrolling with two fingers on the touchpad feels \"janky\". The root cause lies within Electron/Chromium and the way they convert touchpad gestures to mousewheel events. * First reported in VSCode Version: 1.5.3 * https://github.com/Microsoft/vscode/issues/13612 * https://github.com/Microsoft/vscode/issues/12637","title":"Smooth scrolling on Windows using laptops with Precision Touchpad"},{"location":"Known-issues/#confirmed-workaround-reported-by-alexpaluzzi","text":"During my testing, I discovered that the lag occurs if you start VS Code maximized. I thought maybe I was going crazy, but all I did was restore the window and then re-maximize it and all of the scroll jank was gone.","title":"*** Confirmed workaround reported by @alexpaluzzi"},{"location":"Known-issues/#unconfirmed-workarounds","text":"reported by davidstoneham Staring vscode with the flag \"--disable-gpu\" fixes the issue for me reported by alexey-kozlenkov If I run VSCode as an administrator, then scrolling does not work. If I run VSCode just as it is, scrolling does work. reported by rcdmk I have another trick that does work as long as I keep focus on the VS code window: 1. Tap with tree fingers, so Search/Cortana pannel shows up to the left of screen. 2. Swipe with two fingers over the VS code window and notice that the document does scroll","title":"Unconfirmed workarounds:"},{"location":"Lists-And-Trees/","text":"Lists and Trees In October-November 2018, we addressed some performance issues of our tree widget. In doing so, we took the chance to rewrite it and ended up creating a couple of different widgets available to use within VS Code. This document aims to introduce the core list and tree widgets available, as well as summarize each widget's particularities, which should help in choosing what widget to use. Finally, we present some performance numbers after adopting the new ObjectTree in the Problems panel. Widgets All the following widgets are compositions of one another. Let's start with the bottom of the composition chain: the list. List At its core, the List is a virtual rendering engine . It can render a collection of elements in a scrollable view, while making sure only the visible elements actually end up in the DOM at any given point in time. Scrolling up and down will trigger a series of computations to determine whether DOM elements should be inserted in or removed from the document. Minimizing DOM access is what lets the List scale to large quantities and keep up with performance. You can easily add 100k elements to it without breaking a sweat. A requirement of virtual rendering is the need to know each element's height in pixels before it gets rendered. At runtime, the list will ask the height to a provided virtual rendering controller, keep an in-memory map of each element's height and track the viewport's position in order to know which elements should be rendered in and out of the DOM. Note that each item can have its own height. List splice animation Given that the collection model for a list is a simple array, the API to modify a list's element collection is very simple. The splice call allows for deleting and inserting continuous items in the list. Here's a simplified version of it: class List < T > { splice ( start : number , deleteCount : number , toInsert : T []) : void } Apart from being a virtual rendering engine, the List provides quite a lot of functionality that actually make it a usable widget: keyboard and mouse navigation, focus and selection traits, accessibility roles, etc. These features are what defines List as a usable widget across our workbench. Index Tree A tree UI widget should be able to represent tree-like data, eg. a file explorer. A rendered tree can always be rendered as a list; it is each row's indentation level and twistie indicators which give the user the perception of tree structure. By leveraging the virtual rendering functionalites of the list we can use composition to create a tree widget. There is the question of API: how can we keep a tree-like structure API relatively simple, yet allow for complex operations, such as removing and inserting whole subtrees? If we take the same splice analogy as the list's (pick a location, remove some elements and add other elements), it's possible to come up with a tree splice call, in which the location is multi-dimensional (the first element of the start array represents the index in the root's children array; the n -th element of the start array represents the index in the n - 1 -th children array) and the elements to insert are entire subtrees. interface TreeElement < T > { element : T ; children : TreeElement < T > []; } class IndexTree < T > { splice ( start : number [], deleteCount : number , toInsert : TreeElement < T > []) : void ; } The IndexTree 's main responsibility is to map tree splice calls into list splice calls. It is a composition of the List widget in order to provide enough functionality to render tree-like models with the correct identation levels and twistie states per element. It also provides additional keyboard and mouse handling in order to support tree operations such as expand, collapse, select parent node, etc. Additionally, the IndexTree supports filtering. An instance of IndexTree can be created with a filter which can have fine grained control of which elements should be filtered out of the view. The filter call can optionally return additional data computed during its operation, which will be passed along to the tree renderer; this is useful in cases where substring highlights are computed during the filtering phase and need to be reused during the rendering phase. Object Tree While the IndexTree is both powerful and performant, it also has a sub-optimal API. Often, it is not trivial to compute a start: number[] location to call splice with. It is a much more common scenario to simply replace complete subtrees by addressing an actual element. Given ES6 maps, we can provide just that: class ObjectTree < T > { setChildren ( element : T | null , children : TreeElement < T > []) : void ; } The ObjectTree is a mapper between setChildren calls to tree splice calls. Again, it is a composition of the IndexTree widget and provides an API which easier to use since the user can always reference elements already in the tree. The null value is specially reserved to represent the root element. Data Tree There are certain use cases in which data models are not fully known: they are lazily discovered. A file explorer is a good example. Once in its initial state, a file explorer renders only the top-level files and folders. Once expanded, a folder should resolve its children by doing some IO and render its children once done. There is an obvious issue: what if the IO is slow? interface IDataSource < T > { hasChildren ( element : T | null ) : boolean ; getChildren ( element : T | null ) : Thenable < T [] > ; } class DataTree < T > { constructor ( dataSource : IDataSource < T > ); refresh ( element : T | null ) : Thenable < void > ; } The DataTree abstracts away the user's model using a data source interface. Once again, it is nothing but a composition on top of the ObjectTree . Tree elements can be refreshed via API or by expanding for the very first time. Refreshing a tree element eventually calls the data source which returns a thenable of its children elements. It makes sure to correctly handle conflicting refresh calls (concurrent calls to refresh an ancestor and descendant are problematic) as well as render an appropriate loading indicator for long-running refresh calls, replacing the tree twistie. Once again, the null value represents the root. Performance In order to measure a meaningful performance improvement, we adopted the ObjectTree in the Problems panel. This was a great choice given its simple model (files have problems which have suggested fixes), potential model size (problems can easily grow to the thousands), model update patterns (problems can change very often as the user types, lots of frequent and large updates) as well as desired features (we want the tree to be filtered based on user input). In order to get a consistent test case, we created a dummy extension which creates fake problems, enough to populate the tree and run a few operations on it. The following example is based on creating a total of 20.000 problems on 10.000 files, 2 problems each: We first set that model on the tree: Initial Population ; We then use the filter box to filter down results yet end up typing an expression which matches all problems, thus causing no visible changes in the tree, apart from rendering the textual highlights for the matches: Filter to Same ; We then use the filter box to filter down results to a single result, by searching for a specific problem: Filter to One ; Finally, we run the Collapse All action to collapse all tree nodes, which was fairly problematic in the old tree performance wise. Here are the results from profiling all these cases on the same machine along with some speedup calculations: Test Before After Speedup Initial population 2.990 ms 524 ms 5.7x Filter to Same 1400 ms 204 ms 6.7x Filter to One 970 ms 78 ms 12.4x Collapse All 30.000 ms \ud83d\ude31 625 ms 48x \ud83d\ude0e While the speedup results are impressive, some of the absolute values are still unnaceptable: 625ms for collapsing all tree nodes will eat up a large chunk of JavaScript time, drastically reducing our frame rate, even if collapsing all nodes is a punctual operation. The good news is that there is still lots of room for improvement, given that we now have a solid algorithm and data structure foundation on which can iterate much easier. Stay tuned!","title":"Lists And Trees"},{"location":"Lists-And-Trees/#lists-and-trees","text":"In October-November 2018, we addressed some performance issues of our tree widget. In doing so, we took the chance to rewrite it and ended up creating a couple of different widgets available to use within VS Code. This document aims to introduce the core list and tree widgets available, as well as summarize each widget's particularities, which should help in choosing what widget to use. Finally, we present some performance numbers after adopting the new ObjectTree in the Problems panel.","title":"Lists and Trees"},{"location":"Lists-And-Trees/#widgets","text":"All the following widgets are compositions of one another. Let's start with the bottom of the composition chain: the list.","title":"Widgets"},{"location":"Lists-And-Trees/#list","text":"At its core, the List is a virtual rendering engine . It can render a collection of elements in a scrollable view, while making sure only the visible elements actually end up in the DOM at any given point in time. Scrolling up and down will trigger a series of computations to determine whether DOM elements should be inserted in or removed from the document. Minimizing DOM access is what lets the List scale to large quantities and keep up with performance. You can easily add 100k elements to it without breaking a sweat. A requirement of virtual rendering is the need to know each element's height in pixels before it gets rendered. At runtime, the list will ask the height to a provided virtual rendering controller, keep an in-memory map of each element's height and track the viewport's position in order to know which elements should be rendered in and out of the DOM. Note that each item can have its own height. List splice animation Given that the collection model for a list is a simple array, the API to modify a list's element collection is very simple. The splice call allows for deleting and inserting continuous items in the list. Here's a simplified version of it: class List < T > { splice ( start : number , deleteCount : number , toInsert : T []) : void } Apart from being a virtual rendering engine, the List provides quite a lot of functionality that actually make it a usable widget: keyboard and mouse navigation, focus and selection traits, accessibility roles, etc. These features are what defines List as a usable widget across our workbench.","title":"List"},{"location":"Lists-And-Trees/#index-tree","text":"A tree UI widget should be able to represent tree-like data, eg. a file explorer. A rendered tree can always be rendered as a list; it is each row's indentation level and twistie indicators which give the user the perception of tree structure. By leveraging the virtual rendering functionalites of the list we can use composition to create a tree widget. There is the question of API: how can we keep a tree-like structure API relatively simple, yet allow for complex operations, such as removing and inserting whole subtrees? If we take the same splice analogy as the list's (pick a location, remove some elements and add other elements), it's possible to come up with a tree splice call, in which the location is multi-dimensional (the first element of the start array represents the index in the root's children array; the n -th element of the start array represents the index in the n - 1 -th children array) and the elements to insert are entire subtrees. interface TreeElement < T > { element : T ; children : TreeElement < T > []; } class IndexTree < T > { splice ( start : number [], deleteCount : number , toInsert : TreeElement < T > []) : void ; } The IndexTree 's main responsibility is to map tree splice calls into list splice calls. It is a composition of the List widget in order to provide enough functionality to render tree-like models with the correct identation levels and twistie states per element. It also provides additional keyboard and mouse handling in order to support tree operations such as expand, collapse, select parent node, etc. Additionally, the IndexTree supports filtering. An instance of IndexTree can be created with a filter which can have fine grained control of which elements should be filtered out of the view. The filter call can optionally return additional data computed during its operation, which will be passed along to the tree renderer; this is useful in cases where substring highlights are computed during the filtering phase and need to be reused during the rendering phase.","title":"Index Tree"},{"location":"Lists-And-Trees/#object-tree","text":"While the IndexTree is both powerful and performant, it also has a sub-optimal API. Often, it is not trivial to compute a start: number[] location to call splice with. It is a much more common scenario to simply replace complete subtrees by addressing an actual element. Given ES6 maps, we can provide just that: class ObjectTree < T > { setChildren ( element : T | null , children : TreeElement < T > []) : void ; } The ObjectTree is a mapper between setChildren calls to tree splice calls. Again, it is a composition of the IndexTree widget and provides an API which easier to use since the user can always reference elements already in the tree. The null value is specially reserved to represent the root element.","title":"Object Tree"},{"location":"Lists-And-Trees/#data-tree","text":"There are certain use cases in which data models are not fully known: they are lazily discovered. A file explorer is a good example. Once in its initial state, a file explorer renders only the top-level files and folders. Once expanded, a folder should resolve its children by doing some IO and render its children once done. There is an obvious issue: what if the IO is slow? interface IDataSource < T > { hasChildren ( element : T | null ) : boolean ; getChildren ( element : T | null ) : Thenable < T [] > ; } class DataTree < T > { constructor ( dataSource : IDataSource < T > ); refresh ( element : T | null ) : Thenable < void > ; } The DataTree abstracts away the user's model using a data source interface. Once again, it is nothing but a composition on top of the ObjectTree . Tree elements can be refreshed via API or by expanding for the very first time. Refreshing a tree element eventually calls the data source which returns a thenable of its children elements. It makes sure to correctly handle conflicting refresh calls (concurrent calls to refresh an ancestor and descendant are problematic) as well as render an appropriate loading indicator for long-running refresh calls, replacing the tree twistie. Once again, the null value represents the root.","title":"Data Tree"},{"location":"Lists-And-Trees/#performance","text":"In order to measure a meaningful performance improvement, we adopted the ObjectTree in the Problems panel. This was a great choice given its simple model (files have problems which have suggested fixes), potential model size (problems can easily grow to the thousands), model update patterns (problems can change very often as the user types, lots of frequent and large updates) as well as desired features (we want the tree to be filtered based on user input). In order to get a consistent test case, we created a dummy extension which creates fake problems, enough to populate the tree and run a few operations on it. The following example is based on creating a total of 20.000 problems on 10.000 files, 2 problems each: We first set that model on the tree: Initial Population ; We then use the filter box to filter down results yet end up typing an expression which matches all problems, thus causing no visible changes in the tree, apart from rendering the textual highlights for the matches: Filter to Same ; We then use the filter box to filter down results to a single result, by searching for a specific problem: Filter to One ; Finally, we run the Collapse All action to collapse all tree nodes, which was fairly problematic in the old tree performance wise. Here are the results from profiling all these cases on the same machine along with some speedup calculations: Test Before After Speedup Initial population 2.990 ms 524 ms 5.7x Filter to Same 1400 ms 204 ms 6.7x Filter to One 970 ms 78 ms 12.4x Collapse All 30.000 ms \ud83d\ude31 625 ms 48x \ud83d\ude0e While the speedup results are impressive, some of the absolute values are still unnaceptable: 625ms for collapsing all tree nodes will eat up a large chunk of JavaScript time, drastically reducing our frame rate, even if collapsing all nodes is a punctual operation. The good news is that there is still lots of room for improvement, given that we now have a solid algorithm and data structure foundation on which can iterate much easier. Stay tuned!","title":"Performance"},{"location":"Native-Crash-Issues/","text":"Summary This page documents how you can help us to track down native crash issues. It contains: - How to get at the native crash information so that you can share it with us The solutions are split across each operating system we support. macOS On macOS, application crashes can easily be looked at from the Console application. * open Console application * click on User Reports * find the crash from Code * attach it here It should look something like this: Windows On Windows, you will need to install a program in order to collect more information when a crash occurs. * download & install Debug Diagnostic Tools for Windows (pick the DebugDiagx64.msi option) * run DebugDiag 2 Collection * select to capture crash dumps: * pick a specific process: * pick the first Code.exe process (or Code - Insiders.exe if you are on insiders). * finish the wizard by stepping through without changing any option but note the directory that is picked to store dumps * wait until the crash happens * check for the contents of the crash folder (e.g. C:\\Program Files\\DebugDiag\\Logs\\Crash rule for all instances of Code.exe ) * if the crash was recorded you should see a very large file ( *.dmp ) and a *_log.txt file with the same process ID * attach the smaller *_log.txt file Tip: See https://felixrieseberg.com/debugging-electron-apps-on-windows/ for a good explanation for how to debug the produced *.dmp using Visual Studio Linux On Linux we need to temporarily increase the limit for crash dumps. From a terminal: * run ulimit -c unlimited * then start code from the terminal * wait for the crash * watch for a file called core produced in the current working directory With the core dump in hand we can use gdb to find out more about the crash: * run gdb <path to code binary> <path to core> * from the GDB session type bt * attach the output, you should see a full stacktrace like the one in the image below: Read the Stacktrace Once we have a stack trace of a crash we can user another tool for converting the cryptic messages into something useful. Let us consider a stack like this one: 0 libnode.dylib 0x000000010cfd7bf6 0x10cef5000 + 928758 1 libnode.dylib 0x000000010cfd3946 0x10cef5000 + 911686 2 libnode.dylib 0x000000010d122551 0x10cef5000 + 2282833 3 libnode.dylib 0x000000010d1ee24e 0x10cef5000 + 3117646 4 libnode.dylib 0x000000010d1ed76b 0x10cef5000 + 3114859 On macOS we can use electron-atos to print the actual stack trace: * npm install -g electron-atos * save the stack to a file e.g. crash.txt * run electron-atos --file /path/to/crash.txt --version 1.7.9 * this will take some time but eventually print this: node::EnvEnumerator(v8::PropertyCallbackInfo<v8::Array> const&) (in libnode.dylib) (node.cc:2849) node::MakeCallback(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*) (in libnode.dylib) (node.cc:1225) v8::Module::Evaluate(v8::Local<v8::Context>) (in libnode.dylib) (counters-inl.h:67) v8::internal::Builtin_Impl_DataViewPrototypeSetFloat64(v8::internal::BuiltinArguments, v8::internal::Isolate*) (in libnode.dylib) (objects-inl.h:0) v8::internal::Builtin_Impl_Stats_DataViewPrototypeSetFloat32(int, v8::internal::Object**, v8::internal::Isolate*) (in libnode.dylib) (builtins-dataview.cc:335) Note : if the command shows an error, try to remove some lines from the stack trace. It can be picky about the format.","title":"Native Crash Issues"},{"location":"Native-Crash-Issues/#summary","text":"This page documents how you can help us to track down native crash issues. It contains: - How to get at the native crash information so that you can share it with us The solutions are split across each operating system we support.","title":"Summary"},{"location":"Native-Crash-Issues/#macos","text":"On macOS, application crashes can easily be looked at from the Console application. * open Console application * click on User Reports * find the crash from Code * attach it here It should look something like this:","title":"macOS"},{"location":"Native-Crash-Issues/#windows","text":"On Windows, you will need to install a program in order to collect more information when a crash occurs. * download & install Debug Diagnostic Tools for Windows (pick the DebugDiagx64.msi option) * run DebugDiag 2 Collection * select to capture crash dumps: * pick a specific process: * pick the first Code.exe process (or Code - Insiders.exe if you are on insiders). * finish the wizard by stepping through without changing any option but note the directory that is picked to store dumps * wait until the crash happens * check for the contents of the crash folder (e.g. C:\\Program Files\\DebugDiag\\Logs\\Crash rule for all instances of Code.exe ) * if the crash was recorded you should see a very large file ( *.dmp ) and a *_log.txt file with the same process ID * attach the smaller *_log.txt file Tip: See https://felixrieseberg.com/debugging-electron-apps-on-windows/ for a good explanation for how to debug the produced *.dmp using Visual Studio","title":"Windows"},{"location":"Native-Crash-Issues/#linux","text":"On Linux we need to temporarily increase the limit for crash dumps. From a terminal: * run ulimit -c unlimited * then start code from the terminal * wait for the crash * watch for a file called core produced in the current working directory With the core dump in hand we can use gdb to find out more about the crash: * run gdb <path to code binary> <path to core> * from the GDB session type bt * attach the output, you should see a full stacktrace like the one in the image below:","title":"Linux"},{"location":"Native-Crash-Issues/#read-the-stacktrace","text":"Once we have a stack trace of a crash we can user another tool for converting the cryptic messages into something useful. Let us consider a stack like this one: 0 libnode.dylib 0x000000010cfd7bf6 0x10cef5000 + 928758 1 libnode.dylib 0x000000010cfd3946 0x10cef5000 + 911686 2 libnode.dylib 0x000000010d122551 0x10cef5000 + 2282833 3 libnode.dylib 0x000000010d1ee24e 0x10cef5000 + 3117646 4 libnode.dylib 0x000000010d1ed76b 0x10cef5000 + 3114859 On macOS we can use electron-atos to print the actual stack trace: * npm install -g electron-atos * save the stack to a file e.g. crash.txt * run electron-atos --file /path/to/crash.txt --version 1.7.9 * this will take some time but eventually print this: node::EnvEnumerator(v8::PropertyCallbackInfo<v8::Array> const&) (in libnode.dylib) (node.cc:2849) node::MakeCallback(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*) (in libnode.dylib) (node.cc:1225) v8::Module::Evaluate(v8::Local<v8::Context>) (in libnode.dylib) (counters-inl.h:67) v8::internal::Builtin_Impl_DataViewPrototypeSetFloat64(v8::internal::BuiltinArguments, v8::internal::Isolate*) (in libnode.dylib) (objects-inl.h:0) v8::internal::Builtin_Impl_Stats_DataViewPrototypeSetFloat32(int, v8::internal::Object**, v8::internal::Isolate*) (in libnode.dylib) (builtins-dataview.cc:335) Note : if the command shows an error, try to remove some lines from the stack trace. It can be picky about the format.","title":"Read the Stacktrace"},{"location":"November-Plan/","text":"November 2015 Plan Theme Get ready for Connect(); //2015 and then recover. Items Before Connect(); finish: - [x] Improve Theming support, make themes work better with the tokens we produce - [x] Support to import TextMate snippets - [x] Adopt latest version of Electron - [x] Make Code Open Source on github - [x] Provide beta version of the extension API - [x] Make the gallery available - [x] Initial version of the extension documentation After Connect(); decompress: - [ ] Support the extender community - [ ] React to feedback from the community - [ ] Fix critical bugs -> tag bugs with 'November - end' milestone - [ ] Debt reduction - [ ] Tune our development workflows - [ ] Build extensions - [ ] Improve the documentation","title":"November Plan"},{"location":"November-Plan/#november-2015-plan","text":"","title":"November 2015 Plan"},{"location":"November-Plan/#theme","text":"Get ready for Connect(); //2015 and then recover.","title":"Theme"},{"location":"November-Plan/#items","text":"Before Connect(); finish: - [x] Improve Theming support, make themes work better with the tokens we produce - [x] Support to import TextMate snippets - [x] Adopt latest version of Electron - [x] Make Code Open Source on github - [x] Provide beta version of the extension API - [x] Make the gallery available - [x] Initial version of the extension documentation After Connect(); decompress: - [ ] Support the extender community - [ ] React to feedback from the community - [ ] Fix critical bugs -> tag bugs with 'November - end' milestone - [ ] Debt reduction - [ ] Tune our development workflows - [ ] Build extensions - [ ] Improve the documentation","title":"Items"},{"location":"Performance-Issues-(old)/","text":"Summary Note: this document applies to VS Code version 1.18 or older. For newer version please refer to the [[Performance Issues]] page. This page documents how you can help us to track down performance issues. It contains: - Questions about your setup - Experiments you can make to reproduce and narrow down - How to create performance profiles you can provide to us for further analysis. Questions To help us narrow down the issue please include answers for the following questions: - What is the size of your workspace/project (how many files)? - What languages are used in this project? - Which Code process consumes the most resources? VS Code is a multi process architecture and we need to know which process is causing the issue. You can identify the process based on the command line arguments that were used to start the process. - On Mac/Linux, we recommend to use the htop process viewer. You can also use the Activity Monitor to find the PID of the process and from a terminal you can run ps aux | grep <pid> to find its arguments. . - On Windows, we recommend to use the process explorer . You can also use open the Task Manager, switch to the Details tab and make the \"Command Line\" column visible as shown below. Experiments Please try to reproduce the performance problems in different setups: Can you reproduce the issue when you start VS Code with extensions disabled? You can start VS Code with extension disabled using the --disable-extensions command line argument, e.g., code --disable-extensions . If you cannot reproduce the issue when the extensions are disabled, then can you narrow down the extension by selectively disabling extensions? You can disable extensions in the Extensions Viewlet and restart/reload. Once you found the extension please file an issue against the extension. To file an issue against an extension: find the extension in the market place, and use the Issues link in the Resources section. Try to reproduce the problem on different folders; a folder with less files, a folder that is not under source control, or open a single file. Try to reproduce the issue in the VS Code Insider version. This will run our latest code and use a different setup (settings, extensions). You can install the insider version here https://code.visualstudio.com/insiders . Run VS Code when your settings are reset/empty. Open your settings, copy your customizations and then emtpy the JSON contents so that only {} is left. Run VS Code in verbose mode and check whether there is any suspicious output in the console or the developer tools. You start VS Code in verbose mode with code --verbose . Also open the DevTools (\"Help>Toggle Developer Tools\") and open the console there. Read Startup Timers When VS Code feels slow to start you can check the startup timers. Hit \"F1\" and select \"Startup Performance\". This will open developer tools and print some startup stats onto the the \"Console\". Please share these numbers with us as they often allows us to understand what is slow. Profile a VS Code window When you cannot share the workspace exposing the problem with us, then you can help us by providing performance profiles that we can analyze: If VS Code feels not responsive then please create a CPU profile of the VS Code core ( renderer process) and attach it to the issue. To create a profile: Execute \"F1 > Toggle Developer Tools.\" In the overflow menu of the developer tools Select 'More Tools > JavaScript Profiler'. In there select start. Let it profile for 30 to 60 seconds, stop it. When the performance issue happens on startup, start the profiler and then reload the window using \"F1>Reload Window.\" Save the profile to a file and attach the file to your issue. Profile Startup If VS Code is slow to start then please create a startup CPU profile. Do the following Make sure to only have one window open Quit VS Code (Cmd+Q for Mac, closing the last window on Linux/Windows) Start VS Code from the command line like so code --prof-startup VS Code will start and create two profile-files in your home-directory. Please attach these files to your issue or create a new issue with these two files Profile the Extension Process If VS Code feels not responsive and the CPU profile doesn't provide insights then please a create a CPU profile of the extension host process. The extension host process is the process that executes your installed extensions. To create a profile: Start VS Code from the command line the with --inspect-extensions=<port> -flag, for example code --inspect-extensions=9333 . In VS Code, from the 'Command Palette (F1)', select 'Developer: Toggle Developer Tools', hit Enter. Select the Console tab and find a message that starts with \"Debugger listening on port 9333\" and that ends with a chrome-devtools-link. Open that link in Chrome for dedicated DevTools for the extension host. Use the Memory and CPU profiler to understand how memory and compute resource are being used. Save the profile to a file and attach the file to your issue.","title":"Performance Issues (old)"},{"location":"Performance-Issues-(old)/#summary","text":"Note: this document applies to VS Code version 1.18 or older. For newer version please refer to the [[Performance Issues]] page. This page documents how you can help us to track down performance issues. It contains: - Questions about your setup - Experiments you can make to reproduce and narrow down - How to create performance profiles you can provide to us for further analysis.","title":"Summary"},{"location":"Performance-Issues-(old)/#questions","text":"To help us narrow down the issue please include answers for the following questions: - What is the size of your workspace/project (how many files)? - What languages are used in this project? - Which Code process consumes the most resources? VS Code is a multi process architecture and we need to know which process is causing the issue. You can identify the process based on the command line arguments that were used to start the process. - On Mac/Linux, we recommend to use the htop process viewer. You can also use the Activity Monitor to find the PID of the process and from a terminal you can run ps aux | grep <pid> to find its arguments. . - On Windows, we recommend to use the process explorer . You can also use open the Task Manager, switch to the Details tab and make the \"Command Line\" column visible as shown below.","title":"Questions"},{"location":"Performance-Issues-(old)/#experiments","text":"Please try to reproduce the performance problems in different setups: Can you reproduce the issue when you start VS Code with extensions disabled? You can start VS Code with extension disabled using the --disable-extensions command line argument, e.g., code --disable-extensions . If you cannot reproduce the issue when the extensions are disabled, then can you narrow down the extension by selectively disabling extensions? You can disable extensions in the Extensions Viewlet and restart/reload. Once you found the extension please file an issue against the extension. To file an issue against an extension: find the extension in the market place, and use the Issues link in the Resources section. Try to reproduce the problem on different folders; a folder with less files, a folder that is not under source control, or open a single file. Try to reproduce the issue in the VS Code Insider version. This will run our latest code and use a different setup (settings, extensions). You can install the insider version here https://code.visualstudio.com/insiders . Run VS Code when your settings are reset/empty. Open your settings, copy your customizations and then emtpy the JSON contents so that only {} is left. Run VS Code in verbose mode and check whether there is any suspicious output in the console or the developer tools. You start VS Code in verbose mode with code --verbose . Also open the DevTools (\"Help>Toggle Developer Tools\") and open the console there.","title":"Experiments"},{"location":"Performance-Issues-(old)/#read-startup-timers","text":"When VS Code feels slow to start you can check the startup timers. Hit \"F1\" and select \"Startup Performance\". This will open developer tools and print some startup stats onto the the \"Console\". Please share these numbers with us as they often allows us to understand what is slow.","title":"Read Startup Timers"},{"location":"Performance-Issues-(old)/#profile-a-vs-code-window","text":"When you cannot share the workspace exposing the problem with us, then you can help us by providing performance profiles that we can analyze: If VS Code feels not responsive then please create a CPU profile of the VS Code core ( renderer process) and attach it to the issue. To create a profile: Execute \"F1 > Toggle Developer Tools.\" In the overflow menu of the developer tools Select 'More Tools > JavaScript Profiler'. In there select start. Let it profile for 30 to 60 seconds, stop it. When the performance issue happens on startup, start the profiler and then reload the window using \"F1>Reload Window.\" Save the profile to a file and attach the file to your issue.","title":"Profile a VS Code window"},{"location":"Performance-Issues-(old)/#profile-startup","text":"If VS Code is slow to start then please create a startup CPU profile. Do the following Make sure to only have one window open Quit VS Code (Cmd+Q for Mac, closing the last window on Linux/Windows) Start VS Code from the command line like so code --prof-startup VS Code will start and create two profile-files in your home-directory. Please attach these files to your issue or create a new issue with these two files","title":"Profile Startup"},{"location":"Performance-Issues-(old)/#profile-the-extension-process","text":"If VS Code feels not responsive and the CPU profile doesn't provide insights then please a create a CPU profile of the extension host process. The extension host process is the process that executes your installed extensions. To create a profile: Start VS Code from the command line the with --inspect-extensions=<port> -flag, for example code --inspect-extensions=9333 . In VS Code, from the 'Command Palette (F1)', select 'Developer: Toggle Developer Tools', hit Enter. Select the Console tab and find a message that starts with \"Debugger listening on port 9333\" and that ends with a chrome-devtools-link. Open that link in Chrome for dedicated DevTools for the extension host. Use the Memory and CPU profiler to understand how memory and compute resource are being used. Save the profile to a file and attach the file to your issue.","title":"Profile the Extension Process"},{"location":"Performance-Issues/","text":"Reporting a Performance Issue To report a performance issue please use the 'Report Issue' command available in the 'Help' menu. In the Issue Reporter window that shows up, set the issue type to 'Performance Issue'. The following sections describe how you can narrow down a performance issue. Visual Studio Code is consuming a lot of CPU High CPU consumption is often caused by an issue in an extension. VS Code is running multiple processes and extensions are executed by the Extension Host process. Find out whether an extension is causing the high CPU load. You can open the Process Explorer using Help>Open Process Explorer to open a new window with a continuously updating list of VS Code processes. Try to reproduce the issue with this window open, or take a snapshot of the processes by running code --status from the command line. For information on how to run code from the command line on OS X please see the setup documentation . When the process listing in the Process Explorer or the output of code --status shows that the extensionHost is consuming a high percentage of CPU (see below) then this is likely caused by an extension. Run with Extensions Disabled The first step is to try to reproduce the problem with all extensions disabled. You can disable the extensions either from the command line using the --disable-extensions command line argument, e.g., code --disable-extensions or from the ... menu in the Extensions Viewlet: If you cannot reproduce the issue when all extensions are disabled, then can you narrow down the extension by selectively disabling extensions? You can disable extensions in the Extensions Viewlet and restart/reload. Once you found the extension, please file an issue against the extension. To file an issue against an extension open the Running Extensions editor Developer: Show Running Extensions and use the Report Issue button or find the extension in the marketplace, and use the Issues link in the Resources section. Profile the Running Extensions You can create a CPU profile and share it in the issue with the extension author or us. To create a CPU profile: - Close all instances of VSCode and start with code --inspect-extensions=9993 or any other port number. - Execute the Developer: Show Running Extensions Command. This command opens an editor with all the running extensions. - To start recording a profile click the run control in the editor's title bar: - Perform some steps in VS Code that expose the slowdown - Stop the recording using the same control. - Save the extension host profile: - Attach the profile to a Github issue. To analyze the performance yourself: - remove the trailing .txt suffix from the profile name. - Toggle the developer tools Help > Toggle Developer Tools - Open the JavaScript profiler as shown below: Load the profile using the Load button. Collect Information about the running VS Code If you can reproduce the problem with extensions disabled, then use code --status from the command line. Notice: this command requires that VS Code is already running This command collects status about your running VS Code and the workspace you have opened. You can attach this information when reporting a performance issue. The output includes information about the environment, all running VS Code processes, and the counts of some typical files in the workspace. The Renderer/Window process consumes a lot of CPU Try to reproduce the problem on different folders; a folder with less files, a folder that is not under source control, or open a single file. Try to reproduce the issue in the VS Code Insider version. This will run our latest code and use a different setup (settings, extensions). You can install the insider version here https://code.visualstudio.com/insiders . Run VS Code when your settings are reset/empty. Open your settings, copy your customizations and then empty the JSON contents so that only {} is left. Run VS Code in verbose mode and check whether there is any suspicious output in the console or the developer tools. You start VS Code in verbose mode with code --verbose . Also, open the DevTools (\"Help>Toggle Developer Tools\") and open the console there. Profiling the Renderer Process Very detailed information is captured in CPU profiles and that helps us best to narrow down on a slow-down. So, please create a CPU profile of the VS Code core ( renderer process) and attach it to the issue. To create a profile: - Execute \" F1 > Toggle Developer Tools.\" In the overflow menu of the developer tools - Select 'More Tools > JavaScript Profiler'. In there select start. - Let it profile for 30 to 60 seconds, stop it. - When the performance issue happens on startup, start the profiler and then reload the window using \" F1 > Reload Window.\" - Save the profile to a file and attach the file to your issue. Visual Studio Code starts up slowly If VS Code is slow to start then please create a startup CPU profile. Do the following - Make sure to only have one window open - Quit VS Code ( CMD+Q for Mac, closing the last window on Linux/Windows) - Start VS Code from the command line like so code --prof-startup - VS Code will start and create two profile-files in your home-directory. Please attach these files to your issue or create a new issue with these two files Read the Startup Timers When VS Code feels slow to start, you can check the startup timers. Hit F1 and select \"Startup Performance.\" This will open developer tools and print some startup stats onto the \"Console.\" Please share these numbers with us as they often allows us to understand what is slow.","title":"Performance Issues"},{"location":"Performance-Issues/#reporting-a-performance-issue","text":"To report a performance issue please use the 'Report Issue' command available in the 'Help' menu. In the Issue Reporter window that shows up, set the issue type to 'Performance Issue'. The following sections describe how you can narrow down a performance issue.","title":"Reporting a Performance Issue"},{"location":"Performance-Issues/#visual-studio-code-is-consuming-a-lot-of-cpu","text":"High CPU consumption is often caused by an issue in an extension. VS Code is running multiple processes and extensions are executed by the Extension Host process. Find out whether an extension is causing the high CPU load. You can open the Process Explorer using Help>Open Process Explorer to open a new window with a continuously updating list of VS Code processes. Try to reproduce the issue with this window open, or take a snapshot of the processes by running code --status from the command line. For information on how to run code from the command line on OS X please see the setup documentation . When the process listing in the Process Explorer or the output of code --status shows that the extensionHost is consuming a high percentage of CPU (see below) then this is likely caused by an extension.","title":"Visual Studio Code is consuming a lot of CPU"},{"location":"Performance-Issues/#run-with-extensions-disabled","text":"The first step is to try to reproduce the problem with all extensions disabled. You can disable the extensions either from the command line using the --disable-extensions command line argument, e.g., code --disable-extensions or from the ... menu in the Extensions Viewlet: If you cannot reproduce the issue when all extensions are disabled, then can you narrow down the extension by selectively disabling extensions? You can disable extensions in the Extensions Viewlet and restart/reload. Once you found the extension, please file an issue against the extension. To file an issue against an extension open the Running Extensions editor Developer: Show Running Extensions and use the Report Issue button or find the extension in the marketplace, and use the Issues link in the Resources section.","title":"Run with Extensions Disabled"},{"location":"Performance-Issues/#profile-the-running-extensions","text":"You can create a CPU profile and share it in the issue with the extension author or us. To create a CPU profile: - Close all instances of VSCode and start with code --inspect-extensions=9993 or any other port number. - Execute the Developer: Show Running Extensions Command. This command opens an editor with all the running extensions. - To start recording a profile click the run control in the editor's title bar: - Perform some steps in VS Code that expose the slowdown - Stop the recording using the same control. - Save the extension host profile: - Attach the profile to a Github issue. To analyze the performance yourself: - remove the trailing .txt suffix from the profile name. - Toggle the developer tools Help > Toggle Developer Tools - Open the JavaScript profiler as shown below: Load the profile using the Load button.","title":"Profile the Running Extensions"},{"location":"Performance-Issues/#collect-information-about-the-running-vs-code","text":"If you can reproduce the problem with extensions disabled, then use code --status from the command line. Notice: this command requires that VS Code is already running This command collects status about your running VS Code and the workspace you have opened. You can attach this information when reporting a performance issue. The output includes information about the environment, all running VS Code processes, and the counts of some typical files in the workspace.","title":"Collect Information about the running VS Code"},{"location":"Performance-Issues/#the-rendererwindow-process-consumes-a-lot-of-cpu","text":"Try to reproduce the problem on different folders; a folder with less files, a folder that is not under source control, or open a single file. Try to reproduce the issue in the VS Code Insider version. This will run our latest code and use a different setup (settings, extensions). You can install the insider version here https://code.visualstudio.com/insiders . Run VS Code when your settings are reset/empty. Open your settings, copy your customizations and then empty the JSON contents so that only {} is left. Run VS Code in verbose mode and check whether there is any suspicious output in the console or the developer tools. You start VS Code in verbose mode with code --verbose . Also, open the DevTools (\"Help>Toggle Developer Tools\") and open the console there.","title":"The Renderer/Window process consumes a lot of CPU"},{"location":"Performance-Issues/#profiling-the-renderer-process","text":"Very detailed information is captured in CPU profiles and that helps us best to narrow down on a slow-down. So, please create a CPU profile of the VS Code core ( renderer process) and attach it to the issue. To create a profile: - Execute \" F1 > Toggle Developer Tools.\" In the overflow menu of the developer tools - Select 'More Tools > JavaScript Profiler'. In there select start. - Let it profile for 30 to 60 seconds, stop it. - When the performance issue happens on startup, start the profiler and then reload the window using \" F1 > Reload Window.\" - Save the profile to a file and attach the file to your issue.","title":"Profiling the Renderer Process"},{"location":"Performance-Issues/#visual-studio-code-starts-up-slowly","text":"If VS Code is slow to start then please create a startup CPU profile. Do the following - Make sure to only have one window open - Quit VS Code ( CMD+Q for Mac, closing the last window on Linux/Windows) - Start VS Code from the command line like so code --prof-startup - VS Code will start and create two profile-files in your home-directory. Please attach these files to your issue or create a new issue with these two files","title":"Visual Studio Code starts up slowly"},{"location":"Performance-Issues/#read-the-startup-timers","text":"When VS Code feels slow to start, you can check the startup timers. Hit F1 and select \"Startup Performance.\" This will open developer tools and print some startup stats onto the \"Console.\" Please share these numbers with us as they often allows us to understand what is slow.","title":"Read the Startup Timers"},{"location":"Pointer-Device--&-Touch-support/","text":"Which event to listen to Pointer/Mouse Event PointerDown/MouseDown Pointer/MouseMove monitor Differentiate Touch/Pen/Mouse Touch/Gesture Gesture Helper Troubleshoot: touch not working with native elements Base elements input/checkbox scrollable element list view Which event to listen to Choosing the right event to listen to is a hard decision to make, as there isn't a single unified browser standard to follow. If you are using basic elements from vs/base/browser , you may want to only listen to predefined event listeners on them. However if you are building a plain new view component, here is a quick cheatsheet Do you customize overflow/scrolling, or double clicking? No Listen to both scroll for scrolling Listen to both click for clicking. Yes Add the element to Gesture Listen to both wheel and GestureEvent.change for scrolling Listen to both click and GestureEvent.Tap for clicking. ( GestureEvent.tapCount == 2 for double clicking) Listen to GestureEvent.contextmenu for content menu (right click) For more details, please read blow: Pointer/Mouse Event Pointer events are DOM events fired by pointer devices, which include Mouse, Touch and Pen. Pointer events inherit from Mouse events, so we only need to adopt following generic mouse/pointer listeners without modifying out mouse handler code. PointerDown/MouseDown import * as dom from \u2018 vs / base / browser / dom \u2019 // dom.addDisposableListener(domNode, \u2018mouseDown\u2019, () => {}) dom . addDisposableGenericMouseDownListener ( domNode , () => {}) // dom.addDisposableListener(domNode, \u2018mouseUp\u2019, () => {}) dom . addDisposableGenericMouseUpListener ( domNode , () => {}) Pointer/MouseMove monitor import * as dom from \u2018 vs / base / browser / GlobalMouseMoveMonitor \u2019 // no change at all this . _mouseMoveMonitor = this . _register ( new GlobalMouseMoveMonitor < IStandardMouseMoveEventData > ()); this . _mouseMoveMonitor . startMonitoring ( \u2026 ) Under the hood we will do browser feature and platform detection to decide which is the right event to listen to. It\u2019s not suggested to bind your own listeners to PointerEvent as PointerEvent can coexist with MosueEvent , browser/platform detection code is still needed to avoid the mouse event handlers not being called twice. Differentiate Touch/Pen/Mouse The generic mouse/pointer event will carry device information if it\u2019s from a pointer device, which can be accessed by reading event.pointerType dom . addDisposableGenericMouseDownListner ( domNode , ( e ) => { const pointerType = < any > e . pointerType ; switch ( key ) { case \u2018 touch \u2019 : break ; case \u2018 mouse \u2019 : break ; case \u2018 pen \u2019 : break ; default : break ; } }) Touch/Gesture Gesture Helper Gesture helper vs/base/browser/touch#Gesture will translate native touch events ( touchStart , touchEnd , touchMove ) to richer Gesture events based on how long users touch and how much users move their finger on the screen. Please always use Gesture for consistence, unless you want to roll in your own touch implementation. To register gesture event listener on a DOM node, register the DOM node to Gesture store first and listen to Gesture events the same as normal DOM events. import * as dom from \u2018 vs / base / browser / dom \u2019 ; import { Gesture , EventType as GestureEventType } from \u2018 vs / base / browser / touch \u2019 ; Gesture . addTarget ( domNode ); dom . addDisposableEventListner ( domNode , GestureEventType . Tap , ( e ) => {}); Troubleshoot: native touch are eaten Most of the time, if touch doesn\u2019t work with native elements in your view, please check if one of your view\u2019s ancestors is being tracked by Gesture . Gesture will prevent default behavior of touch events when a DOM node is being tracked by it, which means the DOM nodes\u2019 all descendants will no longer receive any native touch events. When above scenario happens (and you can\u2019t change the behavior of the ancestor), do one of following Gesture.ignoreTarget to let Gesture ignore touch events happening on the element Gesture.addTarget to the element if you want to customize its touch behavior Base elements inputbox/checkbox vs/base/browser/ui/inputBox and vs/base/browser/ui/checkbox , by default inputBox and checkbox add themselves to Gesture\u2019s ignore list Scrollable Element Scrollable Element scrolls when wheel / mousewheel events are triggered, but by default it\u2019s not tracked by Gesture to ensure it doesn\u2019t break the native touch experience on its inner elements. To make scrollable element touch friendly, when using it, please make sure you listen to at least Tap and Change Gesture events. Gesture . addTarget ( domNode ) dom . addDisposableEventListner ( domNode , GestureEventType . Tap , ( e ) => {}); // Click dom . addDisposableEventListner ( domNode , GestureEventType . Change , ( e ) => {}); // Scroll List View List View internally listens to both scroll events and GestureEventType.Change events (as it\u2019s virtualized ;)). While using List View, you don\u2019t need to worry about scrolling at all but the catch is native touch down won\u2019t work on inner elements as the events are trapped by Gesture . Solution: Gesture.ignoreTarget to let Gesture ignore touch events happening on the element Gesture.addTarget to the element if you want to customize its touch behavior","title":"Pointer Device  & Touch support"},{"location":"Pointer-Device--&-Touch-support/#which-event-to-listen-to","text":"Choosing the right event to listen to is a hard decision to make, as there isn't a single unified browser standard to follow. If you are using basic elements from vs/base/browser , you may want to only listen to predefined event listeners on them. However if you are building a plain new view component, here is a quick cheatsheet Do you customize overflow/scrolling, or double clicking? No Listen to both scroll for scrolling Listen to both click for clicking. Yes Add the element to Gesture Listen to both wheel and GestureEvent.change for scrolling Listen to both click and GestureEvent.Tap for clicking. ( GestureEvent.tapCount == 2 for double clicking) Listen to GestureEvent.contextmenu for content menu (right click) For more details, please read blow:","title":"Which event to listen to"},{"location":"Pointer-Device--&-Touch-support/#pointermouse-event","text":"Pointer events are DOM events fired by pointer devices, which include Mouse, Touch and Pen. Pointer events inherit from Mouse events, so we only need to adopt following generic mouse/pointer listeners without modifying out mouse handler code.","title":"Pointer/Mouse Event"},{"location":"Pointer-Device--&-Touch-support/#pointerdownmousedown","text":"import * as dom from \u2018 vs / base / browser / dom \u2019 // dom.addDisposableListener(domNode, \u2018mouseDown\u2019, () => {}) dom . addDisposableGenericMouseDownListener ( domNode , () => {}) // dom.addDisposableListener(domNode, \u2018mouseUp\u2019, () => {}) dom . addDisposableGenericMouseUpListener ( domNode , () => {})","title":"PointerDown/MouseDown"},{"location":"Pointer-Device--&-Touch-support/#pointermousemove-monitor","text":"import * as dom from \u2018 vs / base / browser / GlobalMouseMoveMonitor \u2019 // no change at all this . _mouseMoveMonitor = this . _register ( new GlobalMouseMoveMonitor < IStandardMouseMoveEventData > ()); this . _mouseMoveMonitor . startMonitoring ( \u2026 ) Under the hood we will do browser feature and platform detection to decide which is the right event to listen to. It\u2019s not suggested to bind your own listeners to PointerEvent as PointerEvent can coexist with MosueEvent , browser/platform detection code is still needed to avoid the mouse event handlers not being called twice.","title":"Pointer/MouseMove monitor"},{"location":"Pointer-Device--&-Touch-support/#differentiate-touchpenmouse","text":"The generic mouse/pointer event will carry device information if it\u2019s from a pointer device, which can be accessed by reading event.pointerType dom . addDisposableGenericMouseDownListner ( domNode , ( e ) => { const pointerType = < any > e . pointerType ; switch ( key ) { case \u2018 touch \u2019 : break ; case \u2018 mouse \u2019 : break ; case \u2018 pen \u2019 : break ; default : break ; } })","title":"Differentiate Touch/Pen/Mouse"},{"location":"Pointer-Device--&-Touch-support/#touchgesture","text":"","title":"Touch/Gesture"},{"location":"Pointer-Device--&-Touch-support/#gesture-helper","text":"Gesture helper vs/base/browser/touch#Gesture will translate native touch events ( touchStart , touchEnd , touchMove ) to richer Gesture events based on how long users touch and how much users move their finger on the screen. Please always use Gesture for consistence, unless you want to roll in your own touch implementation. To register gesture event listener on a DOM node, register the DOM node to Gesture store first and listen to Gesture events the same as normal DOM events. import * as dom from \u2018 vs / base / browser / dom \u2019 ; import { Gesture , EventType as GestureEventType } from \u2018 vs / base / browser / touch \u2019 ; Gesture . addTarget ( domNode ); dom . addDisposableEventListner ( domNode , GestureEventType . Tap , ( e ) => {});","title":"Gesture Helper"},{"location":"Pointer-Device--&-Touch-support/#troubleshoot-native-touch-are-eaten","text":"Most of the time, if touch doesn\u2019t work with native elements in your view, please check if one of your view\u2019s ancestors is being tracked by Gesture . Gesture will prevent default behavior of touch events when a DOM node is being tracked by it, which means the DOM nodes\u2019 all descendants will no longer receive any native touch events. When above scenario happens (and you can\u2019t change the behavior of the ancestor), do one of following Gesture.ignoreTarget to let Gesture ignore touch events happening on the element Gesture.addTarget to the element if you want to customize its touch behavior","title":"Troubleshoot: native touch are eaten"},{"location":"Pointer-Device--&-Touch-support/#base-elements","text":"","title":"Base elements"},{"location":"Pointer-Device--&-Touch-support/#inputboxcheckbox","text":"vs/base/browser/ui/inputBox and vs/base/browser/ui/checkbox , by default inputBox and checkbox add themselves to Gesture\u2019s ignore list","title":"inputbox/checkbox"},{"location":"Pointer-Device--&-Touch-support/#scrollable-element","text":"Scrollable Element scrolls when wheel / mousewheel events are triggered, but by default it\u2019s not tracked by Gesture to ensure it doesn\u2019t break the native touch experience on its inner elements. To make scrollable element touch friendly, when using it, please make sure you listen to at least Tap and Change Gesture events. Gesture . addTarget ( domNode ) dom . addDisposableEventListner ( domNode , GestureEventType . Tap , ( e ) => {}); // Click dom . addDisposableEventListner ( domNode , GestureEventType . Change , ( e ) => {}); // Scroll","title":"Scrollable Element"},{"location":"Pointer-Device--&-Touch-support/#list-view","text":"List View internally listens to both scroll events and GestureEventType.Change events (as it\u2019s virtualized ;)). While using List View, you don\u2019t need to worry about scrolling at all but the catch is native touch down won\u2019t work on inner elements as the events are trapped by Gesture . Solution: Gesture.ignoreTarget to let Gesture ignore touch events happening on the element Gesture.addTarget to the element if you want to customize its touch behavior","title":"List View"},{"location":"Publish-vscode-types/","text":"We are using @types/vscode for publishing vscode.d.ts . See https://github.com/Microsoft/vscode/issues/70175 for details. For each release, we will need to publish a new version to DefinitelyTyped. Here are the steps: When you publish a tag such as 1.34.0 CI creates a branch vscode-types-1.34.0 at https://github.com/DefinitelyTyped/DefinitelyTyped with commit message VS Code 1.34.0 Extension API . CI sends a link to create PR to #release channel of VS Code Slack. Ask either @octref, @jrieken, @kieferrm or @egamma to merge the PR. @types/vscode will be published in ~10 minutes.","title":"Publish vscode types"},{"location":"Related-Projects/","text":"The Code project consists of the vscode repository plus a number of satellite projects. Core Repositories Component Repository Standalone Monaco Editor monaco-editor Node Debug (for node < v8.0) vscode-node-debug Node Debug (for node >= v6.3) vscode-node-debug2 Node Debug Adapter vscode-debugadapter-node Chrome Debug Core vscode-chrome-debug-core File Watcher vscode-filewatcher-windows vscode.d.ts vscode-extension-code vscode-languageserver vscode-languageserver-node TextMate tokenizer vscode-textmate AMD Loader vscode-loader Windows Process Tree vscode-windows-process-tree References View vscode-references-view Octicons Font vscode-octicons-font SDK Tools Tool Repository yo code generator vscode-generator-code vsce publishing tool vscode-vsce Telemetry for extensions vscode-extension-telemetry NLS Tools NLS Tools Documentation Repository vscode-docs Languages Language Repository Language server protocol Language Server Protocol CSS/LESS/SCSS Language Service vscode-css-languageservice JSON Language Service vscode-json-languageservice HTML Language Service vscode-html-languageservice Go vscode-go Emmet Helper vscode-emmet-helper Emmet vscode-emmet Markdown Textmate Grammar vscode-markdown-tm-grammar Localization Tool Repository NLS Tools NLS Tools Source Code Control Provider Repository Github Github Pull Requests Linters Linter Repository TSLint vscode-tslint TSLint TypeScript Plugin vscode-typescript-tslint-plugin ESLint vscode-eslint jshint vscode-jshint Debuggers Debugger Repository Chrome Debugger vscode-chrome-debug NPM Repository vscode-npm-scripts Keybindings Tool Repository Sublime vscode-sublime-keybindings Atom vscode-atom-keybindings Visual Studio vscode-vs-keybindings Themes Theme vscode-themes Samples Sample Repository Mock Debug Adapter vscode-mock-debug Samples vscode-extension-samples Debugging Recipes vscode-recipes","title":"Related Projects"},{"location":"Related-Projects/#core-repositories","text":"Component Repository Standalone Monaco Editor monaco-editor Node Debug (for node < v8.0) vscode-node-debug Node Debug (for node >= v6.3) vscode-node-debug2 Node Debug Adapter vscode-debugadapter-node Chrome Debug Core vscode-chrome-debug-core File Watcher vscode-filewatcher-windows vscode.d.ts vscode-extension-code vscode-languageserver vscode-languageserver-node TextMate tokenizer vscode-textmate AMD Loader vscode-loader Windows Process Tree vscode-windows-process-tree References View vscode-references-view Octicons Font vscode-octicons-font","title":"Core Repositories"},{"location":"Related-Projects/#sdk-tools","text":"Tool Repository yo code generator vscode-generator-code vsce publishing tool vscode-vsce Telemetry for extensions vscode-extension-telemetry NLS Tools NLS Tools","title":"SDK Tools"},{"location":"Related-Projects/#documentation","text":"Repository vscode-docs","title":"Documentation"},{"location":"Related-Projects/#languages","text":"Language Repository Language server protocol Language Server Protocol CSS/LESS/SCSS Language Service vscode-css-languageservice JSON Language Service vscode-json-languageservice HTML Language Service vscode-html-languageservice Go vscode-go Emmet Helper vscode-emmet-helper Emmet vscode-emmet Markdown Textmate Grammar vscode-markdown-tm-grammar","title":"Languages"},{"location":"Related-Projects/#localization","text":"Tool Repository NLS Tools NLS Tools","title":"Localization"},{"location":"Related-Projects/#source-code-control","text":"Provider Repository Github Github Pull Requests","title":"Source Code Control"},{"location":"Related-Projects/#linters","text":"Linter Repository TSLint vscode-tslint TSLint TypeScript Plugin vscode-typescript-tslint-plugin ESLint vscode-eslint jshint vscode-jshint","title":"Linters"},{"location":"Related-Projects/#debuggers","text":"Debugger Repository Chrome Debugger vscode-chrome-debug","title":"Debuggers"},{"location":"Related-Projects/#npm","text":"Repository vscode-npm-scripts","title":"NPM"},{"location":"Related-Projects/#keybindings","text":"Tool Repository Sublime vscode-sublime-keybindings Atom vscode-atom-keybindings Visual Studio vscode-vs-keybindings","title":"Keybindings"},{"location":"Related-Projects/#themes","text":"Theme vscode-themes","title":"Themes"},{"location":"Related-Projects/#samples","text":"Sample Repository Mock Debug Adapter vscode-mock-debug Samples vscode-extension-samples Debugging Recipes vscode-recipes","title":"Samples"},{"location":"Release-Process/","text":"This page describes how we use branches and tags with every new release. Example During endgame, a release branch is created: release/1.10 . VS Code is functionally and smoke tested with a build from that branch. Any critical issues should have fixed delivered to both master and release/1.10 and properly verified with step 2. When there are no more additional critical issues, a release tag 1.10.0 is created. VS Code is built from the 1.10.0 tag and shipped to customers. Any further recovery builds should be from commits on the release/1.10 branch and patch versions should be used: 1.10.1 , 1.10.2 , etc.","title":"Release Process"},{"location":"Removing-Insiders/","text":"Mac 1) Remove Visual Studio Code - Insiders.app GUI Based: Open Finder -> Applications. Right click \"Visual Studio Code - Insiders.app\" and move it to the trash. Terminal: rm -r /Applications/Visual\\ Studio\\ Code\\ -\\ Insiders.app 2) Remove .vscode-insiders folder Terminal: rm -r .vscode-insiders Windows Uninstall Visual Studio Code - Insiders GUI Based: Navigate to Control Panel -> Programs -> Programs and Features. Search for \"Visual Studio Code - Insider\", right click and select \"Uninstall\" Linux To remove the .deb package (Debian and Ubuntu): sudo apt-get purge code-insiders To remove the .rpm package (Red Hat, CentOS and SUSE): sudo yum remove code-insiders","title":"Removing Insiders"},{"location":"Removing-Insiders/#mac","text":"1) Remove Visual Studio Code - Insiders.app GUI Based: Open Finder -> Applications. Right click \"Visual Studio Code - Insiders.app\" and move it to the trash. Terminal: rm -r /Applications/Visual\\ Studio\\ Code\\ -\\ Insiders.app 2) Remove .vscode-insiders folder Terminal: rm -r .vscode-insiders","title":"Mac"},{"location":"Removing-Insiders/#windows","text":"Uninstall Visual Studio Code - Insiders GUI Based: Navigate to Control Panel -> Programs -> Programs and Features. Search for \"Visual Studio Code - Insider\", right click and select \"Uninstall\"","title":"Windows"},{"location":"Removing-Insiders/#linux","text":"To remove the .deb package (Debian and Ubuntu): sudo apt-get purge code-insiders To remove the .rpm package (Red Hat, CentOS and SUSE): sudo yum remove code-insiders","title":"Linux"},{"location":"Roadmap-2017/","text":"The VS Code Roadmap 2017 With a very successful 2016 behind us, now is the good time to look towards the future. We typically look out 6 to 12 months, establish a set of themes we want to work towards, and then schedule work each milestone supporting those themes. When planning, we typically look at potential work from three perspectives: Happy Coding: At its core VS Code is a lightweight, keyboard focused, multi-language code editor. Features such as tabs, the task system, and the integrated terminal are all core experiences every developer uses on a daily basis. VS Code is already pleasant to code with, and we want to make the experience even more pleasant. Node, JavaScript, and TypeScript: On top of the core editor, we want to enable great end-to-end experiences for individual languages and frameworks. We build the Node, JavaScript, and TypeScript end-to-end experiences on top of the core platform and want to provide a great experience out of the box. A Rich Extension Ecosystem: Because we cannot deliver an experience for every language, VS Code has a rich extensibility system which enables an ecosystem of great end-to-end experiences for the breadth of modern languages and frameworks such as C#, Go, Python, C++, and more. In fact, we deliver the Node, TypeScript, and JavaScript experience using the exact same public APIs ensuring that developers have consistent experiences across the breadth of languages they use. VS Code will continue to ship monthly, and we'll make progress against each of the following themes during each iteration. We describe some initiatives as \"investigations\" which simply means our goal in the next few months is to better understand the problem and potential solutions before committing to real feature work. Once an investigation is done, we will update our plan, either deferring the initiative or committing to it. Legend of annotations: Mark Description bullet work not started check mark work completed on-going work stretch goal Happy Coding with VS Code Over the past year, we have worked hard to eliminate core adoption blockers - the addition of Tabs and an Integrated Terminal are two good examples, but there is still work to do here. Customers often tell us that the lack of multiple root folder workspaces means that they can't use VS Code as their day-to-day editor. We will continue to address missing features, we will continue to make it easy for first time users to instantly be productive with VS Code, and we'll continue to add new experiences to make VS Code even more pleasant to use. Workbench Support multiple root folder workspaces Support more flexible layouts, e.g., vertical panels Improve UI notification system Improve key binding customization experience (hide keycodes, inconsistent command names from user) Support theming of the workbench Import, export of settings (VS Code as well as other tools) Core Editor Drag and drop Copy and paste as formatted HTML Minimap Improve support for large files Mouse map settings - support to customize commands bound to the mouse Terminal Link detection Support splitting, viewing multiple terminals Improve selection in the terminal Tasks Task output in Terminal Bind tasks to keyboard shortcuts Simplify running and managing multiple tasks Provide an API for TaskProviders so that extensions can contribute task detection for particular task runners Performance Monitor and improve startup time Source Code Control SCM provider API Git support as an extension (ships with VS Code) Support partners building new SCM providers (e.g. Visual Studio Team Services) Support for merging changes Enable Explorer decorations for SCM status (e.g. colorize modified files) Support to view incoming changes Accessibility Improve usability of VS Code using NVDA on Windows Ensure all commands are accessible from the Command Palette Ensure keyboard accessibility in all dialogs Narrator support (monaco-editor) Setup Linux auto update Windows 64bit support TypeScript, JavaScript, and Node Development We want VS Code to be a great tool for developing modern MEAN/MERN applications with JavaScript and TypeScript. We will continue to collaborate deeply with the TypeScript team to deliver the richest code editing, navigation, and understanding experiences for both TypeScript and JavaScript. We will continue to make it easy to configure debugging of your Node based applications while adding support for both client and server side debugging, asynchronous call stacks, and even live editing of your applications during a debug session. JavaScript and TypeScript \ud83c\udfc3 Code actions and refactorings (partner with TypeScript) tsconfig.json and jsconfig.json IntelliSense (completions) and validation \ud83c\udfc3 IntelliSense (completions) support for HTML embedded in JavaScript and TypeScript (Angular, React), partner with TypeScript Assist user entering JSDoc comments Improve JavaScript Linting/type checking TypeScript compile on save Enable semantic colorization (see Extensibility) Investigate improving support for popular JS technologies (webpack, Babel) HTML, SASS, CSS, LESS Color picker for CSS/LESS/SASS/HTML close end tag in HTML Investigate SASS/LESS/CSS multi-file support (understand imports) Investigate live preview of HTML Node Provide Node/MEAN Extension packs Update recommended Node extension triggers (e.g. on package.json , recommend Node extension pack) Include the npm extension functionality Node Debugging Async stacks Column break points Investigate profiling support Investigate a Mocha test runner Investigate MongoDB extension Extension creation, discovery, and management Of course, VS Code is not just a Node, JavaScript, and TypeScript tool. Our rich extensibility model and extension ecosystem means that you can install support for just about every modern language and framework, from C++ to C# to Go, Python, and more. Looking ahead, we want to make acquiring extensions for these languages (and more!) as easy as possible. We want to enable extension authors to be able to be more productive and deliver richer experiences to developers. And at the same time, we want to give users more control over how those extensions contribute to their environment. For extension authors Investigate support for extensions that need to install additional tools on first run (e.g. .NET Core debugger, Go tools) Continue to improve and expand extension samples Add recently installed or recently updated extensions to the Welcome page, with links to open the extension's README Support extensions contributing an interactive playground Formalize HTML Preview API Support explorer like contributions (refining the Custom explorer API exploration) For language extension authors Enable language services to contribute semantic coloring Evolve the Language Server Protocol Provide users with more control over extension contributions Identify and resolve keybindings conflicts Contribute to Extensions GO Docker Summary These are examples of just some of the work we will be focusing on in the next 6 to 12 months. We continuously tune the plan based on feedback and we will provide more detail in each of our monthly iteration plans. Please follow along and let us know what you think!","title":"Roadmap 2017"},{"location":"Roadmap-2017/#the-vs-code-roadmap-2017","text":"With a very successful 2016 behind us, now is the good time to look towards the future. We typically look out 6 to 12 months, establish a set of themes we want to work towards, and then schedule work each milestone supporting those themes. When planning, we typically look at potential work from three perspectives: Happy Coding: At its core VS Code is a lightweight, keyboard focused, multi-language code editor. Features such as tabs, the task system, and the integrated terminal are all core experiences every developer uses on a daily basis. VS Code is already pleasant to code with, and we want to make the experience even more pleasant. Node, JavaScript, and TypeScript: On top of the core editor, we want to enable great end-to-end experiences for individual languages and frameworks. We build the Node, JavaScript, and TypeScript end-to-end experiences on top of the core platform and want to provide a great experience out of the box. A Rich Extension Ecosystem: Because we cannot deliver an experience for every language, VS Code has a rich extensibility system which enables an ecosystem of great end-to-end experiences for the breadth of modern languages and frameworks such as C#, Go, Python, C++, and more. In fact, we deliver the Node, TypeScript, and JavaScript experience using the exact same public APIs ensuring that developers have consistent experiences across the breadth of languages they use. VS Code will continue to ship monthly, and we'll make progress against each of the following themes during each iteration. We describe some initiatives as \"investigations\" which simply means our goal in the next few months is to better understand the problem and potential solutions before committing to real feature work. Once an investigation is done, we will update our plan, either deferring the initiative or committing to it. Legend of annotations: Mark Description bullet work not started check mark work completed on-going work stretch goal","title":"The VS Code Roadmap 2017"},{"location":"Roadmap-2017/#happy-coding-with-vs-code","text":"Over the past year, we have worked hard to eliminate core adoption blockers - the addition of Tabs and an Integrated Terminal are two good examples, but there is still work to do here. Customers often tell us that the lack of multiple root folder workspaces means that they can't use VS Code as their day-to-day editor. We will continue to address missing features, we will continue to make it easy for first time users to instantly be productive with VS Code, and we'll continue to add new experiences to make VS Code even more pleasant to use.","title":"Happy Coding with VS Code"},{"location":"Roadmap-2017/#workbench","text":"Support multiple root folder workspaces Support more flexible layouts, e.g., vertical panels Improve UI notification system Improve key binding customization experience (hide keycodes, inconsistent command names from user) Support theming of the workbench Import, export of settings (VS Code as well as other tools)","title":"Workbench"},{"location":"Roadmap-2017/#core-editor","text":"Drag and drop Copy and paste as formatted HTML Minimap Improve support for large files Mouse map settings - support to customize commands bound to the mouse","title":"Core Editor"},{"location":"Roadmap-2017/#terminal","text":"Link detection Support splitting, viewing multiple terminals Improve selection in the terminal","title":"Terminal"},{"location":"Roadmap-2017/#tasks","text":"Task output in Terminal Bind tasks to keyboard shortcuts Simplify running and managing multiple tasks Provide an API for TaskProviders so that extensions can contribute task detection for particular task runners","title":"Tasks"},{"location":"Roadmap-2017/#performance","text":"Monitor and improve startup time","title":"Performance"},{"location":"Roadmap-2017/#source-code-control","text":"SCM provider API Git support as an extension (ships with VS Code) Support partners building new SCM providers (e.g. Visual Studio Team Services) Support for merging changes Enable Explorer decorations for SCM status (e.g. colorize modified files) Support to view incoming changes","title":"Source Code Control"},{"location":"Roadmap-2017/#accessibility","text":"Improve usability of VS Code using NVDA on Windows Ensure all commands are accessible from the Command Palette Ensure keyboard accessibility in all dialogs Narrator support (monaco-editor)","title":"Accessibility"},{"location":"Roadmap-2017/#setup","text":"Linux auto update Windows 64bit support","title":"Setup"},{"location":"Roadmap-2017/#typescript-javascript-and-node-development","text":"We want VS Code to be a great tool for developing modern MEAN/MERN applications with JavaScript and TypeScript. We will continue to collaborate deeply with the TypeScript team to deliver the richest code editing, navigation, and understanding experiences for both TypeScript and JavaScript. We will continue to make it easy to configure debugging of your Node based applications while adding support for both client and server side debugging, asynchronous call stacks, and even live editing of your applications during a debug session.","title":"TypeScript, JavaScript, and Node Development"},{"location":"Roadmap-2017/#javascript-and-typescript","text":"\ud83c\udfc3 Code actions and refactorings (partner with TypeScript) tsconfig.json and jsconfig.json IntelliSense (completions) and validation \ud83c\udfc3 IntelliSense (completions) support for HTML embedded in JavaScript and TypeScript (Angular, React), partner with TypeScript Assist user entering JSDoc comments Improve JavaScript Linting/type checking TypeScript compile on save Enable semantic colorization (see Extensibility) Investigate improving support for popular JS technologies (webpack, Babel)","title":"JavaScript and TypeScript"},{"location":"Roadmap-2017/#html-sass-css-less","text":"Color picker for CSS/LESS/SASS/HTML close end tag in HTML Investigate SASS/LESS/CSS multi-file support (understand imports) Investigate live preview of HTML","title":"HTML, SASS, CSS, LESS"},{"location":"Roadmap-2017/#node","text":"Provide Node/MEAN Extension packs Update recommended Node extension triggers (e.g. on package.json , recommend Node extension pack) Include the npm extension functionality Node Debugging Async stacks Column break points Investigate profiling support Investigate a Mocha test runner Investigate MongoDB extension","title":"Node"},{"location":"Roadmap-2017/#extension-creation-discovery-and-management","text":"Of course, VS Code is not just a Node, JavaScript, and TypeScript tool. Our rich extensibility model and extension ecosystem means that you can install support for just about every modern language and framework, from C++ to C# to Go, Python, and more. Looking ahead, we want to make acquiring extensions for these languages (and more!) as easy as possible. We want to enable extension authors to be able to be more productive and deliver richer experiences to developers. And at the same time, we want to give users more control over how those extensions contribute to their environment.","title":"Extension creation, discovery, and management"},{"location":"Roadmap-2017/#for-extension-authors","text":"Investigate support for extensions that need to install additional tools on first run (e.g. .NET Core debugger, Go tools) Continue to improve and expand extension samples Add recently installed or recently updated extensions to the Welcome page, with links to open the extension's README Support extensions contributing an interactive playground Formalize HTML Preview API Support explorer like contributions (refining the Custom explorer API exploration)","title":"For extension authors"},{"location":"Roadmap-2017/#for-language-extension-authors","text":"Enable language services to contribute semantic coloring Evolve the Language Server Protocol","title":"For language extension authors"},{"location":"Roadmap-2017/#provide-users-with-more-control-over-extension-contributions","text":"Identify and resolve keybindings conflicts","title":"Provide users with more control over extension contributions"},{"location":"Roadmap-2017/#contribute-to-extensions","text":"GO Docker","title":"Contribute to Extensions"},{"location":"Roadmap-2017/#summary","text":"These are examples of just some of the work we will be focusing on in the next 6 to 12 months. We continuously tune the plan based on feedback and we will provide more detail in each of our monthly iteration plans. Please follow along and let us know what you think!","title":"Summary"},{"location":"Roadmap-2018/","text":"The VS Code Roadmap 2018 As 2017 comes to an end, now is the time to look towards the future. We typically look out 6 to 12 months, establish a set of themes we want to work towards, and then schedule work each milestone supporting those themes. When planning, we look at potential work from three perspectives: Happy Coding: At its core VS Code is a lightweight, keyboard focused, multi-language code editor. VS Code is already pleasant to code with, and we want to make the experience even more pleasant, for both new and existing users. Node, JavaScript, and TypeScript: On top of the core editor, we want to enable great end-to-end experiences for individual languages and frameworks. We build the Node, JavaScript, and TypeScript end-to-end experiences on top of the core platform and want to provide a great experience out of the box. A Rich Extension Ecosystem: Because we cannot build support for every language, VS Code has a rich extensibility system which enables an ecosystem of great end-to-end experiences for the breadth of languages and frameworks such as C#, Go, Python, C++, Java, and more. In fact, we deliver the Node, TypeScript, and JavaScript support using the exact same public APIs ensuring that developers have consistent experiences across the breadth of languages they use. VS Code will continue to ship monthly, and we'll make progress against each of the following themes during each iteration. We describe some initiatives as \"investigations\" which simply means our goal in the next few months is to better understand the problem and potential solutions before scheduling real feature work. Once an investigation is done, we will update our plan, either deferring the initiative or committing to it. Legend of annotations: Mark Description bullet work not started check mark work completed on-going work stretch goal Happy Coding with VS Code Over the past 6 months, we\u2019ve worked hard to eliminate blockers that make it hard for people to adopt VS Code. For example, we make multi-root workspaces available in the October 2017 Stable builds. We continue to work with the extension authors to also enable their extension to support multi-root workspaces. However, we\u2019re not done. You have asked for more flexibility in how you position editors and panes, for multi-selection in the explorer, and more. You will see a significant focus on the fundamentals in the next few months as well, focused on performance, localized language support, and accessibility so that every developer can be productive with VS Code. Fundamentals A key attribute of an 'editor' is performance and stability, if we add features at the expense of these fundamentals we risk losing a large part of what keeps us competitive in the 'editor' category. Improve startup performance: keep start-up times within a predictable and suitable range for users across all platforms Reduce resource/memory consumption: what can we do to reduce and control resource consumption of helper processes Continue to improve accessibility, terminal menu bar on Windows Support language packs for community-contributed translations Improve the Windows update experience Improve serviceability by providing additional diagnostics Workbench Improve intra-file navigation outline bread crumb Support to layout the editor area as a grid Investigate improved settings discovery and editing Finish Multi-root folder Workspaces support and support extension authors in adopting it Show SCM status in the explorer (including .gitignored files) Support vertical panel layout Support multi-selection in the explorer for common actions e.g. delete Improve notification UI Support diagnostics with multiple error locations Editor Improve the performance and scalability of editor decorations Improve Text Storage implementation Investigate into improved column selection Investigate into semantic coloring support Render more than text in the minimap Terminal Support splitting and viewing of multiple terminals Source Control Integration Support to view changes directly inside the editor using a peek/inline experience Investigate integrated history view Investigate support to better collaborate on pull requests WSL Support Improve the WSL support. Investigate how we can enable extensions to leverage tools available in WSL. Node, JavaScript, and TypeScript Development We want VS Code to be a great tool for developing modern web applications with JavaScript and TypeScript and we will continue to collaborate deeply with the TypeScript team to deliver the richest code editing, navigation, and understanding experiences for both TypeScript and JavaScript. We will continue to make it easy to configure debugging of your Node based applications and include support for both client and server side debugging in the box. Language Server Protocol Continue to refine and improve to Language Server Protocol with support from the community. Enable proposed protocol additions from the community. Debug Adaptor Protocol Continue to refine and improve to Debug Adapter Protocol with support from the community. Expose more UI for DAP features that are currently not surfaced in the VS Code debugging UI. This includes moving the loaded scripts UI into the core. Move the Debug Adapter Protocol into a separate repository and provide a web site. JavaScript Improve go-to-definition/implementation of a JavaScript symbol when a type cannot be precisely resolved TypeScript (and JavaScript) We closely collaborate with TypeScript, see also the TypeScript roadmap Organize imports, remove unused imports Tag completion in jsx and tsx files Add more refactorings Investigate into improving TypeScript Source Maps so that they are more precise and includes variable mappings. Webpack Linting/validation of configuration Make it easier to configure jsconfig.json / tsconfig.json for webpack Debug Improve hovering and inline values by leveraging language knowledge Continue to invest in documenting debugging recipes for common configurations Support hot code replace for non-JS scenarios e.g. Java. Support LogPoints Extension creation, discovery, and management Of course, VS Code is not just a Node, JavaScript, and TypeScript tool. Our rich extensibility model and extension ecosystem means that you can install support for just about every language and framework, from C++ to C# to Go, Python, and more. Looking ahead, we want to make acquiring extensions for these languages (and more!) as easy as possible. We want to enable extension authors to be able to be more productive and deliver richer experiences to developers. At the same time, we want to give users more control over how those extensions contribute to their environment. For extension users Improve extension recommendation system Improve searching for extensions Simplify tracking down issues caused by installed extensions and make it easier to file issues Show the user more information about the usage of a extension (startup time, error rate, etc.). For extension authors Improve the language API to support a hierarchical navigation to the symbols in a document Make extension contributions attributable to an extension (e.g. error messages, commands) Support migrating the publisher of an extension to another publisher Investigate contributing explorer viewlets as a first class element in the activity bar Investigate Quick pick improvements (e.g. multi-select, multi-step, commands, grouping) Continue to invest into API that enables remote development Add API for contributing decorations on resources shown in the explorer (like the Source Control decorations) Documentation Make it easier for extension authors to find their way around. Improve our API documentation, and integrate samples and documentation more closely. Refresh all of our dated overview videos. \u2003 Summary These are examples of just some of the work we will be focusing on in the next 6 to 12 months. We continuously tune the plan based on feedback and we will provide more detail in each of our monthly iteration plans . Please follow along and let us know what you think!","title":"Roadmap 2018"},{"location":"Roadmap-2018/#the-vs-code-roadmap-2018","text":"As 2017 comes to an end, now is the time to look towards the future. We typically look out 6 to 12 months, establish a set of themes we want to work towards, and then schedule work each milestone supporting those themes. When planning, we look at potential work from three perspectives: Happy Coding: At its core VS Code is a lightweight, keyboard focused, multi-language code editor. VS Code is already pleasant to code with, and we want to make the experience even more pleasant, for both new and existing users. Node, JavaScript, and TypeScript: On top of the core editor, we want to enable great end-to-end experiences for individual languages and frameworks. We build the Node, JavaScript, and TypeScript end-to-end experiences on top of the core platform and want to provide a great experience out of the box. A Rich Extension Ecosystem: Because we cannot build support for every language, VS Code has a rich extensibility system which enables an ecosystem of great end-to-end experiences for the breadth of languages and frameworks such as C#, Go, Python, C++, Java, and more. In fact, we deliver the Node, TypeScript, and JavaScript support using the exact same public APIs ensuring that developers have consistent experiences across the breadth of languages they use. VS Code will continue to ship monthly, and we'll make progress against each of the following themes during each iteration. We describe some initiatives as \"investigations\" which simply means our goal in the next few months is to better understand the problem and potential solutions before scheduling real feature work. Once an investigation is done, we will update our plan, either deferring the initiative or committing to it. Legend of annotations: Mark Description bullet work not started check mark work completed on-going work stretch goal","title":"The VS Code Roadmap 2018"},{"location":"Roadmap-2018/#happy-coding-with-vs-code","text":"Over the past 6 months, we\u2019ve worked hard to eliminate blockers that make it hard for people to adopt VS Code. For example, we make multi-root workspaces available in the October 2017 Stable builds. We continue to work with the extension authors to also enable their extension to support multi-root workspaces. However, we\u2019re not done. You have asked for more flexibility in how you position editors and panes, for multi-selection in the explorer, and more. You will see a significant focus on the fundamentals in the next few months as well, focused on performance, localized language support, and accessibility so that every developer can be productive with VS Code.","title":"Happy Coding with VS Code"},{"location":"Roadmap-2018/#fundamentals","text":"A key attribute of an 'editor' is performance and stability, if we add features at the expense of these fundamentals we risk losing a large part of what keeps us competitive in the 'editor' category. Improve startup performance: keep start-up times within a predictable and suitable range for users across all platforms Reduce resource/memory consumption: what can we do to reduce and control resource consumption of helper processes Continue to improve accessibility, terminal menu bar on Windows Support language packs for community-contributed translations Improve the Windows update experience Improve serviceability by providing additional diagnostics","title":"Fundamentals"},{"location":"Roadmap-2018/#workbench","text":"Improve intra-file navigation outline bread crumb Support to layout the editor area as a grid Investigate improved settings discovery and editing Finish Multi-root folder Workspaces support and support extension authors in adopting it Show SCM status in the explorer (including .gitignored files) Support vertical panel layout Support multi-selection in the explorer for common actions e.g. delete Improve notification UI Support diagnostics with multiple error locations","title":"Workbench"},{"location":"Roadmap-2018/#editor","text":"Improve the performance and scalability of editor decorations Improve Text Storage implementation Investigate into improved column selection Investigate into semantic coloring support Render more than text in the minimap","title":"Editor"},{"location":"Roadmap-2018/#terminal","text":"Support splitting and viewing of multiple terminals","title":"Terminal"},{"location":"Roadmap-2018/#source-control-integration","text":"Support to view changes directly inside the editor using a peek/inline experience Investigate integrated history view Investigate support to better collaborate on pull requests","title":"Source Control Integration"},{"location":"Roadmap-2018/#wsl-support","text":"Improve the WSL support. Investigate how we can enable extensions to leverage tools available in WSL.","title":"WSL Support"},{"location":"Roadmap-2018/#node-javascript-and-typescript-development","text":"We want VS Code to be a great tool for developing modern web applications with JavaScript and TypeScript and we will continue to collaborate deeply with the TypeScript team to deliver the richest code editing, navigation, and understanding experiences for both TypeScript and JavaScript. We will continue to make it easy to configure debugging of your Node based applications and include support for both client and server side debugging in the box.","title":"Node, JavaScript, and TypeScript Development"},{"location":"Roadmap-2018/#language-server-protocol","text":"Continue to refine and improve to Language Server Protocol with support from the community. Enable proposed protocol additions from the community.","title":"Language Server Protocol"},{"location":"Roadmap-2018/#debug-adaptor-protocol","text":"Continue to refine and improve to Debug Adapter Protocol with support from the community. Expose more UI for DAP features that are currently not surfaced in the VS Code debugging UI. This includes moving the loaded scripts UI into the core. Move the Debug Adapter Protocol into a separate repository and provide a web site.","title":"Debug Adaptor Protocol"},{"location":"Roadmap-2018/#javascript","text":"Improve go-to-definition/implementation of a JavaScript symbol when a type cannot be precisely resolved","title":"JavaScript"},{"location":"Roadmap-2018/#typescript-and-javascript","text":"We closely collaborate with TypeScript, see also the TypeScript roadmap Organize imports, remove unused imports Tag completion in jsx and tsx files Add more refactorings Investigate into improving TypeScript Source Maps so that they are more precise and includes variable mappings.","title":"TypeScript (and JavaScript)"},{"location":"Roadmap-2018/#webpack","text":"Linting/validation of configuration Make it easier to configure jsconfig.json / tsconfig.json for webpack","title":"Webpack"},{"location":"Roadmap-2018/#debug","text":"Improve hovering and inline values by leveraging language knowledge Continue to invest in documenting debugging recipes for common configurations Support hot code replace for non-JS scenarios e.g. Java. Support LogPoints","title":"Debug"},{"location":"Roadmap-2018/#extension-creation-discovery-and-management","text":"Of course, VS Code is not just a Node, JavaScript, and TypeScript tool. Our rich extensibility model and extension ecosystem means that you can install support for just about every language and framework, from C++ to C# to Go, Python, and more. Looking ahead, we want to make acquiring extensions for these languages (and more!) as easy as possible. We want to enable extension authors to be able to be more productive and deliver richer experiences to developers. At the same time, we want to give users more control over how those extensions contribute to their environment.","title":"Extension creation, discovery, and management"},{"location":"Roadmap-2018/#for-extension-users","text":"Improve extension recommendation system Improve searching for extensions Simplify tracking down issues caused by installed extensions and make it easier to file issues Show the user more information about the usage of a extension (startup time, error rate, etc.).","title":"For extension users"},{"location":"Roadmap-2018/#for-extension-authors","text":"Improve the language API to support a hierarchical navigation to the symbols in a document Make extension contributions attributable to an extension (e.g. error messages, commands) Support migrating the publisher of an extension to another publisher Investigate contributing explorer viewlets as a first class element in the activity bar Investigate Quick pick improvements (e.g. multi-select, multi-step, commands, grouping) Continue to invest into API that enables remote development Add API for contributing decorations on resources shown in the explorer (like the Source Control decorations)","title":"For extension authors"},{"location":"Roadmap-2018/#documentation","text":"Make it easier for extension authors to find their way around. Improve our API documentation, and integrate samples and documentation more closely. Refresh all of our dated overview videos.","title":"Documentation"},{"location":"Roadmap-2018/#summary","text":"These are examples of just some of the work we will be focusing on in the next 6 to 12 months. We continuously tune the plan based on feedback and we will provide more detail in each of our monthly iteration plans . Please follow along and let us know what you think!","title":"Summary"},{"location":"Roadmap-2019/","text":"The VS Code Roadmap 2019 - UPDATED As 2018 has come to an end, now is the time to look towards the future. We typically look out 6 to 12 months and establish topics we want to work on. As we go we learn and our assessment of some of the topics listed changes. Thus, we may add or drop topics as we go. We describe some initiatives as \"investigations\" which means our goal in the next few months is to better understand the problem and potential solutions before scheduling actual feature work. Once an investigation is done, we will update our plan, either deferring the initiative or committing to it. As always, we will listen to your feedback and adapt our plans if needed. Legend of annotations: Mark Description bullet work not started check mark work completed on-going work stretch goal Themes Our roadmap covers the following themes: - Become the best editor out there for anyone who relies on accessibility features. - performance, scalability, serviceability, security - tackle some of the most wanted user features - polishing and a constant slow trickle of design refreshments - incrementally improve already existing features - responsibly enable extensions that have broader extensibility requirements Fundamentals Make VS Code an outstandingly accessible developer tool. We'll engage and work with our community to get input and guidance, and we need you to keep us honest. Keep start-up times within a predictable and suitable range for users across all platforms and improve the overall performance for large workspace: Load less code on start-up and investigate improving the workbench restoration time by expanding on the rapid render approach. Implement a new tree widget that scales better Adopt the new tree widget across the workbench: quick pick comments explorer search settings outline debugger Improve serviceability Make it easy to identify extensions that negatively impact the overall performance of VS Code. Workbench Workbench layout Support for detachable workbench parts is our most upvoted feature request which due to architectural issues is challenging to implement. We will explore how we can work around this limitation. This investigation will focus on detaching terminals (2 nd most upvoted feature request) and editors. Enable a more flexible panel/sidebar layout. Improve working with the file explorer Support to compress/flatten single child directories Investigate 'working sets' of files and folders Investigate how to safely provide richer customizability in the workbench Support custom editors . Investigate custom views (based on WebView ). :runer: Support synchronizing settings and extensions across VS Code installations on different machines. Provide filtering and fast keyboard navigation in trees across the workbench. Search Show search results not only in the side bar or a panel, but also in an editor. This allows us to show additional context information for each match. UX Continue to incrementally improve presentation and behavior across the board. Examples include: Harmonize hovers, completion items, completion item details Iconography Welcome page Use tabs instead of the terminal dropdown Explore how to integrate fluent design on Windows Editor Investigate isolating the editor from misbehaving grammars Investigate support for semantic coloring Investigate how to simplify the maintenance of textmate grammars Provide a richer minimap Bring back localization support in the standalone Monaco editor. This support had been suspended when we added support for language packs for VS Code. Languages Improve 'Expand Selection' to better adhere to the semantics of programming languages. Improve support for navigating and presenting complex error descriptions such as those generated by TypeScript for React or Vue. Enable programming language extensions to provide support for call hierarchies. Enable programming language extensions to provide support for type hierarchies. TypeScript We will continue to collaborate deeply with the TypeScript team to deliver the richest code editing, navigation, and understanding experiences for both TypeScript and JavaScript. see also the TypeScript roadmap . Improve the integration of tslint by running it as a TypeScript Server plugin . Debug Support data breakpoints Improve hovering and inline values by leveraging the knowledge about the programming language so that the Inline Values feature can be enabled by default Continue to invest in documenting debugging recipes for common configurations Extensions Extension Acquisition Revisit how users find and install extensions Improve the recommendation system. Add support to only activate signed extensions (see next section). Support installing an extension without having to reload the workbench. This is our 3 rd most upvoted feature request . Extension Management Make the consumption of extensions more secure and improve the process for how we handle malicious extensions. Show runtime information for an extension (activation state, performance, error logs) Extension Publishing Collaborate with extension authors to improve their extensions. Examples are: Use Webpack to improve install and activation, minimize dependencies of an extension, ensure vscode is only a development dependency. Enable extensions to install additional platform specific components. Support publishing of signed extensions. Add support for verified publishers. Contributions to VS Code Extensions Our teams contributes to a number of extensions that are available in the market place. Our main focus will be on the following extensions: VS Code Remote SSH VS Code Remote WSL VS Code Remote Containers GitHub Pull Request extension Azure Account extension Vue extension We will continue to maintain the following extensions: * Chrome Debug extension * ES Lint * TS Lint * Ruby * Markdown customization extensions We will investigate into improving the performance of existing popular extensions that make the extension host unresponsive, e.g. * Bracket Pair Colorizer * [x] Auto Rename Tag . Contributions to Underlying Components and Technologies VS Code is made possible through a wide range of technologies. Below are examples of technologies in which we are particularly active. Language Server Protocol Continue to refine and improve the Language Server Protocol with support from the community. Define a Language Server Index Format (LSIF, pronounce like \"else if\") that enables a language server to persist their language intelligence, so that it can be subsequently used to answer LSP requests at-scale (for example, hover and go to definition). Debug Adaptor Protocol Continue to refine and improve the Debug Adapter Protocol with support from the community. Expose more UI for DAP features that are currently not surfaced in the VS Code debugging UI. This includes moving the loaded scripts UI into the core. xterm.js Work with the xterm.js community to improve parsing and internal line representations Adopt conpty on Windows Reflow lines when resizing the terminal Investigate replacing canvas based rendering through WebGL based rendering Documentation Make it easier for extension authors to find their way around. Improve our API documentation, and integrate samples and documentation more closely. Refresh all of our dated overview videos. Community Support We'll continue our work on our GitHub bots that enable members of our community give us a hand triaging and resolving issues. Summary These are examples of some of the work we will be focusing on in the next 6 to 12 months. We continuously tune the plan based on feedback and we will provide more detail in each of our monthly iteration plans . Please follow along and let us know what you think!","title":"Roadmap 2019"},{"location":"Roadmap-2019/#the-vs-code-roadmap-2019-updated","text":"As 2018 has come to an end, now is the time to look towards the future. We typically look out 6 to 12 months and establish topics we want to work on. As we go we learn and our assessment of some of the topics listed changes. Thus, we may add or drop topics as we go. We describe some initiatives as \"investigations\" which means our goal in the next few months is to better understand the problem and potential solutions before scheduling actual feature work. Once an investigation is done, we will update our plan, either deferring the initiative or committing to it. As always, we will listen to your feedback and adapt our plans if needed. Legend of annotations: Mark Description bullet work not started check mark work completed on-going work stretch goal","title":"The VS Code Roadmap 2019 - UPDATED"},{"location":"Roadmap-2019/#themes","text":"Our roadmap covers the following themes: - Become the best editor out there for anyone who relies on accessibility features. - performance, scalability, serviceability, security - tackle some of the most wanted user features - polishing and a constant slow trickle of design refreshments - incrementally improve already existing features - responsibly enable extensions that have broader extensibility requirements","title":"Themes"},{"location":"Roadmap-2019/#fundamentals","text":"Make VS Code an outstandingly accessible developer tool. We'll engage and work with our community to get input and guidance, and we need you to keep us honest. Keep start-up times within a predictable and suitable range for users across all platforms and improve the overall performance for large workspace: Load less code on start-up and investigate improving the workbench restoration time by expanding on the rapid render approach. Implement a new tree widget that scales better Adopt the new tree widget across the workbench: quick pick comments explorer search settings outline debugger Improve serviceability Make it easy to identify extensions that negatively impact the overall performance of VS Code.","title":"Fundamentals"},{"location":"Roadmap-2019/#workbench","text":"Workbench layout Support for detachable workbench parts is our most upvoted feature request which due to architectural issues is challenging to implement. We will explore how we can work around this limitation. This investigation will focus on detaching terminals (2 nd most upvoted feature request) and editors. Enable a more flexible panel/sidebar layout. Improve working with the file explorer Support to compress/flatten single child directories Investigate 'working sets' of files and folders Investigate how to safely provide richer customizability in the workbench Support custom editors . Investigate custom views (based on WebView ). :runer: Support synchronizing settings and extensions across VS Code installations on different machines. Provide filtering and fast keyboard navigation in trees across the workbench.","title":"Workbench"},{"location":"Roadmap-2019/#search","text":"Show search results not only in the side bar or a panel, but also in an editor. This allows us to show additional context information for each match.","title":"Search"},{"location":"Roadmap-2019/#ux","text":"Continue to incrementally improve presentation and behavior across the board. Examples include: Harmonize hovers, completion items, completion item details Iconography Welcome page Use tabs instead of the terminal dropdown Explore how to integrate fluent design on Windows","title":"UX"},{"location":"Roadmap-2019/#editor","text":"Investigate isolating the editor from misbehaving grammars Investigate support for semantic coloring Investigate how to simplify the maintenance of textmate grammars Provide a richer minimap Bring back localization support in the standalone Monaco editor. This support had been suspended when we added support for language packs for VS Code.","title":"Editor"},{"location":"Roadmap-2019/#languages","text":"Improve 'Expand Selection' to better adhere to the semantics of programming languages. Improve support for navigating and presenting complex error descriptions such as those generated by TypeScript for React or Vue. Enable programming language extensions to provide support for call hierarchies. Enable programming language extensions to provide support for type hierarchies.","title":"Languages"},{"location":"Roadmap-2019/#typescript","text":"We will continue to collaborate deeply with the TypeScript team to deliver the richest code editing, navigation, and understanding experiences for both TypeScript and JavaScript. see also the TypeScript roadmap . Improve the integration of tslint by running it as a TypeScript Server plugin .","title":"TypeScript"},{"location":"Roadmap-2019/#debug","text":"Support data breakpoints Improve hovering and inline values by leveraging the knowledge about the programming language so that the Inline Values feature can be enabled by default Continue to invest in documenting debugging recipes for common configurations","title":"Debug"},{"location":"Roadmap-2019/#extensions","text":"Extension Acquisition Revisit how users find and install extensions Improve the recommendation system. Add support to only activate signed extensions (see next section). Support installing an extension without having to reload the workbench. This is our 3 rd most upvoted feature request . Extension Management Make the consumption of extensions more secure and improve the process for how we handle malicious extensions. Show runtime information for an extension (activation state, performance, error logs) Extension Publishing Collaborate with extension authors to improve their extensions. Examples are: Use Webpack to improve install and activation, minimize dependencies of an extension, ensure vscode is only a development dependency. Enable extensions to install additional platform specific components. Support publishing of signed extensions. Add support for verified publishers.","title":"Extensions"},{"location":"Roadmap-2019/#contributions-to-vs-code-extensions","text":"Our teams contributes to a number of extensions that are available in the market place. Our main focus will be on the following extensions: VS Code Remote SSH VS Code Remote WSL VS Code Remote Containers GitHub Pull Request extension Azure Account extension Vue extension We will continue to maintain the following extensions: * Chrome Debug extension * ES Lint * TS Lint * Ruby * Markdown customization extensions We will investigate into improving the performance of existing popular extensions that make the extension host unresponsive, e.g. * Bracket Pair Colorizer * [x] Auto Rename Tag .","title":"Contributions to VS Code Extensions"},{"location":"Roadmap-2019/#contributions-to-underlying-components-and-technologies","text":"VS Code is made possible through a wide range of technologies. Below are examples of technologies in which we are particularly active.","title":"Contributions to Underlying Components and Technologies"},{"location":"Roadmap-2019/#language-server-protocol","text":"Continue to refine and improve the Language Server Protocol with support from the community. Define a Language Server Index Format (LSIF, pronounce like \"else if\") that enables a language server to persist their language intelligence, so that it can be subsequently used to answer LSP requests at-scale (for example, hover and go to definition).","title":"Language Server Protocol"},{"location":"Roadmap-2019/#debug-adaptor-protocol","text":"Continue to refine and improve the Debug Adapter Protocol with support from the community. Expose more UI for DAP features that are currently not surfaced in the VS Code debugging UI. This includes moving the loaded scripts UI into the core.","title":"Debug Adaptor Protocol"},{"location":"Roadmap-2019/#xtermjs","text":"Work with the xterm.js community to improve parsing and internal line representations Adopt conpty on Windows Reflow lines when resizing the terminal Investigate replacing canvas based rendering through WebGL based rendering","title":"xterm.js"},{"location":"Roadmap-2019/#documentation","text":"Make it easier for extension authors to find their way around. Improve our API documentation, and integrate samples and documentation more closely. Refresh all of our dated overview videos.","title":"Documentation"},{"location":"Roadmap-2019/#community-support","text":"We'll continue our work on our GitHub bots that enable members of our community give us a hand triaging and resolving issues.","title":"Community Support"},{"location":"Roadmap-2019/#summary","text":"These are examples of some of the work we will be focusing on in the next 6 to 12 months. We continuously tune the plan based on feedback and we will provide more detail in each of our monthly iteration plans . Please follow along and let us know what you think!","title":"Summary"},{"location":"Roadmap/","text":"The Visual Studio Code Roadmap 2020 As 2019 is coming to an end, now is the time to look towards the future. We typically look out 12-18 months and we establish topics we want to work on. We don't start with our roadmap on a blank sheet. We develop it based on our last roadmap, the findings we made over the course of the last year, and of course what we heard from you in issues, in face-to-face discussions, stack overflow, and twitter. When we execute on our roadmap, we keep learning and our assessment of some of the topics listed changes. As a result, we may add or drop topics as we go. In 12 months from now, we then come together to develop the next roadmap. We describe some initiatives as \"investigations\" or \"explorations\" which means our goal in the next few months is to better understand the problem and potential solutions before scheduling actual feature work. Once an investigation is done, we will update our plan, either deferring the initiative or committing to it. As always, we listen to your feedback and adapt our plans if needed. Legend of annotations: Mark Description bullet work not started check mark work completed on-going work stretch goal missing link Themes Our roadmap covers the broadly the following themes: - Become the best editor for anyone who relies on accessibility features - Improve performance, scalability, and security of VS Code and its extensions - Tackle some of the most wanted and most emotional user features - Polishing and a constant trickle of design refreshments - Incrementally improve already existing features - Responsibly enable extensions that have broader extensibility requirements - Tackle a couple of big rocks that push the boundaries of what VS Code can do Fundamentals Make VS Code an outstandingly accessible developer tool. We'll engage and work with our community to get input and guidance, and we need you to keep us honest. Improve support for RTL languages. Keep start-up times within a predictable and suitable range for users across all platforms and improve the overall performance for large workspace: Load less code on start-up and investigate improving the workbench restoration time by expanding on the rapid render approach. Continuously monitor the size of the VS Code download to ensure it downloads in seconds no matter where you are. Improve VS Code performance in large workspaces Investigate 'working sets' of files and folders in the file explorer Provide guidance to users how to configure VS Code Improve Open File / Quick Pick performance Make VS Code more secure by running renderer processes without access to node APIs. Workbench Workbench layout Support for detachable workbench parts is our most upvoted feature request which due to architectural issues is challenging to implement. We will explore how we can work around this limitation. This investigation will focus on detaching terminals (2 nd most upvoted feature request) and editors. Allows to move views between the panel and sidebar. Support a more flexible workbench layout such as allow sidebars on the left and the right. For example, you could have your outline on the right and the file explorer on the left. Investigate how to safely provide richer customizability in the workbench Support custom editors . Investigate custom views based on WebViews . Support to configure workbench font and font size Broaden support to customize the UI, e.g. context menus. Settings Support synchronizing settings and extensions across VS Code installations on different machines. In the settings editor, provide high-fidelity support for additional settings types such as colors. Provide a dedicated theme customization editor. Support to synchronize settings between the insider and stable versions of VS Code Search Show search results not only in the side bar or a panel, but also in an editor. This allows users to work with multiple search results and to see additional context for each match. UX Continue to incrementally improve presentation and behavior across the board. Examples include: Harmonize hovers, completion items, completion item details Welcome page Use tabs instead of the terminal dropdown Revisit/review the first run experience for VS Code as well as newly installed extensions. For example, we want to reduce the number of notifications that are shown. Touch and mobile support for VS Code in the browser Investigate how users can express what they want to use VS Code for after they installed it. For example, a user wants to develop a website with a Go backend, VS Code should provide light-weight guidance to get all the right extensions and configure them appropriately. Editor Notebooks (for example Jupyter) have become a popular means in data science and education and are making their way into every corner of development. We'll explore how VS Code and the Monaco Editor can provide a rich notebook experience (deep language services, light-weight/simple debugging). Investigate isolating the editor from misbehaving grammars Investigate support for semantic coloring Investigate how to simplify the maintenance of textmate grammars Expand 'inline' experiences Inset editing Inline errors Richer minimap Inline values (on by default, see debugging) Smarter indent support (e.g. for Python) Prevent tooltips from getting into your way when editing Support word-wrap in the diff editor Languages Enable programming language extensions to provide support for call hierarchies. Enable programming language extensions to provide support for type hierarchies. Improve support for workspace-level edits (an semantic unit comprised of name, location, and content manipulations across multiple files) Enable language extensions to participate in workspace edits such as rename or move. Enable an one-step undo of complex workspace edits. Investigate how a user can preview workspace edits (e.g. preview the changes of a rename refactoring). Incrementally improve support for nested languages. This will be code changes on our side as well as samples and documentations. TypeScript We will continue to collaborate deeply with the TypeScript team to deliver the richest code editing, navigation, and understanding experiences for both TypeScript and JavaScript. see also the TypeScript roadmap . One focus item will be to show the errors and warnings for the entire project(s) in your workspace. HTML/CSS Provide a live preview. SCM Investigate synergies between the core git support and GitLens Provide an overall improved GitHub integration, e.g. we'll make it easier to hover over issue URL in your code or associate a GitHub issue with your commit. Provide full merge support (3-way) Investigate support for showing a local history of a file and folder and combine that with the git history Investigate timeline support for combining local history with other events such as successful test runs or refactorings Debug Leverage language services to improve debug experience. For example, improve hovering and inline values by leveraging the knowledge about the programming language so that the Inline Values feature can be enabled by default Provide improved 'full stack' debugging, i.e. combined node (server) and chrome (client) debugging. Testing Investigate how VS Code can improve the testing support. Several extensions are already providing testing support, explore what APIs/UIs could be added to improve these testing extensions and the test running experience. Install Investigate migrating to the MSIX installer on Windows. Terminal Investigate how to persist integrated terminal sessions across window reloads and application restarts. Investigate how to support problem matchers to run in any internal terminals Extensions Extension Acquisition Revisit how users find and install extensions including a simple text-based approach Make it easier for users to pick and choose which functionality they want from extensions packs. Improve the recommendation system, e.g., allow users to ask for recommendations based on their prior use of VS Code. Add support to only activate signed extensions (see Extension Authoring ). Extension Management Make the consumption of extensions more secure and improve the process for how we handle malicious extensions. Show runtime information for an extension (activation state, performance, error logs) Extension Authoring Provide clear guidance to extension authors for how to structure their functionality so that their users can get as little or as much functionality as they want. For example, ensure text editor lovers can get Python language support without too much overhead. Provide an integrated 'Welcome' experience for extensions. Investigate how to effectively inform users about new features provided by an extension update. Investigate into play grounds like the VS Code playground ( Help>Interactive Playground ) for extensions. Provide extensions more control over the sequence and grouping of their settings in the settings editor, e.g., support to group commonly used settings. Give extensions more realtime insights into how user configured them, e.g. the user hides the custom tree view your extension contributes from the explorer. Extension Publishing Work with the marketplace to allow platform specific flavors of extensions. Support publishing of signed extensions. Add support for verified publishers. Investigate providing a GitHub action for publishing to the marketplace. Contributions to VS Code Extensions Our teams contributes to a number of extensions that are available in the market place. Our main focus will be on the following extensions: VS Code Remote GitHub Pull Request extension and related extensions Azure Account extension Vue extension GitLens extension We will continue to maintain the following extensions: * ES Lint * Ruby * Markdown customization extensions We will investigate into improving the performance of popular extensions that not performing as well as users expect - Bracket Pair Colorizer - VIM Contributions to Underlying Components and Technologies VS Code is made possible through a wide range of technologies. Below are examples of technologies in which we are particularly active. Language Server Protocol Continue to refine and improve the Language Server Protocol with support from the community. Continue to refine and improve the Language Server Index Format with support from the community. Debug Adaptor Protocol Continue to refine and improve the Debug Adapter Protocol with support from the community. Expose more UI for DAP features that are currently not surfaced in the VS Code debugging UI. This includes moving the loaded scripts UI into the core. xterm.js Provide ongoing improvements to xterm.js for performance, stability, and maintainability Engineering Migrate from tslint to eslint . Tslint will be deprecated . Improve the built-in issue reporter, e.g., support to paste/attach images. Implement tooling that allows us to detect issues in which emotions fly high. Improve our \"smoke\" tests and revisit the current approach on how we implement them. Investigate automating how we sanity check all our binaries right before we release. Investigate moving our GitHub bots to GitHub actions. Improve our GitHub issue bots, examples: reject invalid incoming issues automatically make it easier to move issue to extension repositories automate training of our classification bot Explorations Explore support to synchronize more state when opening the same folder in different VS Code installs such as untitled files, open files, focussed editor. Explore how to better provide support for low-end devices. Explore how to support new user in learning VS Code (interactive exploration mode, videos) Explore how to make it easier to show, tell, and share your VS Code customizations. Explore how to support trying out VS Code for a particular language or technology stack without any local installation. For example, 'Debug Java code in less than 1 minute'. Documentation Refresh all of our dated overview videos. Provide translated documentation for major user groups such as Mandarin, Korean, Spanish, Portuguese, French. Noe: the list of languages might change. Community Support We'll continue our work on our GitHub bots that enable members of our community give us a hand triaging and resolving issues. Summary These are examples of some of the work we will be focusing on in the next 12-18 months. We continuously tune the plan based on feedback and we will provide more detail in each of our monthly iteration plans . We will develop our next roadmap in around 12 months from now. Please follow along and let us know what you think!","title":"Roadmap"},{"location":"Roadmap/#the-visual-studio-code-roadmap-2020","text":"As 2019 is coming to an end, now is the time to look towards the future. We typically look out 12-18 months and we establish topics we want to work on. We don't start with our roadmap on a blank sheet. We develop it based on our last roadmap, the findings we made over the course of the last year, and of course what we heard from you in issues, in face-to-face discussions, stack overflow, and twitter. When we execute on our roadmap, we keep learning and our assessment of some of the topics listed changes. As a result, we may add or drop topics as we go. In 12 months from now, we then come together to develop the next roadmap. We describe some initiatives as \"investigations\" or \"explorations\" which means our goal in the next few months is to better understand the problem and potential solutions before scheduling actual feature work. Once an investigation is done, we will update our plan, either deferring the initiative or committing to it. As always, we listen to your feedback and adapt our plans if needed. Legend of annotations: Mark Description bullet work not started check mark work completed on-going work stretch goal missing link","title":"The Visual Studio Code Roadmap 2020"},{"location":"Roadmap/#themes","text":"Our roadmap covers the broadly the following themes: - Become the best editor for anyone who relies on accessibility features - Improve performance, scalability, and security of VS Code and its extensions - Tackle some of the most wanted and most emotional user features - Polishing and a constant trickle of design refreshments - Incrementally improve already existing features - Responsibly enable extensions that have broader extensibility requirements - Tackle a couple of big rocks that push the boundaries of what VS Code can do","title":"Themes"},{"location":"Roadmap/#fundamentals","text":"Make VS Code an outstandingly accessible developer tool. We'll engage and work with our community to get input and guidance, and we need you to keep us honest. Improve support for RTL languages. Keep start-up times within a predictable and suitable range for users across all platforms and improve the overall performance for large workspace: Load less code on start-up and investigate improving the workbench restoration time by expanding on the rapid render approach. Continuously monitor the size of the VS Code download to ensure it downloads in seconds no matter where you are. Improve VS Code performance in large workspaces Investigate 'working sets' of files and folders in the file explorer Provide guidance to users how to configure VS Code Improve Open File / Quick Pick performance Make VS Code more secure by running renderer processes without access to node APIs.","title":"Fundamentals"},{"location":"Roadmap/#workbench","text":"Workbench layout Support for detachable workbench parts is our most upvoted feature request which due to architectural issues is challenging to implement. We will explore how we can work around this limitation. This investigation will focus on detaching terminals (2 nd most upvoted feature request) and editors. Allows to move views between the panel and sidebar. Support a more flexible workbench layout such as allow sidebars on the left and the right. For example, you could have your outline on the right and the file explorer on the left. Investigate how to safely provide richer customizability in the workbench Support custom editors . Investigate custom views based on WebViews . Support to configure workbench font and font size Broaden support to customize the UI, e.g. context menus.","title":"Workbench"},{"location":"Roadmap/#settings","text":"Support synchronizing settings and extensions across VS Code installations on different machines. In the settings editor, provide high-fidelity support for additional settings types such as colors. Provide a dedicated theme customization editor. Support to synchronize settings between the insider and stable versions of VS Code","title":"Settings"},{"location":"Roadmap/#search","text":"Show search results not only in the side bar or a panel, but also in an editor. This allows users to work with multiple search results and to see additional context for each match.","title":"Search"},{"location":"Roadmap/#ux","text":"Continue to incrementally improve presentation and behavior across the board. Examples include: Harmonize hovers, completion items, completion item details Welcome page Use tabs instead of the terminal dropdown Revisit/review the first run experience for VS Code as well as newly installed extensions. For example, we want to reduce the number of notifications that are shown. Touch and mobile support for VS Code in the browser Investigate how users can express what they want to use VS Code for after they installed it. For example, a user wants to develop a website with a Go backend, VS Code should provide light-weight guidance to get all the right extensions and configure them appropriately.","title":"UX"},{"location":"Roadmap/#editor","text":"Notebooks (for example Jupyter) have become a popular means in data science and education and are making their way into every corner of development. We'll explore how VS Code and the Monaco Editor can provide a rich notebook experience (deep language services, light-weight/simple debugging). Investigate isolating the editor from misbehaving grammars Investigate support for semantic coloring Investigate how to simplify the maintenance of textmate grammars Expand 'inline' experiences Inset editing Inline errors Richer minimap Inline values (on by default, see debugging) Smarter indent support (e.g. for Python) Prevent tooltips from getting into your way when editing Support word-wrap in the diff editor","title":"Editor"},{"location":"Roadmap/#languages","text":"Enable programming language extensions to provide support for call hierarchies. Enable programming language extensions to provide support for type hierarchies. Improve support for workspace-level edits (an semantic unit comprised of name, location, and content manipulations across multiple files) Enable language extensions to participate in workspace edits such as rename or move. Enable an one-step undo of complex workspace edits. Investigate how a user can preview workspace edits (e.g. preview the changes of a rename refactoring). Incrementally improve support for nested languages. This will be code changes on our side as well as samples and documentations.","title":"Languages"},{"location":"Roadmap/#typescript","text":"We will continue to collaborate deeply with the TypeScript team to deliver the richest code editing, navigation, and understanding experiences for both TypeScript and JavaScript. see also the TypeScript roadmap . One focus item will be to show the errors and warnings for the entire project(s) in your workspace.","title":"TypeScript"},{"location":"Roadmap/#htmlcss","text":"Provide a live preview.","title":"HTML/CSS"},{"location":"Roadmap/#scm","text":"Investigate synergies between the core git support and GitLens Provide an overall improved GitHub integration, e.g. we'll make it easier to hover over issue URL in your code or associate a GitHub issue with your commit. Provide full merge support (3-way) Investigate support for showing a local history of a file and folder and combine that with the git history Investigate timeline support for combining local history with other events such as successful test runs or refactorings","title":"SCM"},{"location":"Roadmap/#debug","text":"Leverage language services to improve debug experience. For example, improve hovering and inline values by leveraging the knowledge about the programming language so that the Inline Values feature can be enabled by default Provide improved 'full stack' debugging, i.e. combined node (server) and chrome (client) debugging.","title":"Debug"},{"location":"Roadmap/#testing","text":"Investigate how VS Code can improve the testing support. Several extensions are already providing testing support, explore what APIs/UIs could be added to improve these testing extensions and the test running experience.","title":"Testing"},{"location":"Roadmap/#install","text":"Investigate migrating to the MSIX installer on Windows.","title":"Install"},{"location":"Roadmap/#terminal","text":"Investigate how to persist integrated terminal sessions across window reloads and application restarts. Investigate how to support problem matchers to run in any internal terminals","title":"Terminal"},{"location":"Roadmap/#extensions","text":"Extension Acquisition Revisit how users find and install extensions including a simple text-based approach Make it easier for users to pick and choose which functionality they want from extensions packs. Improve the recommendation system, e.g., allow users to ask for recommendations based on their prior use of VS Code. Add support to only activate signed extensions (see Extension Authoring ). Extension Management Make the consumption of extensions more secure and improve the process for how we handle malicious extensions. Show runtime information for an extension (activation state, performance, error logs) Extension Authoring Provide clear guidance to extension authors for how to structure their functionality so that their users can get as little or as much functionality as they want. For example, ensure text editor lovers can get Python language support without too much overhead. Provide an integrated 'Welcome' experience for extensions. Investigate how to effectively inform users about new features provided by an extension update. Investigate into play grounds like the VS Code playground ( Help>Interactive Playground ) for extensions. Provide extensions more control over the sequence and grouping of their settings in the settings editor, e.g., support to group commonly used settings. Give extensions more realtime insights into how user configured them, e.g. the user hides the custom tree view your extension contributes from the explorer. Extension Publishing Work with the marketplace to allow platform specific flavors of extensions. Support publishing of signed extensions. Add support for verified publishers. Investigate providing a GitHub action for publishing to the marketplace.","title":"Extensions"},{"location":"Roadmap/#contributions-to-vs-code-extensions","text":"Our teams contributes to a number of extensions that are available in the market place. Our main focus will be on the following extensions: VS Code Remote GitHub Pull Request extension and related extensions Azure Account extension Vue extension GitLens extension We will continue to maintain the following extensions: * ES Lint * Ruby * Markdown customization extensions We will investigate into improving the performance of popular extensions that not performing as well as users expect - Bracket Pair Colorizer - VIM","title":"Contributions to VS Code Extensions"},{"location":"Roadmap/#contributions-to-underlying-components-and-technologies","text":"VS Code is made possible through a wide range of technologies. Below are examples of technologies in which we are particularly active.","title":"Contributions to Underlying Components and Technologies"},{"location":"Roadmap/#language-server-protocol","text":"Continue to refine and improve the Language Server Protocol with support from the community. Continue to refine and improve the Language Server Index Format with support from the community.","title":"Language Server Protocol"},{"location":"Roadmap/#debug-adaptor-protocol","text":"Continue to refine and improve the Debug Adapter Protocol with support from the community. Expose more UI for DAP features that are currently not surfaced in the VS Code debugging UI. This includes moving the loaded scripts UI into the core.","title":"Debug Adaptor Protocol"},{"location":"Roadmap/#xtermjs","text":"Provide ongoing improvements to xterm.js for performance, stability, and maintainability","title":"xterm.js"},{"location":"Roadmap/#engineering","text":"Migrate from tslint to eslint . Tslint will be deprecated . Improve the built-in issue reporter, e.g., support to paste/attach images. Implement tooling that allows us to detect issues in which emotions fly high. Improve our \"smoke\" tests and revisit the current approach on how we implement them. Investigate automating how we sanity check all our binaries right before we release. Investigate moving our GitHub bots to GitHub actions. Improve our GitHub issue bots, examples: reject invalid incoming issues automatically make it easier to move issue to extension repositories automate training of our classification bot","title":"Engineering"},{"location":"Roadmap/#explorations","text":"Explore support to synchronize more state when opening the same folder in different VS Code installs such as untitled files, open files, focussed editor. Explore how to better provide support for low-end devices. Explore how to support new user in learning VS Code (interactive exploration mode, videos) Explore how to make it easier to show, tell, and share your VS Code customizations. Explore how to support trying out VS Code for a particular language or technology stack without any local installation. For example, 'Debug Java code in less than 1 minute'.","title":"Explorations"},{"location":"Roadmap/#documentation","text":"Refresh all of our dated overview videos. Provide translated documentation for major user groups such as Mandarin, Korean, Spanish, Portuguese, French. Noe: the list of languages might change.","title":"Documentation"},{"location":"Roadmap/#community-support","text":"We'll continue our work on our GitHub bots that enable members of our community give us a hand triaging and resolving issues.","title":"Community Support"},{"location":"Roadmap/#summary","text":"These are examples of some of the work we will be focusing on in the next 12-18 months. We continuously tune the plan based on feedback and we will provide more detail in each of our monthly iteration plans . We will develop our next roadmap in around 12 months from now. Please follow along and let us know what you think!","title":"Summary"},{"location":"Running-the-Endgame/","text":"Each iteration closes with an endgame . Duties of the endgame master Proactive communication is key to a smooth and successful endgame. Update iteration plan issue with the endgame schedule (see template below and potentially last month's schedule) Ensure each plan item is linked to a test item Discuss the endgame schedule in Monday's planning call Find an endgame buddy in the other lab Determine the pool of testers and their availability Ensure each test item has meaningful content Assign test items to testers (usually platform specific) using the testplan tool ; ensure fair distribution across testers Communicate test assignments in the release Slack channel by posting the test item queries ( example query ) Communicate end of day progress in the release Slack channel by communicating the number of issues filed the number of test items not yet completed ( example query ) number of issues to be verified Assign owners to checklist items for each day (if not owned by the endgame master) Track progress on test items and checklist items Adjust schedule, particularly the publishing dates, based on defects found, fixes made, holidays, vacations, etc. Schedule Template Month/Day Code freeze for the endgame Month/Day Endgame done Month/Day Expected release date (this may change) Note: The Insiders build needs to be in the wild for 24 hours before we can enter the last phase of the endgame. Monday Run OSS tool endgame master Code freeze at 5pm PT Ensure we have a green build on all platforms at 5pm PT All test items contain sufficiently comprehensive test descriptions by 6pm PT Update your availability for testing here - https://vscode-tools.azurewebsites.net/ Tuesday Test plan items assigned (using https://vscode-tools.azurewebsites.net/ ) Run the tool multiple times to balance load if test items come in later and assignments are already made \ud83d\udd16All closed feature-requests either have a verification-needed or on-testplan label Test build starts at 7am CET Test plan ready by 8am CET \ud83d\udd16Testing \ud83d\udd16Verification needed Wednesday \ud83d\udd16Testing Remind team members to assign issues that they intend to fix to the current milestone Fixing (self-assigned, milestone assigned) \ud83d\udd16Verification needed Thursday Fixing (scrutiny sets in - major bugs only - to be discussed in stand-up meeting, labeled as candidate ) \ud83d\udd16Verification needed \ud83d\udd16Verification Friday Pause scheduled insider builds endgame master Satellite modules/npm packages ready, version updated, smoke tested vscode @bpasero yo generator @aeschli vsce @joaomoreno node debug @weinand node debug2 @roblourens node debugadapter node @weinand All issues \ud83d\udd16verified Fixing (only critical bugs - no string changes) Smoketest (\u26a0\ufe0f MUST run with --stable-build argument \u26a0\ufe0f ) Windows - owner OS X - owner Linux - owner Web (manual until https://github.com/microsoft/vscode/issues/80308 is done) - owner All release notes updated release notes are collected in a file named Month_Year.md in this repo directory @aeschli @alexandrudima @alexr00 @bpasero @chrmarti @dbaeumer @egamma @isidorn @joaomoreno @jrieken @kieferrm @mjbvz @octref @rebornix @rmacfarlane @roblourens @sandy081 @sbatten @tyriar @weinand Acknowledge pull requests in release notes. We acknowledge PRs from outside the team. Use the thankyou tool to generate the initial contents of the section. owner vscode endgame master vscode-node-debug @weinand vscode-node-debug2 @roblourens vscode-debugadapter-node @weinand vscode-js-debug @connor4312 vscode-languageserver-node @dbaeumer language-server-protocol @dbaeumer vscode-textmate @alexandrudima vscode-loader @alexandrudima vscode-generator-code @aeschli vscode-vsce @joaomoreno vscode-docs @gregvanl vscode-css-languageservice @aeschli vscode-json-languageservice @aeschli vscode-html-languageservice @aeschli jsonc-parser @aeschli vscode-tslint @egamma vscode-eslint @dbaeumer vscode-jshint @rmacfarlane vscode-recipes @chrisdias localization @weeteckt vscode-github-issues-prs @chrmarti inno-updater @joaomoreno Review pull requests acknowledgements with NOT MERGED - PLS REVIEW . endgame master Acknowledge issue trackers from the community @chrmarti Add notable fixes to the release notes all When done fixing/verifying and there are changes since last build at the end of day PT Trigger new insider build and publish it manually endgame master Friday/Monday Branch code to `release/ endgame master Bump up the version in package.json - endgame master Announce master is open for business endgame master Polish release notes redmond Monday - Wednesday \ud83d\udd16milestone issues \ud83d\udd16candidate issues Polish release notes redmond Cherry-pick hand-picked and reviewed changes to release/<x.y> endgame master Build Insider from release/<x.y> endgame master Manually release Insider endgame master Build stable for all platforms as new candidate issues come in endgame master Documentation updated @aeschli @alexandrudima @alexr00 @bpasero @chrmarti @dbaeumer @egamma @isidorn @joaomoreno @jrieken @kieferrm @mjbvz @octref @rebornix @rmacfarlane @roblourens @sandy081 @sbatten @tyriar @weinand Run scripts/test-documentation.sh|bat and add file or fix issues if there are new colors that are not documented. Note: The Insiders build needs to be in the wild for 24 hours before we can enter the last phase of the endgame. endgame master Wednesday/Thursday Build stable for all platforms endgame master Sanity check of installable bits Windows 32 bit owner signed installer 32-bit signed user installer 32-bit zip 32-bit Windows 64 bit owner signed installer 64-bit signed user installer 64-bit zip 64-bit OS X - owner Linux deb package 64-bit owner rpm package 64-bit owner archives owner Server ( instructions ) owner Publish website @gregvanl Publish Localization language pack @weeteckt Publish to stable endgame master Add a git tag to HEAD of release/<x.y> in format x.y.z (for vscode.d.ts download) endgame master Publish @types/vscode endgame master Enable scheduled insider builds endgame master Twitter announcement @chrisdias Recovery Build We release a recovery build with a handful of critical fixes and translation updates a few days after a release. The candidate fixes are reviewed by the development team and are assigned to the recovery milestone. We want to be restrictive about the included candidates. The mindset is \"we will lose users if we do not include the fix\". Here are some examples: - data loss - a regression that users complain loudly about in issues or twitter - a significant performance regressions - an issue that impacts many users as indicated by telemetry data - an embarrassing UI glitch - critical security fixes - an issue that impacts extensions or is an API regression Check list Create a milestone <Month> Recovery <year> owner Bump the version number owner Include an issue 'update translations' owner Assign candidate issues to the recovery milestone team Review the candidate issues, and if they pass the review assign them to the recovery milestone team All candidate fixes are peer reviewed and pushed to master and then cherry-picked into the release branch team Initiate insiders build from master Issues are tested in the insiders team Build stable for all platforms from release branch owner Make rpm signing request @Tyriar Issues are verified on stable build and the verified label is added owner Check https://github.com/Microsoft/vscode/compare/release/<x.y> to ensure no other commits have been made in the release branch owner Update the release notes and include a link to a query for the fixed issues @gregvanl Smoketest stable bits (\u26a0\ufe0f MUST run with --stable-build argument \u26a0\ufe0f ) Windows - owner OS X - owner Linux - owner Sanity check of installable bits Windows 32 bit owner signed installer 32-bit signed user installer 32-bit zip 32-bit Windows 64 bit owner signed installer 64-bit signed user installer 64-bit zip 64-bit OS X - owner Linux deb package 64-bit owner rpm package 64-bit owner archives owner Server ( instructions ) owner Publish website @gregvanl Publish stable build owner Publish rpm to repository manually @Tyriar Add a git tag to HEAD of release/<x.y> in format x.y.z OS Test Availability Name GitHub Alias Linux Mac Windows Alex @alexandrudima x Andre @weinand x x x Ben @bpasero x x x Brad @bgashler1 x x x Chris @cdias x x x Christof @chrmarti x x x Daniel @tyriar x x x Dirk @dbaeumer x Erich @egamma x x x Greg @gregvanl x x x Isidor @isidorn x x x Joao @joaomoreno x x x Johannes @jrieken x x x Kai @kieferrm x x x Martin @aeschli x x x Peng @rebornix x x x Matt @mjbvz x x x Rob @roblourens x x x Sandeep @sandy081 x x x Steven @stevencl x Alex @alexr00 x x x Dev Matrix [ ] @alexandrudima [ ] @weinand [ ] @bpasero [ ] @chrmarti [ ] @tyriar [ ] @dbaeumer [ ] @egamma [ ] @isidorn [ ] @joaomoreno [ ] @jrieken [ ] @kieferrm [ ] @aeschli [ ] @sandy081 [ ] @mousetraps [ ] @alexr00","title":"Running the Endgame"},{"location":"Running-the-Endgame/#duties-of-the-endgame-master","text":"Proactive communication is key to a smooth and successful endgame. Update iteration plan issue with the endgame schedule (see template below and potentially last month's schedule) Ensure each plan item is linked to a test item Discuss the endgame schedule in Monday's planning call Find an endgame buddy in the other lab Determine the pool of testers and their availability Ensure each test item has meaningful content Assign test items to testers (usually platform specific) using the testplan tool ; ensure fair distribution across testers Communicate test assignments in the release Slack channel by posting the test item queries ( example query ) Communicate end of day progress in the release Slack channel by communicating the number of issues filed the number of test items not yet completed ( example query ) number of issues to be verified Assign owners to checklist items for each day (if not owned by the endgame master) Track progress on test items and checklist items Adjust schedule, particularly the publishing dates, based on defects found, fixes made, holidays, vacations, etc.","title":"Duties of the endgame master"},{"location":"Running-the-Endgame/#schedule-template","text":"Month/Day Code freeze for the endgame Month/Day Endgame done Month/Day Expected release date (this may change) Note: The Insiders build needs to be in the wild for 24 hours before we can enter the last phase of the endgame.","title":"Schedule Template"},{"location":"Running-the-Endgame/#monday","text":"Run OSS tool endgame master Code freeze at 5pm PT Ensure we have a green build on all platforms at 5pm PT All test items contain sufficiently comprehensive test descriptions by 6pm PT Update your availability for testing here - https://vscode-tools.azurewebsites.net/","title":"Monday"},{"location":"Running-the-Endgame/#tuesday","text":"Test plan items assigned (using https://vscode-tools.azurewebsites.net/ ) Run the tool multiple times to balance load if test items come in later and assignments are already made \ud83d\udd16All closed feature-requests either have a verification-needed or on-testplan label Test build starts at 7am CET Test plan ready by 8am CET \ud83d\udd16Testing \ud83d\udd16Verification needed","title":"Tuesday"},{"location":"Running-the-Endgame/#wednesday","text":"\ud83d\udd16Testing Remind team members to assign issues that they intend to fix to the current milestone Fixing (self-assigned, milestone assigned) \ud83d\udd16Verification needed","title":"Wednesday"},{"location":"Running-the-Endgame/#thursday","text":"Fixing (scrutiny sets in - major bugs only - to be discussed in stand-up meeting, labeled as candidate ) \ud83d\udd16Verification needed \ud83d\udd16Verification","title":"Thursday"},{"location":"Running-the-Endgame/#friday","text":"Pause scheduled insider builds endgame master Satellite modules/npm packages ready, version updated, smoke tested vscode @bpasero yo generator @aeschli vsce @joaomoreno node debug @weinand node debug2 @roblourens node debugadapter node @weinand All issues \ud83d\udd16verified Fixing (only critical bugs - no string changes) Smoketest (\u26a0\ufe0f MUST run with --stable-build argument \u26a0\ufe0f ) Windows - owner OS X - owner Linux - owner Web (manual until https://github.com/microsoft/vscode/issues/80308 is done) - owner All release notes updated release notes are collected in a file named Month_Year.md in this repo directory @aeschli @alexandrudima @alexr00 @bpasero @chrmarti @dbaeumer @egamma @isidorn @joaomoreno @jrieken @kieferrm @mjbvz @octref @rebornix @rmacfarlane @roblourens @sandy081 @sbatten @tyriar @weinand Acknowledge pull requests in release notes. We acknowledge PRs from outside the team. Use the thankyou tool to generate the initial contents of the section. owner vscode endgame master vscode-node-debug @weinand vscode-node-debug2 @roblourens vscode-debugadapter-node @weinand vscode-js-debug @connor4312 vscode-languageserver-node @dbaeumer language-server-protocol @dbaeumer vscode-textmate @alexandrudima vscode-loader @alexandrudima vscode-generator-code @aeschli vscode-vsce @joaomoreno vscode-docs @gregvanl vscode-css-languageservice @aeschli vscode-json-languageservice @aeschli vscode-html-languageservice @aeschli jsonc-parser @aeschli vscode-tslint @egamma vscode-eslint @dbaeumer vscode-jshint @rmacfarlane vscode-recipes @chrisdias localization @weeteckt vscode-github-issues-prs @chrmarti inno-updater @joaomoreno Review pull requests acknowledgements with NOT MERGED - PLS REVIEW . endgame master Acknowledge issue trackers from the community @chrmarti Add notable fixes to the release notes all When done fixing/verifying and there are changes since last build at the end of day PT Trigger new insider build and publish it manually endgame master","title":"Friday"},{"location":"Running-the-Endgame/#fridaymonday","text":"Branch code to `release/ endgame master Bump up the version in package.json - endgame master Announce master is open for business endgame master Polish release notes redmond","title":"Friday/Monday"},{"location":"Running-the-Endgame/#monday-wednesday","text":"\ud83d\udd16milestone issues \ud83d\udd16candidate issues Polish release notes redmond Cherry-pick hand-picked and reviewed changes to release/<x.y> endgame master Build Insider from release/<x.y> endgame master Manually release Insider endgame master Build stable for all platforms as new candidate issues come in endgame master Documentation updated @aeschli @alexandrudima @alexr00 @bpasero @chrmarti @dbaeumer @egamma @isidorn @joaomoreno @jrieken @kieferrm @mjbvz @octref @rebornix @rmacfarlane @roblourens @sandy081 @sbatten @tyriar @weinand Run scripts/test-documentation.sh|bat and add file or fix issues if there are new colors that are not documented. Note: The Insiders build needs to be in the wild for 24 hours before we can enter the last phase of the endgame. endgame master","title":"Monday - Wednesday"},{"location":"Running-the-Endgame/#wednesdaythursday","text":"Build stable for all platforms endgame master Sanity check of installable bits Windows 32 bit owner signed installer 32-bit signed user installer 32-bit zip 32-bit Windows 64 bit owner signed installer 64-bit signed user installer 64-bit zip 64-bit OS X - owner Linux deb package 64-bit owner rpm package 64-bit owner archives owner Server ( instructions ) owner Publish website @gregvanl Publish Localization language pack @weeteckt Publish to stable endgame master Add a git tag to HEAD of release/<x.y> in format x.y.z (for vscode.d.ts download) endgame master Publish @types/vscode endgame master Enable scheduled insider builds endgame master Twitter announcement @chrisdias","title":"Wednesday/Thursday"},{"location":"Running-the-Endgame/#recovery-build","text":"We release a recovery build with a handful of critical fixes and translation updates a few days after a release. The candidate fixes are reviewed by the development team and are assigned to the recovery milestone. We want to be restrictive about the included candidates. The mindset is \"we will lose users if we do not include the fix\". Here are some examples: - data loss - a regression that users complain loudly about in issues or twitter - a significant performance regressions - an issue that impacts many users as indicated by telemetry data - an embarrassing UI glitch - critical security fixes - an issue that impacts extensions or is an API regression","title":"Recovery Build"},{"location":"Running-the-Endgame/#check-list","text":"Create a milestone <Month> Recovery <year> owner Bump the version number owner Include an issue 'update translations' owner Assign candidate issues to the recovery milestone team Review the candidate issues, and if they pass the review assign them to the recovery milestone team All candidate fixes are peer reviewed and pushed to master and then cherry-picked into the release branch team Initiate insiders build from master Issues are tested in the insiders team Build stable for all platforms from release branch owner Make rpm signing request @Tyriar Issues are verified on stable build and the verified label is added owner Check https://github.com/Microsoft/vscode/compare/release/<x.y> to ensure no other commits have been made in the release branch owner Update the release notes and include a link to a query for the fixed issues @gregvanl Smoketest stable bits (\u26a0\ufe0f MUST run with --stable-build argument \u26a0\ufe0f ) Windows - owner OS X - owner Linux - owner Sanity check of installable bits Windows 32 bit owner signed installer 32-bit signed user installer 32-bit zip 32-bit Windows 64 bit owner signed installer 64-bit signed user installer 64-bit zip 64-bit OS X - owner Linux deb package 64-bit owner rpm package 64-bit owner archives owner Server ( instructions ) owner Publish website @gregvanl Publish stable build owner Publish rpm to repository manually @Tyriar Add a git tag to HEAD of release/<x.y> in format x.y.z","title":"Check list"},{"location":"Running-the-Endgame/#os-test-availability","text":"Name GitHub Alias Linux Mac Windows Alex @alexandrudima x Andre @weinand x x x Ben @bpasero x x x Brad @bgashler1 x x x Chris @cdias x x x Christof @chrmarti x x x Daniel @tyriar x x x Dirk @dbaeumer x Erich @egamma x x x Greg @gregvanl x x x Isidor @isidorn x x x Joao @joaomoreno x x x Johannes @jrieken x x x Kai @kieferrm x x x Martin @aeschli x x x Peng @rebornix x x x Matt @mjbvz x x x Rob @roblourens x x x Sandeep @sandy081 x x x Steven @stevencl x Alex @alexr00 x x x","title":"OS Test Availability"},{"location":"Running-the-Endgame/#dev-matrix","text":"[ ] @alexandrudima [ ] @weinand [ ] @bpasero [ ] @chrmarti [ ] @tyriar [ ] @dbaeumer [ ] @egamma [ ] @isidorn [ ] @joaomoreno [ ] @jrieken [ ] @kieferrm [ ] @aeschli [ ] @sandy081 [ ] @mousetraps [ ] @alexr00","title":"Dev Matrix"},{"location":"Search-Issues/","text":"Search Issues This document applies to search ( CMD+SHIFT+F / CTRL+SHIFT+F ) and quickopen ( CMD+P / CTRL+P ). By default, VS Code uses the ripgrep tool to drive search. Learn more about how to use search in the documentation . Missing search results By far, the most common reason that expected search results don't appear is because of exclude settings and ignore files . Search and quickopen ignore files using patterns specified in the search.exclude and files.exclude settings, or covered by a pattern in a .gitignore file. So the very first thing to do is to carefully check these settings at the user and workspace levels, and your .gitignore file. Besides .gitignore , we also look at the .ignore , .rgignore , and .git/info/exclude files. You can read more about ripgrep's ignore file logic here . Tip : You can set \"search.useIgnoreFiles\": false to disable using the .gitignore file for search An easy way to validate whether exclude setttings or ignore files are affecting your search is to turn off the \"Use Exclude Settings and Ignore Files\" button in the search viewlet. The button in the lower right corner: Another thing to watch for is that it's possible to add a file covered by a .gitignore file to git , and some tools like git grep will still search these files. Ripgrep is looking at the .gitignore file but doesn't know whether a file has been added to git. So if a file is covered by the .gitignore file, it won't be searched, whether or not it's in git. If your workspace has files with a non-UTF-8 encoding , you will need to set the files.encoding setting to the correct encoding to search in those files. Note that the files.autoGuessEncoding works for the editor, but isn't supported for search. This is less common, but VS Code doesn't handle files with CR-only line endings well. Files that originated on older OS's may use these, and may have missing or inconsistent search results. There is an open issue for this. When looking at issues with missing results, remember that search in open files is implemented by the editor. Search in all other files is implemented by ripgrep. Some issues that look like search is working only in a few random files can be explained by a problem that only affects the ripgrep side of the search. Search including too many results If your search includes results that you expect to be excluded by search.exclude and files.exclude settings or a .gitignore file, the first thing to do is to check those very carefully to ensure they cover what you expect them to cover. Your workspace may have settings that override your user settings. And setting \"search.useIgnoreFiles\": false will disable checking the .gitignore file. The search viewlet has a toggle button , \"Use Exclude Settings and Ignore Files\", which will disable checking both of these things. Make sure that it's toggled on - it's not uncommon that users turn it off and forget about it. Another thing that can cause excluded files to be shown is that open files are still searched even when they are excluded. This is a vscode bug . Slow search, rg running for a long time, or consuming lots of CPU/Memory Does your workspace have lots of symlinks ? Search can take a long time if it has to follow lots of symlinks. Setting \"search.followSymlinks\": false will disable this. Does your search return results on very long lines ? This will cause some slowdown and can even cause VS Code to hang. There is an open bug for this. If your workspace is very large , you might want to use the exclude settings, or the \"files to include/exclude\" text boxes to narrow down your search to the parts you care about. Make sure the \"Use Exclude Settings and Ignore Files\" button is toggled on so your exclude settings are respected. On Windows, the Windows Defender tool can sometimes kick in during a search and slow down searching. Look for a process named using high CPU named MsMpEng.exe in the Task Manager to tell whether Defender is active. You can start VS Code from the command line with the --status flag, or use the Process Explorer (Help > Open Process Explorer) to see running processes owned by VS Code. The ripgrep process will show up as a command that invokes the rg binary inside the VS Code install directory. The arguments passed to rg tell you why it was started and are useful to include in an issue report. You can even copy the command and run it yourself to check for the correct output. The steps on the [[Performance Issues]] wiki page may also be useful. Filing a search issue When filing a search-related issue on the VS Code repo, please try the steps above and include as many details as possible to help us diagnose the issue. If there's an issue with search, do you see the same issue with quickopen, (or vice versa)? If you see an issue with search when you have folder A open, do you see a similar issue with other folders on your computer? Collecting search logs Some details are logged for each search. To see these logs, run the command \"Developer: Set Log Level...\" , select \"Trace\", and run the search again. Then in the output pane, see the logs in the channel named \"Log (Window)\" . The logs show VS Code's internal query object, the arguments with which ripgrep was invoked, and any errors produced by ripgrep. There may also be errors that only show up in the developer tools. Open the developer tools (Help > Toggle Developer Tools) and check the Console for errors.","title":"Search Issues"},{"location":"Search-Issues/#search-issues","text":"This document applies to search ( CMD+SHIFT+F / CTRL+SHIFT+F ) and quickopen ( CMD+P / CTRL+P ). By default, VS Code uses the ripgrep tool to drive search. Learn more about how to use search in the documentation .","title":"Search Issues"},{"location":"Search-Issues/#missing-search-results","text":"By far, the most common reason that expected search results don't appear is because of exclude settings and ignore files . Search and quickopen ignore files using patterns specified in the search.exclude and files.exclude settings, or covered by a pattern in a .gitignore file. So the very first thing to do is to carefully check these settings at the user and workspace levels, and your .gitignore file. Besides .gitignore , we also look at the .ignore , .rgignore , and .git/info/exclude files. You can read more about ripgrep's ignore file logic here . Tip : You can set \"search.useIgnoreFiles\": false to disable using the .gitignore file for search An easy way to validate whether exclude setttings or ignore files are affecting your search is to turn off the \"Use Exclude Settings and Ignore Files\" button in the search viewlet. The button in the lower right corner: Another thing to watch for is that it's possible to add a file covered by a .gitignore file to git , and some tools like git grep will still search these files. Ripgrep is looking at the .gitignore file but doesn't know whether a file has been added to git. So if a file is covered by the .gitignore file, it won't be searched, whether or not it's in git. If your workspace has files with a non-UTF-8 encoding , you will need to set the files.encoding setting to the correct encoding to search in those files. Note that the files.autoGuessEncoding works for the editor, but isn't supported for search. This is less common, but VS Code doesn't handle files with CR-only line endings well. Files that originated on older OS's may use these, and may have missing or inconsistent search results. There is an open issue for this. When looking at issues with missing results, remember that search in open files is implemented by the editor. Search in all other files is implemented by ripgrep. Some issues that look like search is working only in a few random files can be explained by a problem that only affects the ripgrep side of the search.","title":"Missing search results"},{"location":"Search-Issues/#search-including-too-many-results","text":"If your search includes results that you expect to be excluded by search.exclude and files.exclude settings or a .gitignore file, the first thing to do is to check those very carefully to ensure they cover what you expect them to cover. Your workspace may have settings that override your user settings. And setting \"search.useIgnoreFiles\": false will disable checking the .gitignore file. The search viewlet has a toggle button , \"Use Exclude Settings and Ignore Files\", which will disable checking both of these things. Make sure that it's toggled on - it's not uncommon that users turn it off and forget about it. Another thing that can cause excluded files to be shown is that open files are still searched even when they are excluded. This is a vscode bug .","title":"Search including too many results"},{"location":"Search-Issues/#slow-search-rg-running-for-a-long-time-or-consuming-lots-of-cpumemory","text":"Does your workspace have lots of symlinks ? Search can take a long time if it has to follow lots of symlinks. Setting \"search.followSymlinks\": false will disable this. Does your search return results on very long lines ? This will cause some slowdown and can even cause VS Code to hang. There is an open bug for this. If your workspace is very large , you might want to use the exclude settings, or the \"files to include/exclude\" text boxes to narrow down your search to the parts you care about. Make sure the \"Use Exclude Settings and Ignore Files\" button is toggled on so your exclude settings are respected. On Windows, the Windows Defender tool can sometimes kick in during a search and slow down searching. Look for a process named using high CPU named MsMpEng.exe in the Task Manager to tell whether Defender is active. You can start VS Code from the command line with the --status flag, or use the Process Explorer (Help > Open Process Explorer) to see running processes owned by VS Code. The ripgrep process will show up as a command that invokes the rg binary inside the VS Code install directory. The arguments passed to rg tell you why it was started and are useful to include in an issue report. You can even copy the command and run it yourself to check for the correct output. The steps on the [[Performance Issues]] wiki page may also be useful.","title":"Slow search, rg running for a long time, or consuming lots of CPU/Memory"},{"location":"Search-Issues/#filing-a-search-issue","text":"When filing a search-related issue on the VS Code repo, please try the steps above and include as many details as possible to help us diagnose the issue. If there's an issue with search, do you see the same issue with quickopen, (or vice versa)? If you see an issue with search when you have folder A open, do you see a similar issue with other folders on your computer? Collecting search logs Some details are logged for each search. To see these logs, run the command \"Developer: Set Log Level...\" , select \"Trace\", and run the search again. Then in the output pane, see the logs in the channel named \"Log (Window)\" . The logs show VS Code's internal query object, the arguments with which ripgrep was invoked, and any errors produced by ripgrep. There may also be errors that only show up in the developer tools. Open the developer tools (Help > Toggle Developer Tools) and check the Console for errors.","title":"Filing a search issue"},{"location":"Semantic-Highlighting-Overview/","text":"SemanticTokensProvider API (proposed) 3 flavors: tokens for a range (e.g. view port) tokens for the full document tokens for the full document with a reference to the previous result: Result will be reported as delta ( SemanticTokenEdits ) optimized to minimize response sizes using number arrays for all information: line, character, length, token-classification token classification is split into token type and token modifier and represented as an index into a legend . Legend is provided when the provider is registered. lines and characters are relative to the previous token in order to reduce the number of SemanticTokenEdits needed to report a delta. pull model (LS provides token on demand). Token Classification token classification is split into token types and token modifiers standard token types and token modifiers defined by us extensions can contribute new types and modifiers along with default styling rules standard token types: namespace , type , class , enum , interface , struct , typeParameter parameter , variable , property function , member , macro label , comment , string , keyword , number , regexp , operator standard token modifiers: declaration readonly , static , deprecated , abstract async , modification , documentation Token Styling default styling rules to map token classifications to TextMate scopes Themes and user settings can define rules to assign classifications to styles (foreground, italic, underline, bold) \"editor.tokenColorCustomizationsExperimental\": { \"property.readonly\": { \"foreground\": \"#35166d\" }, \"*.declaration\": { \"fontStyle\": \"underline\" } } Highlighting in the editor Semantic tokens are merged with syntax (TextMate) tokens, semantic tokens win language and standard token classification (string, regex, comment) is still done with the TextMate grammars Setting editor.semanticHighlighting.enable to turn feature on/off (also per language) Try it out: Latest insiders ( >20200116) Open TypeScript file use Inspect Editor Tokens and Scopes to see the semantic tokens classifications set theming rules with editor.tokenColorCustomizationsExperimental Planned work and work in progress: - LSP proposal in work by @dbaeumer - extended theming rules syntax (- operator) - use new token types in the built-in themes Links: API: vscode.proposed.d.ts#L223 Latest standard token types and modifiers: tokenClassificationRegistry.ts#L364 Semantic highlighting for JS in HTML: javascriptSemanticTokens.ts Sample: semantic-tokens-sample","title":"Semantic Highlighting Overview"},{"location":"Semantic-Highlighting-Overview/#semantictokensprovider-api-proposed","text":"3 flavors: tokens for a range (e.g. view port) tokens for the full document tokens for the full document with a reference to the previous result: Result will be reported as delta ( SemanticTokenEdits ) optimized to minimize response sizes using number arrays for all information: line, character, length, token-classification token classification is split into token type and token modifier and represented as an index into a legend . Legend is provided when the provider is registered. lines and characters are relative to the previous token in order to reduce the number of SemanticTokenEdits needed to report a delta. pull model (LS provides token on demand).","title":"SemanticTokensProvider API (proposed)"},{"location":"Semantic-Highlighting-Overview/#token-classification","text":"token classification is split into token types and token modifiers standard token types and token modifiers defined by us extensions can contribute new types and modifiers along with default styling rules standard token types: namespace , type , class , enum , interface , struct , typeParameter parameter , variable , property function , member , macro label , comment , string , keyword , number , regexp , operator standard token modifiers: declaration readonly , static , deprecated , abstract async , modification , documentation","title":"Token Classification"},{"location":"Semantic-Highlighting-Overview/#token-styling","text":"default styling rules to map token classifications to TextMate scopes Themes and user settings can define rules to assign classifications to styles (foreground, italic, underline, bold) \"editor.tokenColorCustomizationsExperimental\": { \"property.readonly\": { \"foreground\": \"#35166d\" }, \"*.declaration\": { \"fontStyle\": \"underline\" } }","title":"Token Styling"},{"location":"Semantic-Highlighting-Overview/#highlighting-in-the-editor","text":"Semantic tokens are merged with syntax (TextMate) tokens, semantic tokens win language and standard token classification (string, regex, comment) is still done with the TextMate grammars Setting editor.semanticHighlighting.enable to turn feature on/off (also per language)","title":"Highlighting in the editor"},{"location":"Semantic-Highlighting-Overview/#try-it-out","text":"Latest insiders ( >20200116) Open TypeScript file use Inspect Editor Tokens and Scopes to see the semantic tokens classifications set theming rules with editor.tokenColorCustomizationsExperimental Planned work and work in progress: - LSP proposal in work by @dbaeumer - extended theming rules syntax (- operator) - use new token types in the built-in themes Links: API: vscode.proposed.d.ts#L223 Latest standard token types and modifiers: tokenClassificationRegistry.ts#L364 Semantic highlighting for JS in HTML: javascriptSemanticTokens.ts Sample: semantic-tokens-sample","title":"Try it out:"},{"location":"Setting-Descriptions/","text":"Setting description styleguide This page describes style guidelines for writing descriptions for settings. description / enumDescriptions is rendered as plain text. markdownDescription / markdownEnumDescriptions is rendered as markdown. Be careful to use the correct one. If you are using links, backticks, lists, etc use the markdown property. Commands, keycodes, code snippets, or other \"data items\" must be in backticks with no quotes. Descriptions should be understandable by non-developers or users who don't know everything about vscode. Don't use \"we\" to mean \"vscode\". Use \"macOS\" instead of \"OS X\" Descriptions and enumDescriptions must end in a period. Bools Use \"Controls whether\" instead of \"Controls if\". (Other wordings are ok) Use enabled/disabled or other language instead of true/false. Enums Ideally, enum settings should have a description and enum values clear enough that enumDescriptions aren't needed. But if the enum values aren't self-evident, enum settings should have enumDescriptions. Example of enum without enumDescriptions: editor.cursorStyle . An enum setting description should not duplicate info in the enumDescriptions (enumDescriptions will be rendered next to the description in both setting editors). The description shouldn't list the possible enum values. If enumDescriptions is specified, the length of enumDescriptions must match the length of enum. An empty string for an enumDescription is ok, if the value is self-evident. Example: Enum values mentioned in a description must be in backticks with no quotes. Note - if an enum setting has more than 10 options, its enum descriptions will be rendered inline inside the dropdown control (or in the old settings editor, only in the suggest widget). As far as I can tell, this only affects files.encoding . Avoid using links in enumDescriptions, because they will not be clickable. Links Settings should have a markdown-style link to documentation when relevant docs exist Example: 'search.exclude' : { type : 'object' , description : nls.localize ( 'exclude' , \"[snip] [Read more about glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).\" ), Other setting references All references to other settings must be written in the following special format, which is rewritten into a link by the settings editor: `#editor.detectIndentation#`","title":"Setting Descriptions"},{"location":"Setting-Descriptions/#setting-description-styleguide","text":"This page describes style guidelines for writing descriptions for settings. description / enumDescriptions is rendered as plain text. markdownDescription / markdownEnumDescriptions is rendered as markdown. Be careful to use the correct one. If you are using links, backticks, lists, etc use the markdown property. Commands, keycodes, code snippets, or other \"data items\" must be in backticks with no quotes. Descriptions should be understandable by non-developers or users who don't know everything about vscode. Don't use \"we\" to mean \"vscode\". Use \"macOS\" instead of \"OS X\" Descriptions and enumDescriptions must end in a period. Bools Use \"Controls whether\" instead of \"Controls if\". (Other wordings are ok) Use enabled/disabled or other language instead of true/false. Enums Ideally, enum settings should have a description and enum values clear enough that enumDescriptions aren't needed. But if the enum values aren't self-evident, enum settings should have enumDescriptions. Example of enum without enumDescriptions: editor.cursorStyle . An enum setting description should not duplicate info in the enumDescriptions (enumDescriptions will be rendered next to the description in both setting editors). The description shouldn't list the possible enum values. If enumDescriptions is specified, the length of enumDescriptions must match the length of enum. An empty string for an enumDescription is ok, if the value is self-evident. Example: Enum values mentioned in a description must be in backticks with no quotes. Note - if an enum setting has more than 10 options, its enum descriptions will be rendered inline inside the dropdown control (or in the old settings editor, only in the suggest widget). As far as I can tell, this only affects files.encoding . Avoid using links in enumDescriptions, because they will not be clickable. Links Settings should have a markdown-style link to documentation when relevant docs exist Example: 'search.exclude' : { type : 'object' , description : nls.localize ( 'exclude' , \"[snip] [Read more about glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).\" ), Other setting references All references to other settings must be written in the following special format, which is rewritten into a link by the settings editor: `#editor.detectIndentation#`","title":"Setting description styleguide"},{"location":"Smoke-Test/","text":"This page describes the VS Code Smoke test, an automatic and a manual test suite that we execute before we release VS Code to the public on all platforms. Automated Smoke Test https://github.com/Microsoft/vscode/blob/master/test/smoke/README.md Manual Smoke Test Prereqs For the best debugging experience you'll need node version 6.5 (or higher) Clone the 'express' smoke test repository: git clone https://github.com/Microsoft/vscode-smoketest-express.git cd vscode-smoketest-express yarn In the following steps we'll produce a data directory and extensions directory from the latest stable release we want to use stable to test the update behaviour from that version to our new version! run code --user-data-dir <new user data dir> --extensions-dir <new extensions dir> <vscode-smoketest-express-folder> on OSX set \"update.channel\": \"none\" to disable the automatic update open some files and untitled files and leave them dirty have some UI state (e.g. panel open, multiple editors) close stable Data Migration This task is about running the new version over the same data of the stable released version. Specifically we want to see that the new version is starting up properly, restores all state including dirty files from a previous session. Run code-insiders --user-data-dir <data dir from prereq step> --extensions-dir <extensions dir from prereq step> <vscode-smoketest-express-folder> Verify the new version of VS Code starts properly and all of the UI state is restored from when you used stable in the previous step Verify dirty files and untitled are being restored (hot exit) Data Loss Verify the following both with dirty files and untitled files Make sure you get asked and can save when closing the editor itself Make sure you get asked and can save when closing from Opened Editors view Mac only: Make sure you get asked and can save on window close Make sure that when you file > quit and reopen, dirty files and untitled restore properly (\"hot exit\") First User Experience This task is about verifying how a first launch behaves for new users who have never started Code before. * Delete the user-data-dir and extensions dir from previous steps * Run code-insiders --user-data-dir <data dir> --extensions-dir <extensions dir> <vscode-smoketest-express-folder> * Verify you see a welcome page and the experience is pleasant Explorer Launch VSCode and open the vscode-smoketest-express folder On the desktop create an info.txt file Drag it to the explorer then rename it to README.txt Move README.txt to another folder and then delete it and verify it ends up in the trash Quick open (CTRL+P, \u2318+P) to find the .js files and other files with a similar extension Verify quick open sorting makes sense and it respects fuzzy matching (e.g. 'a.s' should produce 4 results) Verify the Opened Editors view reflects your state of opened editors Configuration and views Select File > Preferences > Settings (OS X: Code > Preferences > Settings) Under editor, change line number to off, save the file, verify that line numbers are turned off without refresh. Select File > Preferences > Keyboard Shortcuts (OS X: Code > Preferences > Keyboard Shortcuts) Change a binding of an action and verify the new binding works. e.g. Look for command workbench.action.toggleSidebarPosition and change its keybinding to ctrl+u and verify it works. Verify that \"Go to line\" works (ctrl+g) Search Use Search ( CTRL+SHIFT+F , \u2318+SHIFT+F ) to find body Verify that 16 results in 5 files show up Verify you can run the search filtering for *.js files Verify you can dismiss files from search results Verify you can replace search results with a replace term Multi Root Add more than one folder to the workspace Verify you can use the explorer to open files from all folders Verify you can search across all folders CSS Open file style.css verify quick outline ( CTRL+SHIFT+O , ( \u2318+SHIFT+O ) Add an empty rule .foo{} verify you can see a warning in the editor verify you can see a warning from the Problems view Select File > Preferences > Settings (OS X: Code > Preferences > User Settings) change css.lint.emptyRules from warning to error Go back to style.css, verify that the warning turns into an error. Verify you get css intellisense Markdown Open readme.md and open the preview side by side Make changes to the readme.md and verify they are reflected live on the preview JavaScript Open bin/www Show the quick outline ( CTRL+SHIFT+O , \u2318+SHIFT+O ) verify that entries show up and make sense From the context select Find All References to app From context menu use Rename Symbol to rename a local variable Verify code folding works Open app.js Verify go to definition and peek definition work Format the code Debugging JavaScript In VSCode switch to debugging viewlet Click on the gear to create a default launch.json file: make sure that VSCode automatically detects ${workspaceRoot}/bin/www as the 'program' attribute add \"protocol\": \"inspector\" to launch.json Set a breakpoint in index.js:6 Press F5 to start debugging. Verify: workbench transforms into \"debug mode\" - glyph margin and status bar turns orange Open browser at http://localhost:3000/ verify the breakpoint in index.js gets hit Verify step over, step in, continue work While stopped, verify: you can hover over values clicking on a stack frame shows variables associated with that stack frame you can add a watch expression you can evaluate a expressions in the debug console Verify you can stop the debug session and that workbench exits \"debug mode\" Git Open git viewlet Verify that the changes you made are showing up if not, make some new changes verify the changes in the diff viewer are reflecting the changes you did verify multi select works Commit the changes locally verify that an outgoing change shows up in the status bar of VSCode Clean up: click on the ellipses in the git viewlet and choose 'Undo Last Commit' Integrated Terminal Open the integrated terminal Run a command and verify the output makes sense (e.g. ls or dir ) Status bar Quickly click on all the actions in the status bar and verify they behave as expected Execute various commands from the status bar (change language mode, indentation\u2026) Extensions Install an extension that you can easily verify works (e.g. new theme) Verify that the extension gets installed and that on restart of VSCode it works Uninstall the extension and verify it is no longer present after VSCode restarts Accessibility Turn on OS X: Voice Over Windows: nvda, command palette > 'Toggle Tab Key Moves Focus' ( CTRL+M ) Linux: n/a Tab through the whole workbench and verify what you hear makes sense. Also verify you can tab back into the location from where you started Check high contrast theme Localization Start code from the command line with --locale=DE Verify all menus and viewlets are in German (or your language of choice)","title":"Smoke Test"},{"location":"Smoke-Test/#automated-smoke-test","text":"https://github.com/Microsoft/vscode/blob/master/test/smoke/README.md","title":"Automated Smoke Test"},{"location":"Smoke-Test/#manual-smoke-test","text":"","title":"Manual Smoke Test"},{"location":"Smoke-Test/#prereqs","text":"For the best debugging experience you'll need node version 6.5 (or higher) Clone the 'express' smoke test repository: git clone https://github.com/Microsoft/vscode-smoketest-express.git cd vscode-smoketest-express yarn In the following steps we'll produce a data directory and extensions directory from the latest stable release we want to use stable to test the update behaviour from that version to our new version! run code --user-data-dir <new user data dir> --extensions-dir <new extensions dir> <vscode-smoketest-express-folder> on OSX set \"update.channel\": \"none\" to disable the automatic update open some files and untitled files and leave them dirty have some UI state (e.g. panel open, multiple editors) close stable","title":"Prereqs"},{"location":"Smoke-Test/#data-migration","text":"This task is about running the new version over the same data of the stable released version. Specifically we want to see that the new version is starting up properly, restores all state including dirty files from a previous session. Run code-insiders --user-data-dir <data dir from prereq step> --extensions-dir <extensions dir from prereq step> <vscode-smoketest-express-folder> Verify the new version of VS Code starts properly and all of the UI state is restored from when you used stable in the previous step Verify dirty files and untitled are being restored (hot exit)","title":"Data Migration"},{"location":"Smoke-Test/#data-loss","text":"Verify the following both with dirty files and untitled files Make sure you get asked and can save when closing the editor itself Make sure you get asked and can save when closing from Opened Editors view Mac only: Make sure you get asked and can save on window close Make sure that when you file > quit and reopen, dirty files and untitled restore properly (\"hot exit\")","title":"Data Loss"},{"location":"Smoke-Test/#first-user-experience","text":"This task is about verifying how a first launch behaves for new users who have never started Code before. * Delete the user-data-dir and extensions dir from previous steps * Run code-insiders --user-data-dir <data dir> --extensions-dir <extensions dir> <vscode-smoketest-express-folder> * Verify you see a welcome page and the experience is pleasant","title":"First User Experience"},{"location":"Smoke-Test/#explorer","text":"Launch VSCode and open the vscode-smoketest-express folder On the desktop create an info.txt file Drag it to the explorer then rename it to README.txt Move README.txt to another folder and then delete it and verify it ends up in the trash Quick open (CTRL+P, \u2318+P) to find the .js files and other files with a similar extension Verify quick open sorting makes sense and it respects fuzzy matching (e.g. 'a.s' should produce 4 results) Verify the Opened Editors view reflects your state of opened editors","title":"Explorer"},{"location":"Smoke-Test/#configuration-and-views","text":"Select File > Preferences > Settings (OS X: Code > Preferences > Settings) Under editor, change line number to off, save the file, verify that line numbers are turned off without refresh. Select File > Preferences > Keyboard Shortcuts (OS X: Code > Preferences > Keyboard Shortcuts) Change a binding of an action and verify the new binding works. e.g. Look for command workbench.action.toggleSidebarPosition and change its keybinding to ctrl+u and verify it works. Verify that \"Go to line\" works (ctrl+g)","title":"Configuration and views"},{"location":"Smoke-Test/#search","text":"Use Search ( CTRL+SHIFT+F , \u2318+SHIFT+F ) to find body Verify that 16 results in 5 files show up Verify you can run the search filtering for *.js files Verify you can dismiss files from search results Verify you can replace search results with a replace term","title":"Search"},{"location":"Smoke-Test/#multi-root","text":"Add more than one folder to the workspace Verify you can use the explorer to open files from all folders Verify you can search across all folders","title":"Multi Root"},{"location":"Smoke-Test/#css","text":"Open file style.css verify quick outline ( CTRL+SHIFT+O , ( \u2318+SHIFT+O ) Add an empty rule .foo{} verify you can see a warning in the editor verify you can see a warning from the Problems view Select File > Preferences > Settings (OS X: Code > Preferences > User Settings) change css.lint.emptyRules from warning to error Go back to style.css, verify that the warning turns into an error. Verify you get css intellisense","title":"CSS"},{"location":"Smoke-Test/#markdown","text":"Open readme.md and open the preview side by side Make changes to the readme.md and verify they are reflected live on the preview","title":"Markdown"},{"location":"Smoke-Test/#javascript","text":"Open bin/www Show the quick outline ( CTRL+SHIFT+O , \u2318+SHIFT+O ) verify that entries show up and make sense From the context select Find All References to app From context menu use Rename Symbol to rename a local variable Verify code folding works Open app.js Verify go to definition and peek definition work Format the code","title":"JavaScript"},{"location":"Smoke-Test/#debugging-javascript","text":"In VSCode switch to debugging viewlet Click on the gear to create a default launch.json file: make sure that VSCode automatically detects ${workspaceRoot}/bin/www as the 'program' attribute add \"protocol\": \"inspector\" to launch.json Set a breakpoint in index.js:6 Press F5 to start debugging. Verify: workbench transforms into \"debug mode\" - glyph margin and status bar turns orange Open browser at http://localhost:3000/ verify the breakpoint in index.js gets hit Verify step over, step in, continue work While stopped, verify: you can hover over values clicking on a stack frame shows variables associated with that stack frame you can add a watch expression you can evaluate a expressions in the debug console Verify you can stop the debug session and that workbench exits \"debug mode\"","title":"Debugging JavaScript"},{"location":"Smoke-Test/#git","text":"Open git viewlet Verify that the changes you made are showing up if not, make some new changes verify the changes in the diff viewer are reflecting the changes you did verify multi select works Commit the changes locally verify that an outgoing change shows up in the status bar of VSCode Clean up: click on the ellipses in the git viewlet and choose 'Undo Last Commit'","title":"Git"},{"location":"Smoke-Test/#integrated-terminal","text":"Open the integrated terminal Run a command and verify the output makes sense (e.g. ls or dir )","title":"Integrated Terminal"},{"location":"Smoke-Test/#status-bar","text":"Quickly click on all the actions in the status bar and verify they behave as expected Execute various commands from the status bar (change language mode, indentation\u2026)","title":"Status bar"},{"location":"Smoke-Test/#extensions","text":"Install an extension that you can easily verify works (e.g. new theme) Verify that the extension gets installed and that on restart of VSCode it works Uninstall the extension and verify it is no longer present after VSCode restarts","title":"Extensions"},{"location":"Smoke-Test/#accessibility","text":"Turn on OS X: Voice Over Windows: nvda, command palette > 'Toggle Tab Key Moves Focus' ( CTRL+M ) Linux: n/a Tab through the whole workbench and verify what you hear makes sense. Also verify you can tab back into the location from where you started Check high contrast theme","title":"Accessibility"},{"location":"Smoke-Test/#localization","text":"Start code from the command line with --locale=DE Verify all menus and viewlets are in German (or your language of choice)","title":"Localization"},{"location":"Source-Code-Organization/","text":"Visual Studio Code consists of a layered and modular core (found as src/vs ) that can be extended using extensions. Extensions are run in a separate process referred to as the extension host. Extensions are implemented by utilizing the extension API . Layers The core is partitioned into the following layers: - base : Provides general utilities and user interface building blocks - platform : Defines service injection support and the base services for VS Code - editor : The \"Monaco\" editor is available as a separate downloadable component - ~ languages : For historical reasons, not all languages are implemented as extensions (yet) - as VS Code evolves we will migrate more languages to towards extensions~ - workbench : Hosts the \"Monaco\" editor and provides the framework for \"viewlets\" like the Explorer, Status Bar, or Menu Bar, leveraging Electron to implement the VS Code desktop application. Target Environments The core of VS Code is fully implemented in TypeScript . Inside each layer the code is organized by the target runtime environment. This ensures that only the runtime specific APIs are used. In the code we distinguish between the following target environments: - common : Source code that only requires basic JavaScript APIs and run in all the other target environments - browser : Source code that requires the browser APIs like access to the DOM - may use code from: common - node : Source code that requires nodejs APIs - may use code from: common - electron-browser : Source code that requires the Electron renderer-process APIs - may use code from: common , browser , node - electron-main : Source code that requires the Electron main-process APIs - may use code from: common , node Dependency Injection The code is organized around services of which most are defined in the platform layer. Services get to its clients via constructor injection . A service definition is two parts: (1) the interface of a service, and (2) a service identifier - the latter is required because TypeScript doesn't use nominal but structural typing. A service identifier is a decoration (as proposed for ES7) and should have the same name as the service interface. Declaring a service dependency happens by adding a corresponding decoration to a constructor argument. In the snippet below @IModelService is the service identifier decoration and IModelService is the (optional) type annotation for this argument. When a dependency is optional, use the @optional decoration otherwise the instantiation service throws an error. class Client { constructor ( @ IModelService modelService : IModelService , @ optional ( IEditorService ) editorService : IEditorService ) { // use services } } Use the instantiation service to create instances for service consumers, like so instantiationService.createInstance(Client) . Usually, this is done for you when being registered as a contribution, like a Viewlet or Language. VS Code Editor source organization the vs/editor folder should not have any node or electron-browser dependencies. vs/editor/common and vs/editor/browser - the code editor core (critical code without which an editor does not make sense). vs/editor/contrib - code editor contributions that ship in both VS Code and the standalone editor. They depend on browser by convention and an editor can be crafted without them which results in the feature brought in being removed. vs/editor/standalone - code that ships only with the standalone editor. Nothing else should depend on vs/editor/standalone vs/workbench/contrib/codeEditor - code editor contributions that ship in VS Code. Workbench Contrib The VS Code workbench ( vs/workbench ) is composed of many things to provide a rich development experience. Examples include full text search, integrated git and debug. At its core, the workbench does not have direct dependencies to all these contributions. Instead, we use an internal (as opposed to real extension API) mechanism to contribute these contributions to the workbench. Contributions that are contributed to the workbench all live inside the vs/workbench/contrib folder. There are some rules around this folder: - there cannot be any dependency from outside vs/workbench/contrib into vs/workbench/contrib - every contribution should expose its internal API from a single file (e.g. vs/workbench/contrib/search/common/search.ts ) - a contribution is allowed to depend on the internal API of another contribution (e.g. the git contribution may depend on vs/workbench/contrib/search/common/search.ts ) - a contribution should never reach into the internals of another contribution (internal is anything inside a contribution that is not in the single common API file) - think twice before letting a contribution depend on another contribution: is that really needed and does it make sense? Can the dependency be avoided by using the workbench extensibility story maybe?","title":"Source Code Organization"},{"location":"Source-Code-Organization/#layers","text":"The core is partitioned into the following layers: - base : Provides general utilities and user interface building blocks - platform : Defines service injection support and the base services for VS Code - editor : The \"Monaco\" editor is available as a separate downloadable component - ~ languages : For historical reasons, not all languages are implemented as extensions (yet) - as VS Code evolves we will migrate more languages to towards extensions~ - workbench : Hosts the \"Monaco\" editor and provides the framework for \"viewlets\" like the Explorer, Status Bar, or Menu Bar, leveraging Electron to implement the VS Code desktop application.","title":"Layers"},{"location":"Source-Code-Organization/#target-environments","text":"The core of VS Code is fully implemented in TypeScript . Inside each layer the code is organized by the target runtime environment. This ensures that only the runtime specific APIs are used. In the code we distinguish between the following target environments: - common : Source code that only requires basic JavaScript APIs and run in all the other target environments - browser : Source code that requires the browser APIs like access to the DOM - may use code from: common - node : Source code that requires nodejs APIs - may use code from: common - electron-browser : Source code that requires the Electron renderer-process APIs - may use code from: common , browser , node - electron-main : Source code that requires the Electron main-process APIs - may use code from: common , node","title":"Target Environments"},{"location":"Source-Code-Organization/#dependency-injection","text":"The code is organized around services of which most are defined in the platform layer. Services get to its clients via constructor injection . A service definition is two parts: (1) the interface of a service, and (2) a service identifier - the latter is required because TypeScript doesn't use nominal but structural typing. A service identifier is a decoration (as proposed for ES7) and should have the same name as the service interface. Declaring a service dependency happens by adding a corresponding decoration to a constructor argument. In the snippet below @IModelService is the service identifier decoration and IModelService is the (optional) type annotation for this argument. When a dependency is optional, use the @optional decoration otherwise the instantiation service throws an error. class Client { constructor ( @ IModelService modelService : IModelService , @ optional ( IEditorService ) editorService : IEditorService ) { // use services } } Use the instantiation service to create instances for service consumers, like so instantiationService.createInstance(Client) . Usually, this is done for you when being registered as a contribution, like a Viewlet or Language.","title":"Dependency Injection"},{"location":"Source-Code-Organization/#vs-code-editor-source-organization","text":"the vs/editor folder should not have any node or electron-browser dependencies. vs/editor/common and vs/editor/browser - the code editor core (critical code without which an editor does not make sense). vs/editor/contrib - code editor contributions that ship in both VS Code and the standalone editor. They depend on browser by convention and an editor can be crafted without them which results in the feature brought in being removed. vs/editor/standalone - code that ships only with the standalone editor. Nothing else should depend on vs/editor/standalone vs/workbench/contrib/codeEditor - code editor contributions that ship in VS Code.","title":"VS Code Editor source organization"},{"location":"Source-Code-Organization/#workbench-contrib","text":"The VS Code workbench ( vs/workbench ) is composed of many things to provide a rich development experience. Examples include full text search, integrated git and debug. At its core, the workbench does not have direct dependencies to all these contributions. Instead, we use an internal (as opposed to real extension API) mechanism to contribute these contributions to the workbench. Contributions that are contributed to the workbench all live inside the vs/workbench/contrib folder. There are some rules around this folder: - there cannot be any dependency from outside vs/workbench/contrib into vs/workbench/contrib - every contribution should expose its internal API from a single file (e.g. vs/workbench/contrib/search/common/search.ts ) - a contribution is allowed to depend on the internal API of another contribution (e.g. the git contribution may depend on vs/workbench/contrib/search/common/search.ts ) - a contribution should never reach into the internals of another contribution (internal is anything inside a contribution that is not in the single common API file) - think twice before letting a contribution depend on another contribution: is that really needed and does it make sense? Can the dependency be avoided by using the workbench extensibility story maybe?","title":"Workbench Contrib"},{"location":"Submitting-Bugs-and-Suggestions/","text":"The VS Code project tracks issues and feature requests using the GitHub issue tracker for the vscode repository. Before Submitting an Issue First, please do a search in open issues to see if the issue or feature request has already been filed. Use this query to search for the most popular feature requests. If you find your issue already exists, make relevant comments and add your reaction . Use a reaction in place of a \"+1\" comment. \ud83d\udc4d - upvote \ud83d\udc4e - downvote The VS Code project is distributed across multiple repositories, try to file the issue against the correct repository Related Projects . If your issue is a question then please ask the question on Stack Overflow using the tag vscode . If you cannot find an existing issue that describes your bug or feature, submit an issue using the guidelines below. Writing Good Bug Reports and Feature Requests File a single issue per problem and feature request. Do not enumerate multiple bugs or feature requests in the same issue. Do not add your issue as a comment to an existing issue unless it's for the identical input. Many issues look similar, but have different causes. The more information you can provide, the more likely someone will be successful reproducing the issue and finding a fix. Please include the following with each issue. Version of VS Code List of extensions that you have installed. Tip: You can easily add the list of extensions by creating the issue using Report Issues from VS Code's Help menu. Reproducible steps (1... 2... 3...) and what you expected versus what you actually saw. Images, animations, or a link to a video. Note that images and animations illustrate repro-steps but do not replace them. A code snippet that demonstrates the issue or a link to a code repository we can easily pull down onto our machine to recreate the issue. Note: Because we need to copy and paste the code snippet, including a code snippet as a media file (i.e. .gif) is not sufficient. Errors in the Dev Tools Console (Help | Toggle Developer Tools) Please remember to do the following: Search the issue repository to see if there exists a duplicate. Recreate the issue after disabling all extensions (see the docs for how to do this ). If you find the issue is caused by an extension you have installed please file an issue on the extension respectively. Simplify your code around the issue so we can better isolate the problem. Don't feel bad if we can't reproduce the issue and ask for more information! Finally, this is our issue tracking work flow that describes what happens once you submitted an issue. Contributing Fixes If you are interested in fixing issues and contributing directly to the code base, please see the document How to Contribute .","title":"Submitting Bugs and Suggestions"},{"location":"Submitting-Bugs-and-Suggestions/#before-submitting-an-issue","text":"First, please do a search in open issues to see if the issue or feature request has already been filed. Use this query to search for the most popular feature requests. If you find your issue already exists, make relevant comments and add your reaction . Use a reaction in place of a \"+1\" comment. \ud83d\udc4d - upvote \ud83d\udc4e - downvote The VS Code project is distributed across multiple repositories, try to file the issue against the correct repository Related Projects . If your issue is a question then please ask the question on Stack Overflow using the tag vscode . If you cannot find an existing issue that describes your bug or feature, submit an issue using the guidelines below.","title":"Before Submitting an Issue"},{"location":"Submitting-Bugs-and-Suggestions/#writing-good-bug-reports-and-feature-requests","text":"File a single issue per problem and feature request. Do not enumerate multiple bugs or feature requests in the same issue. Do not add your issue as a comment to an existing issue unless it's for the identical input. Many issues look similar, but have different causes. The more information you can provide, the more likely someone will be successful reproducing the issue and finding a fix. Please include the following with each issue. Version of VS Code List of extensions that you have installed. Tip: You can easily add the list of extensions by creating the issue using Report Issues from VS Code's Help menu. Reproducible steps (1... 2... 3...) and what you expected versus what you actually saw. Images, animations, or a link to a video. Note that images and animations illustrate repro-steps but do not replace them. A code snippet that demonstrates the issue or a link to a code repository we can easily pull down onto our machine to recreate the issue. Note: Because we need to copy and paste the code snippet, including a code snippet as a media file (i.e. .gif) is not sufficient. Errors in the Dev Tools Console (Help | Toggle Developer Tools) Please remember to do the following: Search the issue repository to see if there exists a duplicate. Recreate the issue after disabling all extensions (see the docs for how to do this ). If you find the issue is caused by an extension you have installed please file an issue on the extension respectively. Simplify your code around the issue so we can better isolate the problem. Don't feel bad if we can't reproduce the issue and ask for more information! Finally, this is our issue tracking work flow that describes what happens once you submitted an issue.","title":"Writing Good Bug Reports and Feature Requests"},{"location":"Submitting-Bugs-and-Suggestions/#contributing-fixes","text":"If you are interested in fixing issues and contributing directly to the code base, please see the document How to Contribute .","title":"Contributing Fixes"},{"location":"Terminal-Issues/","text":"Terminal Issues This document is about reporting issues for the integrated terminal ( ctrl + ` ). Learn more about how to use the terminal in the documentation . Creating great terminal issues Make sure you read the common questions and long-standing known issues sections below as you might be reporting an issue that is already known. Include the VS Code version, Operating System version and a list of extensions you're using. Ideally you should use the issue reporter built into VS Code for this as it automatically includes this information in the report. Including a screenshot or gif is normally a good idea. Including your settings.json is also a good idea as many issues are normally related to bad configuration. Take note if you're using an extension to launch the terminal, for example using a debugger to launch the terminal, language extension (eg. PowerShell Integrated Console) or something like Code Runner. If so there's a good chance it's an issue with the extension, not with VS Code. Windows-specific additions: Be sure to include the build number if you're on Windows 10, this is attached automatically when using the builtin issue reporter or can be fetched manually by running ver in cmd.exe . If you're on Windows 10 1809 and below then you will be on the old terminal backend called winpty , a lot of these issues will not be actionable and closed as the solution to them was to move to the new frontend conpty . Common questions Make sure you read over the common questions section on the website . Long-standing known issues Here are some long standing known issues in the terminal: Various emulation issues on Windows #45693 Terminal does not show any text on Windows 7 #43169 Try turning off compatibility mode Characters like underscore are being cut off #35901 Try changing the terminal.integrated.fontFamily Emojis are printed as double width but are single width xtermjs/xterm.js#1059 Which issues go in which repos The terminal has several dependencies which are also open source projects such as xterm.js , node-pty and conpty . Managing issues is difficult across so many repos so the general rule we follow with terminal issues is that fairly niche upstream issues are only tracked in the upstream repositories and major upstream issues are tracked in VS Code as well in order to improve discoverability of the issue in question. Diagnosing terminal issues Enabling trace logging For some terminal issues it's useful to get trace logs, this can reveal at what point something is failing. Follow these steps to get the logs: Close all VS Code windows Launch VS Code from the terminal using code --log trace At this point you should reproduce the terminal issue you're having Run the command \"Developer: Open Log File...\" ( F1 opened command palette) and select Window to get an editor containing the logs Enabling escape sequence logging For issues where text is misbehaving in the terminal you can enable logging of the data being sent to the emulator from the shell process. To enable escape sequence logging run the \"Terminal: Toggle Escape Sequence Logging\" command from the command palette ( F1 ), the logs can then be viewed in the devtools console (Help > Toggle Developer Tools). Rendering problems Figuring out what's going on with rendering can be tricky as there are a lot of moving parts. A blank screen could mean that the terminal was never created properly and the terminal is fine, or maybe that the renderer is broken. Here are good steps to help find the root cause of rendering problems: Zoom in and out (ctrl/cmd++, ctrl/cmd+-) will force the renderer to redraw everything The terminal features both a canvas-based renderer (fast can have various problems) dom-based renderer (slower but less problems). Changing the renderer type can identify issues with a particular renderer, configure with these settings: \"terminal.integrated.rendererType\": \"dom\" \"terminal.integrated.rendererType\": \"canvas\" Known rendering problems: Corrupt texture showing after resuming OS from sleep #69665 Underscore and similar chars not showing up #35901 Characters become small or large after changing monitor DPI xtermjs/xterm.js#2137","title":"Terminal Issues"},{"location":"Terminal-Issues/#terminal-issues","text":"This document is about reporting issues for the integrated terminal ( ctrl + ` ). Learn more about how to use the terminal in the documentation .","title":"Terminal Issues"},{"location":"Terminal-Issues/#creating-great-terminal-issues","text":"Make sure you read the common questions and long-standing known issues sections below as you might be reporting an issue that is already known. Include the VS Code version, Operating System version and a list of extensions you're using. Ideally you should use the issue reporter built into VS Code for this as it automatically includes this information in the report. Including a screenshot or gif is normally a good idea. Including your settings.json is also a good idea as many issues are normally related to bad configuration. Take note if you're using an extension to launch the terminal, for example using a debugger to launch the terminal, language extension (eg. PowerShell Integrated Console) or something like Code Runner. If so there's a good chance it's an issue with the extension, not with VS Code. Windows-specific additions: Be sure to include the build number if you're on Windows 10, this is attached automatically when using the builtin issue reporter or can be fetched manually by running ver in cmd.exe . If you're on Windows 10 1809 and below then you will be on the old terminal backend called winpty , a lot of these issues will not be actionable and closed as the solution to them was to move to the new frontend conpty .","title":"Creating great terminal issues"},{"location":"Terminal-Issues/#common-questions","text":"Make sure you read over the common questions section on the website .","title":"Common questions"},{"location":"Terminal-Issues/#long-standing-known-issues","text":"Here are some long standing known issues in the terminal: Various emulation issues on Windows #45693 Terminal does not show any text on Windows 7 #43169 Try turning off compatibility mode Characters like underscore are being cut off #35901 Try changing the terminal.integrated.fontFamily Emojis are printed as double width but are single width xtermjs/xterm.js#1059","title":"Long-standing known issues"},{"location":"Terminal-Issues/#which-issues-go-in-which-repos","text":"The terminal has several dependencies which are also open source projects such as xterm.js , node-pty and conpty . Managing issues is difficult across so many repos so the general rule we follow with terminal issues is that fairly niche upstream issues are only tracked in the upstream repositories and major upstream issues are tracked in VS Code as well in order to improve discoverability of the issue in question.","title":"Which issues go in which repos"},{"location":"Terminal-Issues/#diagnosing-terminal-issues","text":"","title":"Diagnosing terminal issues"},{"location":"Terminal-Issues/#enabling-trace-logging","text":"For some terminal issues it's useful to get trace logs, this can reveal at what point something is failing. Follow these steps to get the logs: Close all VS Code windows Launch VS Code from the terminal using code --log trace At this point you should reproduce the terminal issue you're having Run the command \"Developer: Open Log File...\" ( F1 opened command palette) and select Window to get an editor containing the logs","title":"Enabling trace logging"},{"location":"Terminal-Issues/#enabling-escape-sequence-logging","text":"For issues where text is misbehaving in the terminal you can enable logging of the data being sent to the emulator from the shell process. To enable escape sequence logging run the \"Terminal: Toggle Escape Sequence Logging\" command from the command palette ( F1 ), the logs can then be viewed in the devtools console (Help > Toggle Developer Tools).","title":"Enabling escape sequence logging"},{"location":"Terminal-Issues/#rendering-problems","text":"Figuring out what's going on with rendering can be tricky as there are a lot of moving parts. A blank screen could mean that the terminal was never created properly and the terminal is fine, or maybe that the renderer is broken. Here are good steps to help find the root cause of rendering problems: Zoom in and out (ctrl/cmd++, ctrl/cmd+-) will force the renderer to redraw everything The terminal features both a canvas-based renderer (fast can have various problems) dom-based renderer (slower but less problems). Changing the renderer type can identify issues with a particular renderer, configure with these settings: \"terminal.integrated.rendererType\": \"dom\" \"terminal.integrated.rendererType\": \"canvas\" Known rendering problems: Corrupt texture showing after resuming OS from sleep #69665 Underscore and similar chars not showing up #35901 Characters become small or large after changing monitor DPI xtermjs/xterm.js#2137","title":"Rendering problems"},{"location":"UX/","text":"User Experience Process User experience design inspires people to express their opinions with the utmost of passion \ud83d\ude00 . Here is how we do design and how you can contribute to the process. Monthly Iteration Planning As a part of our monthly planning process, we will look at the themes for the milestone and identify which UX features and issues we want to work on in the upcoming iteration. We will tag all of the issues with the \"UX\" label , set the Milestone, and make sure the appropriate issues are in the iteration plan . This process builds the UX backlog for the upcoming milestone. Different issues will require different amount of UX design and research. For example, issue 5841 may only require a quick discussion, while issue 224 (Add Tabs to VS Code) requires customer research, design proposals, collecting deep feedback on the proposals from the community, and iteration until we reach the right experience. Also, for larger tasks such as Tabs, we may do UX research and design in one milestone and then do implementation work in another. In these we will create individual issues to discuss UX design and separate issues for engineering. Weekly UX Design Meetings With a backlog defined, the \"UX Team\" meets weekly to discuss issues, review designs and customer feedback, and establish the next steps for an issue. The UX team typically meets on Wednesday mornings (PST or GMT-8). Here is the workflow: Identify the set of critical issues to discuss for the week, many but not all will be backed by an issue in GitHub Publish the agenda as a new GitHub issue Review the issues and take note of discussions, decisions, and next steps Update the relevant issues with design meeting notes and close out the agenda issue as appropriate One common result of a meeting will be to gather more feedback on a design or customer problem. This may involve interviews, surveys, or simply asking for feedback in an issue. Another common result will be that we close the design discussion issue, once the design has been finalized. We will open and linked engineering issues to track the work necessary to implement those designs. Comments on the results are encouraged and will serve as input for subsequent discussions. Research Process Customer research comes in many forms. Issues often contain a lot of information about a specific UX problem and telemetry can tell us how many people might be affected. On top of this we try to understand the context in which problems manifest themselves and in which our designs must succeed. A great way to get that rich contextual information is through talking with and observing people using the product. We will sometimes run a series of customer interviews, observing their behaviors while using the tool or stepping through a prototype. Early on, these interviews will focus on understanding the details of the problems we are solving. As we learn more about those details and transition into solution mode, we\u2019ll use interviews and observations to determine if the design decisions we are making are solving the problems we intend to solve. Design Process Once we feel that we have a good understanding of the problem, we start to develop design concepts for potential solutions. Early on we try to produce multiple low fidelity concepts and solutions (pencil sketches, wireframes, PowerPoint slides, etc.) which help us focus on the interaction flow instead of details such as colors and fonts. In parallel time we may start to prototype a solution, incorporating feedback from the research and design, morphing the experience along the way. We do this in parallel because the best feedback really comes from dogfooding the product. How to Contribute As mentioned above, UX design can bring out the passion in people and we would like to turn that passion into a great product. If you have thoughts on a proposal, we ask that you (respectfully!) contribute those thoughts in the appropriate issue. We have many opportunities to participate in online studies and surveys, and we will solicit participation through the issue (and probably twitter @code ).","title":"UX"},{"location":"UX/#user-experience-process","text":"User experience design inspires people to express their opinions with the utmost of passion \ud83d\ude00 . Here is how we do design and how you can contribute to the process.","title":"User Experience Process"},{"location":"UX/#monthly-iteration-planning","text":"As a part of our monthly planning process, we will look at the themes for the milestone and identify which UX features and issues we want to work on in the upcoming iteration. We will tag all of the issues with the \"UX\" label , set the Milestone, and make sure the appropriate issues are in the iteration plan . This process builds the UX backlog for the upcoming milestone. Different issues will require different amount of UX design and research. For example, issue 5841 may only require a quick discussion, while issue 224 (Add Tabs to VS Code) requires customer research, design proposals, collecting deep feedback on the proposals from the community, and iteration until we reach the right experience. Also, for larger tasks such as Tabs, we may do UX research and design in one milestone and then do implementation work in another. In these we will create individual issues to discuss UX design and separate issues for engineering.","title":"Monthly Iteration Planning"},{"location":"UX/#weekly-ux-design-meetings","text":"With a backlog defined, the \"UX Team\" meets weekly to discuss issues, review designs and customer feedback, and establish the next steps for an issue. The UX team typically meets on Wednesday mornings (PST or GMT-8). Here is the workflow: Identify the set of critical issues to discuss for the week, many but not all will be backed by an issue in GitHub Publish the agenda as a new GitHub issue Review the issues and take note of discussions, decisions, and next steps Update the relevant issues with design meeting notes and close out the agenda issue as appropriate One common result of a meeting will be to gather more feedback on a design or customer problem. This may involve interviews, surveys, or simply asking for feedback in an issue. Another common result will be that we close the design discussion issue, once the design has been finalized. We will open and linked engineering issues to track the work necessary to implement those designs. Comments on the results are encouraged and will serve as input for subsequent discussions.","title":"Weekly UX Design Meetings"},{"location":"UX/#research-process","text":"Customer research comes in many forms. Issues often contain a lot of information about a specific UX problem and telemetry can tell us how many people might be affected. On top of this we try to understand the context in which problems manifest themselves and in which our designs must succeed. A great way to get that rich contextual information is through talking with and observing people using the product. We will sometimes run a series of customer interviews, observing their behaviors while using the tool or stepping through a prototype. Early on, these interviews will focus on understanding the details of the problems we are solving. As we learn more about those details and transition into solution mode, we\u2019ll use interviews and observations to determine if the design decisions we are making are solving the problems we intend to solve.","title":"Research Process"},{"location":"UX/#design-process","text":"Once we feel that we have a good understanding of the problem, we start to develop design concepts for potential solutions. Early on we try to produce multiple low fidelity concepts and solutions (pencil sketches, wireframes, PowerPoint slides, etc.) which help us focus on the interaction flow instead of details such as colors and fonts. In parallel time we may start to prototype a solution, incorporating feedback from the research and design, morphing the experience along the way. We do this in parallel because the best feedback really comes from dogfooding the product.","title":"Design Process"},{"location":"UX/#how-to-contribute","text":"As mentioned above, UX design can bring out the passion in people and we would like to turn that passion into a great product. If you have thoughts on a proposal, we ask that you (respectfully!) contribute those thoughts in the appropriate issue. We have many opportunities to participate in online studies and surveys, and we will solicit participation through the issue (and probably twitter @code ).","title":"How to Contribute"},{"location":"WebAssembly/","text":"","title":"WebAssembly"},{"location":"Working-with-xterm.js/","text":"Development Check out the xterm.js contribution documentation for how to work on the project. Managing issues Since bugs and/or features manifest themselves in both VS Code and xterm.js, it's a little unclear initially where the issue(s) should be created. After some experimentation I landed on the best way to deal with this is to create the an issue in both the Microsoft/vscode and xtermjs/xterm.js repositories. The reason this is the best workflow is because the changes will then be verified during endgame and it's much easier to compose release notes for the terminal changes. This guideline is less important for more obscure terminal issues where it's typically easier to keep a single source of truth in the xterm.js repo. Updating xterm in vscode Every commit that goes into the master branch of xterm.js is automatically released under the beta tag using Azure Pipelines. To update the module in vscode, follow these steps: Identify the release to be used and install it. Find the latest beta and install via yarn add xterm@x-y-z-betaX (also do this in the remote/ and remote/web folders). If you want an older commit the easiest way to do this right now is to identify the commit and then find the \"Merge pull request\" build on this pipeline , click into the \"Release\" job and view the output of the \"Publish to npm\" step to find the version number then install it with yarn add xterm@x.y.z-betaX Build/test locally to make sure it works or push a branch and do a PR so that tests are run automatically. If the version change is significant it's a good idea to do a product build and verify it passes fully. Write the commit message in the following format: xterm@4.2.0-beta18 Diff: https://github.com/xtermjs/xterm.js/compare/91cbeec...eb25243 - Change 1... - Change 2... Updating xterm-addon-* Similar to xterm , identify the release, pull it in and test it Building one off builds of xterm and addons Right now one off builds are manual.","title":"Working with xterm.js"},{"location":"Working-with-xterm.js/#development","text":"Check out the xterm.js contribution documentation for how to work on the project.","title":"Development"},{"location":"Working-with-xterm.js/#managing-issues","text":"Since bugs and/or features manifest themselves in both VS Code and xterm.js, it's a little unclear initially where the issue(s) should be created. After some experimentation I landed on the best way to deal with this is to create the an issue in both the Microsoft/vscode and xtermjs/xterm.js repositories. The reason this is the best workflow is because the changes will then be verified during endgame and it's much easier to compose release notes for the terminal changes. This guideline is less important for more obscure terminal issues where it's typically easier to keep a single source of truth in the xterm.js repo.","title":"Managing issues"},{"location":"Working-with-xterm.js/#updating-xterm-in-vscode","text":"Every commit that goes into the master branch of xterm.js is automatically released under the beta tag using Azure Pipelines. To update the module in vscode, follow these steps: Identify the release to be used and install it. Find the latest beta and install via yarn add xterm@x-y-z-betaX (also do this in the remote/ and remote/web folders). If you want an older commit the easiest way to do this right now is to identify the commit and then find the \"Merge pull request\" build on this pipeline , click into the \"Release\" job and view the output of the \"Publish to npm\" step to find the version number then install it with yarn add xterm@x.y.z-betaX Build/test locally to make sure it works or push a branch and do a PR so that tests are run automatically. If the version change is significant it's a good idea to do a product build and verify it passes fully. Write the commit message in the following format: xterm@4.2.0-beta18 Diff: https://github.com/xtermjs/xterm.js/compare/91cbeec...eb25243 - Change 1... - Change 2...","title":"Updating xterm in vscode"},{"location":"Working-with-xterm.js/#updating-xterm-addon-","text":"Similar to xterm , identify the release, pull it in and test it","title":"Updating xterm-addon-*"},{"location":"Working-with-xterm.js/#building-one-off-builds-of-xterm-and-addons","text":"Right now one off builds are manual.","title":"Building one off builds of xterm and addons"},{"location":"[WIP]-Code-Editor-Design-Doc/","text":"Overview Model-View-ViewModel in Monaco User Interactions Key Handler Mouse or Touch Commands Life Cycle Render Performance Deep into the text Indentation Markers Decorations Tokens and Themes Extensibility Patterns and Principles Overview Code structure Like other parts of VS Code, the code is organized by the target runtime environment in Monaco. We distinguish between the following target environments |-- editor | |-- browser // source code that requires the browser APIs like access to the DOM | |-- common // the core part of the editor, source code that only requires basic JavaScript APIs and run in all the other target environments | |-- contrib // first class *extensions* of the editor | |-- electron-browser // source code that requires the Electron renderer-process APIs | |-- node // source code that requires nodejs APIs | |-- test Model-View-ViewModel in Monaco Although we don't adopt any framework during the development, Monaco's design finally turns out to be MVVM (Model-View-ViewModel). With this design pattern in mind, we can simply separate components in the core into three layers: View: User interface. It display information to users (Text, Cursor, Selection, etc) and handle user interactions. The View elements here are actually HTML DOM nodes. Model: Provides a view-independent representation of business entities. In Monaco, it usually represents the file you are editing. ViewModel: The bridge between the View and the Model. It retrieves data from the Model and manipulates it into the format required by the View. A good example to help understand ViewModel is that \\t is always a single character in Model while it takes several columns in ViewModel and it's determined by option tabSize . Here we'd like to take the outside-in approach to describe the architecture of Monaco, the relationship and dependencies of different components and even the source code structure, from View to ViewModel then finally Model . View Above is what users usually see while working on source code files. This particular view is a CodeEditorWidget and it consists of multiple view parts, including but not limited to: Line Numbers View Zone : The Find All Reference is a View Zone which is a full horizontal rectangle that pushes text down. The editor reserves space for view zones when rendering, that's why the line before the widget is no.88 and the one after is no.89. ViewLine . Each line of text is a ViewLine. Decorations : Word highlights are Decorations Content Widget : The Suggestion Widget is a Content Widget which renders inline with the text and can be easily placed near an editor position. Overlay Widget : The Find widget is an Overlay Widget, which renders on top of the text. ... For the sake of performance and memory, our rendering process will only render the view elements (which are DOM elements) whenever necessary ideally. Besides, all these view elements will listen to related events occur in the ViewModel and rerender when there is real view change. For instance, the suggestion list will change constantly when users type but we just make changes to the DOM node generate by Cursors and the Suggestion Widget. Word Highlight Decorations might have some updates as well but we will do some dirty check to see if it's necessary. For other parts like the Find All References Widget, Find Widget, etc, they just stay where they were so no View redraw is happening. Since these components are general and browser related, we put them in /vs/editor/browser and right now we have around 20 basic view parts in the core. editor |-- browser | |-- ... | |-- viewParts | | |-- contentWidgets | | |-- currentLineHighlight | | |-- ... | | |-- decorations | | |-- ... | | |-- overlayWidgets | | |-- ... One thing to note is that all these basic view parts are not bound to any particular feature. When we want to create a view component which may be composed of several different view parts and has its special business logic and view updating mechanism, we can extend from basic view parts and put it under /vs/editor/contrib/ (aka first class extensions to the editor). For example, the Find Widget listens to the content change in the search box and the editor and consists of a Content Widget and multiple decorations. ViewModel If we are developing a simple application, it's natural to bind Model directly to the View if the mapping is clear and easy to handle, like a boolean in the model can be data bound to a CheckBox in the View or an array can be bound to a dropdown list. You can even choose to make it two-way data binding or just simply one-way. However real world applications are usually more complex than that. The Model is very likely to have types that can't be directly mapped to visual elements (can you imagine that you have to take HTML Elements into account while designing the data structure?) and the View may perform complex operations that don't necessarily modify the model. That's basically why we need ViewModel here. In Monaco, the View has no direct way of talking to the Model. Instead it asks ViewModel for data or events, and informs the ViewModel about user actions. So the ViewModel contains the reference to the Model, the state of the View, event handlers and distributors, and transformers that can convert Model data to View info and vice versa. We can take a look at the interface of ViewModel in Monaco to grasp a better idea export interface IViewModel extends IEventEmitter { getTabSize(): number; getLineCount(): number; mightContainRTL(): boolean; mightContainNonBasicASCII(): boolean; getLineContent(lineNumber: number): string; getLineIndentGuide(lineNumber: number): number; ... getSelections(): Selection[]; // View -> Model conversion and related methods convertViewPositionToModelPosition(viewLineNumber: number, viewColumn: number): Position; convertViewRangeToModelRange(viewRange: Range): Range; // Model -> View conversion and related methods getModelLineContent(lineNumber: number): string; getModelLineMaxColumn(modelLineNumber: number): number; validateModelPosition(position: IPosition): Position; convertModelPositionToViewPosition(modelLineNumber: number, modelColumn: number): Position; convertModelSelectionToViewSelection(modelSelection: Selection): Selection; modelPositionIsVisible(position: Position): boolean; } The first half methods are wrappers of Model, Editor configuration and View state. The second half are converters of View and Model info. Remember the first example of tab and column width we mentioned at the beginning of this topic? convertModelPositionToViewPosition and its counterpart convertViewRangeToModelRange are the right methods to call and they sit in the ViewModel but not other layers. Besides, both Model and ViewModel are implemented as EventEmitter , which allows us to handle events with ease. Model Model is the data and business logic, which is completely UI independent. To some extent, it's the core part of Monaco editor. It holds content and metadata of files, tokens and markers which provide a language-specific, structured representation of plain text, decorations for customized visual effect metadata, etc. Monaco has a rich extensibility model and you can extend it in many ways. However, we do not provide direct access to the View or ViewModel to extensions. We are continually trying to optimize use of the underlying web technologies to deliver an always available, highly responsive editor and we will continue to tune our use of the DOM as these technologies and our product evolve. To maintain performance and compatibility, we run extensions in their own host process and prevent direct access to the View related information. Instead we feed extensions with Model which is more stable and very unlikely to change vastly and break external extensions. Monaco already includes a built-in set of UI components for common scenarios such as IntelliSense, so that these experiences are consistent across programming languages and extensions and extension developers do not need to build their own. These UI components are mostly put in /vs/editor/contrib/ and that's the place we should go if we want to add new UI components which are good to have in the editor but not fundamental to the core.","title":"[WIP] Code Editor Design Doc"},{"location":"[WIP]-Code-Editor-Design-Doc/#overview","text":"","title":"Overview"},{"location":"[WIP]-Code-Editor-Design-Doc/#code-structure","text":"Like other parts of VS Code, the code is organized by the target runtime environment in Monaco. We distinguish between the following target environments |-- editor | |-- browser // source code that requires the browser APIs like access to the DOM | |-- common // the core part of the editor, source code that only requires basic JavaScript APIs and run in all the other target environments | |-- contrib // first class *extensions* of the editor | |-- electron-browser // source code that requires the Electron renderer-process APIs | |-- node // source code that requires nodejs APIs | |-- test","title":"Code structure"},{"location":"[WIP]-Code-Editor-Design-Doc/#model-view-viewmodel-in-monaco","text":"Although we don't adopt any framework during the development, Monaco's design finally turns out to be MVVM (Model-View-ViewModel). With this design pattern in mind, we can simply separate components in the core into three layers: View: User interface. It display information to users (Text, Cursor, Selection, etc) and handle user interactions. The View elements here are actually HTML DOM nodes. Model: Provides a view-independent representation of business entities. In Monaco, it usually represents the file you are editing. ViewModel: The bridge between the View and the Model. It retrieves data from the Model and manipulates it into the format required by the View. A good example to help understand ViewModel is that \\t is always a single character in Model while it takes several columns in ViewModel and it's determined by option tabSize . Here we'd like to take the outside-in approach to describe the architecture of Monaco, the relationship and dependencies of different components and even the source code structure, from View to ViewModel then finally Model .","title":"Model-View-ViewModel in Monaco"},{"location":"[WIP]-Code-Editor-Design-Doc/#view","text":"Above is what users usually see while working on source code files. This particular view is a CodeEditorWidget and it consists of multiple view parts, including but not limited to: Line Numbers View Zone : The Find All Reference is a View Zone which is a full horizontal rectangle that pushes text down. The editor reserves space for view zones when rendering, that's why the line before the widget is no.88 and the one after is no.89. ViewLine . Each line of text is a ViewLine. Decorations : Word highlights are Decorations Content Widget : The Suggestion Widget is a Content Widget which renders inline with the text and can be easily placed near an editor position. Overlay Widget : The Find widget is an Overlay Widget, which renders on top of the text. ... For the sake of performance and memory, our rendering process will only render the view elements (which are DOM elements) whenever necessary ideally. Besides, all these view elements will listen to related events occur in the ViewModel and rerender when there is real view change. For instance, the suggestion list will change constantly when users type but we just make changes to the DOM node generate by Cursors and the Suggestion Widget. Word Highlight Decorations might have some updates as well but we will do some dirty check to see if it's necessary. For other parts like the Find All References Widget, Find Widget, etc, they just stay where they were so no View redraw is happening. Since these components are general and browser related, we put them in /vs/editor/browser and right now we have around 20 basic view parts in the core. editor |-- browser | |-- ... | |-- viewParts | | |-- contentWidgets | | |-- currentLineHighlight | | |-- ... | | |-- decorations | | |-- ... | | |-- overlayWidgets | | |-- ... One thing to note is that all these basic view parts are not bound to any particular feature. When we want to create a view component which may be composed of several different view parts and has its special business logic and view updating mechanism, we can extend from basic view parts and put it under /vs/editor/contrib/ (aka first class extensions to the editor). For example, the Find Widget listens to the content change in the search box and the editor and consists of a Content Widget and multiple decorations.","title":"View"},{"location":"[WIP]-Code-Editor-Design-Doc/#viewmodel","text":"If we are developing a simple application, it's natural to bind Model directly to the View if the mapping is clear and easy to handle, like a boolean in the model can be data bound to a CheckBox in the View or an array can be bound to a dropdown list. You can even choose to make it two-way data binding or just simply one-way. However real world applications are usually more complex than that. The Model is very likely to have types that can't be directly mapped to visual elements (can you imagine that you have to take HTML Elements into account while designing the data structure?) and the View may perform complex operations that don't necessarily modify the model. That's basically why we need ViewModel here. In Monaco, the View has no direct way of talking to the Model. Instead it asks ViewModel for data or events, and informs the ViewModel about user actions. So the ViewModel contains the reference to the Model, the state of the View, event handlers and distributors, and transformers that can convert Model data to View info and vice versa. We can take a look at the interface of ViewModel in Monaco to grasp a better idea export interface IViewModel extends IEventEmitter { getTabSize(): number; getLineCount(): number; mightContainRTL(): boolean; mightContainNonBasicASCII(): boolean; getLineContent(lineNumber: number): string; getLineIndentGuide(lineNumber: number): number; ... getSelections(): Selection[]; // View -> Model conversion and related methods convertViewPositionToModelPosition(viewLineNumber: number, viewColumn: number): Position; convertViewRangeToModelRange(viewRange: Range): Range; // Model -> View conversion and related methods getModelLineContent(lineNumber: number): string; getModelLineMaxColumn(modelLineNumber: number): number; validateModelPosition(position: IPosition): Position; convertModelPositionToViewPosition(modelLineNumber: number, modelColumn: number): Position; convertModelSelectionToViewSelection(modelSelection: Selection): Selection; modelPositionIsVisible(position: Position): boolean; } The first half methods are wrappers of Model, Editor configuration and View state. The second half are converters of View and Model info. Remember the first example of tab and column width we mentioned at the beginning of this topic? convertModelPositionToViewPosition and its counterpart convertViewRangeToModelRange are the right methods to call and they sit in the ViewModel but not other layers. Besides, both Model and ViewModel are implemented as EventEmitter , which allows us to handle events with ease.","title":"ViewModel"},{"location":"[WIP]-Code-Editor-Design-Doc/#model","text":"Model is the data and business logic, which is completely UI independent. To some extent, it's the core part of Monaco editor. It holds content and metadata of files, tokens and markers which provide a language-specific, structured representation of plain text, decorations for customized visual effect metadata, etc. Monaco has a rich extensibility model and you can extend it in many ways. However, we do not provide direct access to the View or ViewModel to extensions. We are continually trying to optimize use of the underlying web technologies to deliver an always available, highly responsive editor and we will continue to tune our use of the DOM as these technologies and our product evolve. To maintain performance and compatibility, we run extensions in their own host process and prevent direct access to the View related information. Instead we feed extensions with Model which is more stable and very unlikely to change vastly and break external extensions. Monaco already includes a built-in set of UI components for common scenarios such as IntelliSense, so that these experiences are consistent across programming languages and extensions and extension developers do not need to build their own. These UI components are mostly put in /vs/editor/contrib/ and that's the place we should go if we want to add new UI components which are good to have in the editor but not fundamental to the core.","title":"Model"},{"location":"[WIP]-Design-Checklist/","text":"Intro These items are a general checklist for when we create new features that is based off our design principles . Design checklist Is this accessible? Does it pass the color contrast ratio requirement ? Does it support keyboard navigation (i.e. keyboard only)? Does it have the proper markup (name, role, value) ? Are the text links meaningful ? Is this customizable? Can extensions contribute to this ? Can users define keybindings for actions? Are the setting names and descriptions clear? Is this simple? Are these incremental changes (i.e. can it be broken down)? Are text descriptions clear and easy to understand? Can you re-use existing components/patterns? Do your icons make sense? Have you tested this with users? Is this delightful? Is input from the user contextual? Are user actions optimized (i.e. can we reduce the number of steps)? Can we reduce the load time?","title":"[WIP] Design Checklist"},{"location":"[WIP]-Design-Checklist/#intro","text":"These items are a general checklist for when we create new features that is based off our design principles .","title":"Intro"},{"location":"[WIP]-Design-Checklist/#design-checklist","text":"Is this accessible? Does it pass the color contrast ratio requirement ? Does it support keyboard navigation (i.e. keyboard only)? Does it have the proper markup (name, role, value) ? Are the text links meaningful ? Is this customizable? Can extensions contribute to this ? Can users define keybindings for actions? Are the setting names and descriptions clear? Is this simple? Are these incremental changes (i.e. can it be broken down)? Are text descriptions clear and easy to understand? Can you re-use existing components/patterns? Do your icons make sense? Have you tested this with users? Is this delightful? Is input from the user contextual? Are user actions optimized (i.e. can we reduce the number of steps)? Can we reduce the load time?","title":"Design checklist"},{"location":"[WIP]-Design-Principles/","text":"Intro In order for a product to evolve there needs to be a set of core principles that will guide it in the right direction. Here are a set of over-arching design principles that we apply to our problem solving. Additionally, our design checklist will be based off these principles. Design principles Think universal We focus on what unifies people\u2014human motivations, relationships, and abilities. This drives us to consider the broader social impact of our work. The result is an experience that has a diversity of ways for all people to participate. Accessible Support for keyboard-only All users (new and existing) Make it personal We challenge ourselves to create an emotional connection. Human-to-human interactions can inspire better human-to-technology interaction. A person\u2019s unique circumstances can improve a design for everyone. The result is an experience that feels like it was created for one person. Customizable Extensible Keep it simple We start with simplicity as the ultimate unifier. When we reduce clutter people know what to do next. They\u2019re inspired to move forward into spaces that are clean, light, and open. The result is an experience that\u2019s honest and timeless. Clear Intuitive Iterative Minimal Create delight Delightful experiences evoke wonder and discovery. Sometimes it\u2019s magical. Sometimes it\u2019s a detail that\u2019s just right. We design these moments to feel like a welcomed change in tempo. The result is an experience that has momentum and flow. Harmonious Contextual Empowering Discovery Attention to detail","title":"[WIP] Design Principles"},{"location":"[WIP]-Design-Principles/#intro","text":"In order for a product to evolve there needs to be a set of core principles that will guide it in the right direction. Here are a set of over-arching design principles that we apply to our problem solving. Additionally, our design checklist will be based off these principles.","title":"Intro"},{"location":"[WIP]-Design-Principles/#design-principles","text":"","title":"Design principles"},{"location":"[WIP]-Design-Principles/#think-universal","text":"We focus on what unifies people\u2014human motivations, relationships, and abilities. This drives us to consider the broader social impact of our work. The result is an experience that has a diversity of ways for all people to participate. Accessible Support for keyboard-only All users (new and existing)","title":"Think universal"},{"location":"[WIP]-Design-Principles/#make-it-personal","text":"We challenge ourselves to create an emotional connection. Human-to-human interactions can inspire better human-to-technology interaction. A person\u2019s unique circumstances can improve a design for everyone. The result is an experience that feels like it was created for one person. Customizable Extensible","title":"Make it personal"},{"location":"[WIP]-Design-Principles/#keep-it-simple","text":"We start with simplicity as the ultimate unifier. When we reduce clutter people know what to do next. They\u2019re inspired to move forward into spaces that are clean, light, and open. The result is an experience that\u2019s honest and timeless. Clear Intuitive Iterative Minimal","title":"Keep it simple"},{"location":"[WIP]-Design-Principles/#create-delight","text":"Delightful experiences evoke wonder and discovery. Sometimes it\u2019s magical. Sometimes it\u2019s a detail that\u2019s just right. We design these moments to feel like a welcomed change in tempo. The result is an experience that has momentum and flow. Harmonious Contextual Empowering Discovery Attention to detail","title":"Create delight"},{"location":"_Footer/","text":"Want to contribute to this Wiki? Fork it and send a pull request.","title":" Footer"},{"location":"_Footer/#want-to-contribute-to-this-wiki","text":"Fork it and send a pull request.","title":"Want to contribute to this Wiki?"},{"location":"_Sidebar/","text":"Project Management * [[Roadmap]] * [[Iteration Plans]] * [[Development Process]] * [[Issue Tracking]] * [[Issues Triaging]] * [[Performance Issues]] * [[Community Issue Tracking]] * [[Keybinding Issues]] * [[Native Crash Issues]] * [[Search Issues]] * [[Issue Grooming]] * [[Build Master]] * [[Release Process]] * [[Running the Endgame]] * [[Related Projects]] Contributing * [[How to Contribute]] * [[Submitting Bugs and Suggestions]] * [[Feedback Channels]] * [[Source Code Organization]] * [[Coding Guidelines]] * [[Smoke Test]] * [[Contributor License Agreement]] * Requested Extensions * [[Extension API Guidelines]] Documentation * Extensions * API * Visual Studio Code * Document Repository * Multi Root Workspace API","title":" Sidebar"}]}